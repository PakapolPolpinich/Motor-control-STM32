
Motor_control_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000395c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08003c00  08003c00  00013c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08003fec  08003fec  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fec  08003fec  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  24000000  08003ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  24000208  080041fc  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400039c  080041fc  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY
 13 .debug_info   000033ef  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c8e  00000000  00000000  00023668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  000242f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000181  00000000  00000000  00024538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c2ed  00000000  00000000  000246b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000417d  00000000  00000000  000509a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4e6f  00000000  00000000  00054b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015b0  00000000  00000000  00149994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08003be4 	.word	0x08003be4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	08003be4 	.word	0x08003be4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Encoder_init>:


#include"Encoder.h"
#include"gpio.h"

void Encoder_init(void){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af02      	add	r7, sp, #8

	GPIO_pinMode(GPIOE,9,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM1_CH1);
 8000396:	2301      	movs	r3, #1
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2300      	movs	r3, #0
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2300      	movs	r3, #0
 80003a0:	2202      	movs	r2, #2
 80003a2:	2109      	movs	r1, #9
 80003a4:	4836      	ldr	r0, [pc, #216]	; (8000480 <Encoder_init+0xf0>)
 80003a6:	f000 f933 	bl	8000610 <GPIO_pinMode>
	GPIO_pinMode(GPIOE,11,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM1_CH2);
 80003aa:	2301      	movs	r3, #1
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	2300      	movs	r3, #0
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2300      	movs	r3, #0
 80003b4:	2202      	movs	r2, #2
 80003b6:	210b      	movs	r1, #11
 80003b8:	4831      	ldr	r0, [pc, #196]	; (8000480 <Encoder_init+0xf0>)
 80003ba:	f000 f929 	bl	8000610 <GPIO_pinMode>
	GPIO_pinMode(GPIOA,0,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM2_CH1);
 80003be:	2301      	movs	r3, #1
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2300      	movs	r3, #0
 80003c8:	2202      	movs	r2, #2
 80003ca:	2100      	movs	r1, #0
 80003cc:	482d      	ldr	r0, [pc, #180]	; (8000484 <Encoder_init+0xf4>)
 80003ce:	f000 f91f 	bl	8000610 <GPIO_pinMode>
	GPIO_pinMode(GPIOB,3,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM2_CH2);
 80003d2:	2301      	movs	r3, #1
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2300      	movs	r3, #0
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2300      	movs	r3, #0
 80003dc:	2202      	movs	r2, #2
 80003de:	2103      	movs	r1, #3
 80003e0:	4829      	ldr	r0, [pc, #164]	; (8000488 <Encoder_init+0xf8>)
 80003e2:	f000 f915 	bl	8000610 <GPIO_pinMode>

	RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <Encoder_init+0xfc>)
 80003e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80003ec:	4a27      	ldr	r2, [pc, #156]	; (800048c <Encoder_init+0xfc>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	RCC->APB2ENR  |= RCC_APB2ENR_TIM1EN;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <Encoder_init+0xfc>)
 80003f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80003fc:	4a23      	ldr	r2, [pc, #140]	; (800048c <Encoder_init+0xfc>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0


	TIM1->CCMR1 |= TIM_CCMR1_CC1S_0|TIM_CCMR1_CC2S_0;// input capture mode
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <Encoder_init+0x100>)
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	4921      	ldr	r1, [pc, #132]	; (8000490 <Encoder_init+0x100>)
 800040c:	f240 1301 	movw	r3, #257	; 0x101
 8000410:	4313      	orrs	r3, r2
 8000412:	618b      	str	r3, [r1, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0|TIM_CCMR1_CC2S_0;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000418:	699a      	ldr	r2, [r3, #24]
 800041a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800041e:	f240 1301 	movw	r3, #257	; 0x101
 8000422:	4313      	orrs	r3, r2
 8000424:	618b      	str	r3, [r1, #24]
	

	TIM1->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P); // Non-inverted signals signal read for timer  = signal for encoder
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <Encoder_init+0x100>)
 8000428:	6a1b      	ldr	r3, [r3, #32]
 800042a:	4a19      	ldr	r2, [pc, #100]	; (8000490 <Encoder_init+0x100>)
 800042c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000430:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P); // Non-inverted signals
 8000432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000440:	6213      	str	r3, [r2, #32]
	

	TIM1->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;//set x4 encoder
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <Encoder_init+0x100>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <Encoder_init+0x100>)
 8000448:	f043 0303 	orr.w	r3, r3, #3
 800044c:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 800044e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000458:	f043 0303 	orr.w	r3, r3, #3
 800045c:	6093      	str	r3, [r2, #8]
	
//	TIM2->CR1 &= ~(TIM_CR1_DIR);// count up

	// Ensure non-inverted configuration for complementary signals
	TIM1->CR1 |= TIM_CR1_CEN;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <Encoder_init+0x100>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <Encoder_init+0x100>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;
 800046a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]
	
	//create for loop

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	58021000 	.word	0x58021000
 8000484:	58020000 	.word	0x58020000
 8000488:	58020400 	.word	0x58020400
 800048c:	58024400 	.word	0x58024400
 8000490:	40010000 	.word	0x40010000

08000494 <GetValueEncoder>:
 *
 * @Note              -

 *//////////////////////////////////////////////////////////////////////

int32_t GetValueEncoder(uint8_t channel){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	switch (channel) {
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d002      	beq.n	80004aa <GetValueEncoder+0x16>
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d003      	beq.n	80004b0 <GetValueEncoder+0x1c>
 80004a8:	e006      	b.n	80004b8 <GetValueEncoder+0x24>
		        case 1: return (int32_t)(TIM1->CNT); break;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <GetValueEncoder+0x30>)
 80004ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ae:	e003      	b.n	80004b8 <GetValueEncoder+0x24>
		        case 2: return (int32_t)(TIM2->CNT); break;
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	e7ff      	b.n	80004b8 <GetValueEncoder+0x24>
		    }
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40010000 	.word	0x40010000

080004c8 <Clk_init>:
 *  Created on: Dec 7, 2024
 *      Author: Admin
 */
#include"SystemClock.h"

void Clk_init(){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	// Enable SMPS (Switch Mode Power Supply)
	PWR->CR3 |= (1 << PWR_CR3_SMPSEN_Pos); // Enable SMPS
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <Clk_init+0xbc>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a2c      	ldr	r2, [pc, #176]	; (8000584 <Clk_init+0xbc>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	60d3      	str	r3, [r2, #12]
	// Set Voltage Scaling to Scale 1 because it high frequency
	PWR->D3CR = (0x3 << PWR_D3CR_VOS_Pos);
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <Clk_init+0xbc>)
 80004da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80004de:	619a      	str	r2, [r3, #24]
	// Enable HSE
	RCC->CR |= (1 << RCC_CR_HSEON_Pos);
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <Clk_init+0xc0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a28      	ldr	r2, [pc, #160]	; (8000588 <Clk_init+0xc0>)
 80004e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004ea:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << RCC_CR_HSERDY_Pos)));//wait for it to be ready
 80004ec:	bf00      	nop
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <Clk_init+0xc0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <Clk_init+0x26>
	// PLL source MUX use HSE and set DIVM1
	RCC->PLLCKSELR = RCC_PLLCKSELR_PLLSRC_HSE | RCC_PLLCKSELR_DIVM1_0;// DIVM1 division 1
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <Clk_init+0xc0>)
 80004fc:	2212      	movs	r2, #18
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
	// Configure PLL1 (400 MHz SYSCLK, 61.538 MHz for PLL1Q
	RCC->PLL1DIVR = (100 - 1) << RCC_PLL1DIVR_N1_Pos |  // DIVN1 = 100 ->8*100 = 800 MHz
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <Clk_init+0xc0>)
 8000502:	4a22      	ldr	r2, [pc, #136]	; (800058c <Clk_init+0xc4>)
 8000504:	631a      	str	r2, [r3, #48]	; 0x30
	                (2 - 1) << RCC_PLL1DIVR_P1_Pos |    // DIVP1 = 2 ->800/2 = 400 MHz
	                (13 - 1) << RCC_PLL1DIVR_Q1_Pos;   // DIVQ1 = 13->800/13 = 61.538
	RCC->PLL1FRACR = 0;  // No fractional part
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <Clk_init+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
	// Enable PLL1
	RCC->CR |= (1 << RCC_CR_PLL1ON_Pos);
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <Clk_init+0xc0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <Clk_init+0xc0>)
 8000512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000516:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << RCC_CR_PLL1RDY_Pos)));//wait until PLL lock
 8000518:	bf00      	nop
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <Clk_init+0xc0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <Clk_init+0x52>
	//Configure Flash Latency
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);  // Clear existing latency bits
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <Clk_init+0xc8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <Clk_init+0xc8>)
 800052c:	f023 030f 	bic.w	r3, r3, #15
 8000530:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2WS;            // Set latency to 2 wait states
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <Clk_init+0xc8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <Clk_init+0xc8>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6013      	str	r3, [r2, #0]
	//Configure Domain Prescalers
	RCC->D1CFGR = (0x8 << RCC_D1CFGR_HPRE_Pos) |    // HPRE = /2 -> 200 MHz CPU2,AHB1,2
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <Clk_init+0xc0>)
 8000540:	2248      	movs	r2, #72	; 0x48
 8000542:	619a      	str	r2, [r3, #24]
	              (4 << RCC_D1CFGR_D1PPRE_Pos);     // D1PPRE = /2 -> 100 MHz (
	RCC->D2CFGR = (4 << RCC_D2CFGR_D2PPRE1_Pos) |   // D2PPRE1 = /2 -> 100 MHz
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <Clk_init+0xc0>)
 8000546:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800054a:	61da      	str	r2, [r3, #28]
	              (4 << RCC_D2CFGR_D2PPRE2_Pos);    // D2PPRE2 = /2 -> 100 MHz
	RCC->D3CFGR = 4 << 4 ;                          // D3PPRE = /2 -> 100 MHz
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <Clk_init+0xc0>)
 800054e:	2240      	movs	r2, #64	; 0x40
 8000550:	621a      	str	r2, [r3, #32]
	// Select PLL1 as System Clock
	RCC->CFGR &= ~(0x3 << RCC_CFGR_SW_Pos);         // Clear system clock switch bits
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <Clk_init+0xc0>)
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <Clk_init+0xc0>)
 8000558:	f023 0303 	bic.w	r3, r3, #3
 800055c:	6113      	str	r3, [r2, #16]
	RCC->CFGR |= RCC_CFGR_SW_PLL1;                  // Select PLL1 as SYSCLK
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <Clk_init+0xc0>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	4a09      	ldr	r2, [pc, #36]	; (8000588 <Clk_init+0xc0>)
 8000564:	f043 0303 	orr.w	r3, r3, #3
 8000568:	6113      	str	r3, [r2, #16]
	// Wait until PLL1 is used as the system clock
	while ((RCC->CFGR & (0x3 << RCC_CFGR_SWS_Pos)) != RCC_CFGR_SWS_PLL1);
 800056a:	bf00      	nop
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <Clk_init+0xc0>)
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	f003 0318 	and.w	r3, r3, #24
 8000574:	2b18      	cmp	r3, #24
 8000576:	d1f9      	bne.n	800056c <Clk_init+0xa4>
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	58024800 	.word	0x58024800
 8000588:	58024400 	.word	0x58024400
 800058c:	000c0263 	.word	0x000c0263
 8000590:	52002000 	.word	0x52002000

08000594 <SysTick_Handler>:

#include"Systick_timer.h"

volatile uint32_t millis_counter = 0;

void SysTick_Handler(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	millis_counter++;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <SysTick_Handler+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a03      	ldr	r2, [pc, #12]	; (80005ac <SysTick_Handler+0x18>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	24000224 	.word	0x24000224

080005b0 <Systick_init>:
 * @return            -	None
 *
 * @Note              -

 *//////////////////////////////////////////////////////////////////////
void Systick_init(const uint32_t f_cpu, const uint32_t Hz){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	/*calculate of reload value*/
	SysTick->LOAD  = (f_cpu / Hz) - 1; // Ex. 1s/0.0625us -> 16Mhz/1hz (every 1 sec go to interrupt)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <Systick_init+0x44>)
 80005c4:	3b01      	subs	r3, #1
 80005c6:	6053      	str	r3, [r2, #4]
									   // Ex. 1ms/0.0625us -> 16Mhz/1000hz tick (every 1ms go to interrupt)
	/*clear current value*/
	SysTick->VAL   =  0;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <Systick_init+0x44>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
	/*program control and status register*/
	SysTick->CTRL |= CLKSOURCE | TICKINT ;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <Systick_init+0x44>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <Systick_init+0x44>)
 80005d4:	f043 0306 	orr.w	r3, r3, #6
 80005d8:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= COUNTER_ENABLE ;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <Systick_init+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <Systick_init+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e010 	.word	0xe000e010

080005f8 <millis>:
 * @return            - current value of millis_counter
 *
 * @Note              - This function provides the elapsed time in milliseconds

 *//////////////////////////////////////////////////////////////////////
uint32_t millis(){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	return millis_counter;
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <millis+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	24000224 	.word	0x24000224

08000610 <GPIO_pinMode>:
 * @return            -	None
 *
 * @Note              -

 *//////////////////////////////////////////////////////////////////////
void GPIO_pinMode(GPIO_TypeDef *pGPIO,uint8_t pin,uint8_t mode,uint8_t speed,uint8_t pupd,uint8_t AFRLH){
 8000610:	b4b0      	push	{r4, r5, r7}
 8000612:	b09b      	sub	sp, #108	; 0x6c
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	4608      	mov	r0, r1
 800061a:	4611      	mov	r1, r2
 800061c:	461a      	mov	r2, r3
 800061e:	4603      	mov	r3, r0
 8000620:	70fb      	strb	r3, [r7, #3]
 8000622:	460b      	mov	r3, r1
 8000624:	70bb      	strb	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	707b      	strb	r3, [r7, #1]
	static uint16_t clock = 0;
	GPIO_TypeDef * gpio_ports[] = {GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF,GPIOG,GPIOH,GPIOI,GPIOJ,GPIOK};
 800062a:	4b67      	ldr	r3, [pc, #412]	; (80007c8 <GPIO_pinMode+0x1b8>)
 800062c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t gpio_enable_bits[] = {RCC_GPIOA, RCC_GPIOB, RCC_GPIOC, RCC_GPIOD, RCC_GPIOE, RCC_GPIOF,RCC_GPIOG,RCC_GPIOH,RCC_GPIOI,RCC_GPIOJ,RCC_GPIOK};
 8000642:	4b62      	ldr	r3, [pc, #392]	; (80007cc <GPIO_pinMode+0x1bc>)
 8000644:	f107 040c 	add.w	r4, r7, #12
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000656:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	for (uint8_t i = 0; i <= 10; i++) {
 800065a:	2300      	movs	r3, #0
 800065c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000660:	e038      	b.n	80006d4 <GPIO_pinMode+0xc4>
	     if (pGPIO == gpio_ports[i] && !(clock & gpio_enable_bits[i])) {
 8000662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	3368      	adds	r3, #104	; 0x68
 800066a:	443b      	add	r3, r7
 800066c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	429a      	cmp	r2, r3
 8000674:	d129      	bne.n	80006ca <GPIO_pinMode+0xba>
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <GPIO_pinMode+0x1c0>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	3368      	adds	r3, #104	; 0x68
 8000684:	443b      	add	r3, r7
 8000686:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800068a:	4013      	ands	r3, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	d11c      	bne.n	80006ca <GPIO_pinMode+0xba>
	          RCC->AHB4ENR |= gpio_enable_bits[i];
 8000690:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <GPIO_pinMode+0x1c4>)
 8000692:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000696:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	3368      	adds	r3, #104	; 0x68
 800069e:	443b      	add	r3, r7
 80006a0:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80006a4:	494b      	ldr	r1, [pc, #300]	; (80007d4 <GPIO_pinMode+0x1c4>)
 80006a6:	4313      	orrs	r3, r2
 80006a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
	          clock |= gpio_enable_bits[i];
 80006ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	3368      	adds	r3, #104	; 0x68
 80006b4:	443b      	add	r3, r7
 80006b6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <GPIO_pinMode+0x1c0>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <GPIO_pinMode+0x1c0>)
 80006c6:	801a      	strh	r2, [r3, #0]
	          break;
 80006c8:	e008      	b.n	80006dc <GPIO_pinMode+0xcc>
	for (uint8_t i = 0; i <= 10; i++) {
 80006ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006ce:	3301      	adds	r3, #1
 80006d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80006d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006d8:	2b0a      	cmp	r3, #10
 80006da:	d9c2      	bls.n	8000662 <GPIO_pinMode+0x52>
	     	 }
	     }
	pGPIO->MODER	&= 	~(0x3 << (pin*2));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	78fa      	ldrb	r2, [r7, #3]
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	2103      	movs	r1, #3
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	401a      	ands	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	601a      	str	r2, [r3, #0]
	pGPIO->MODER 	|= 	(mode << (pin*2));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	78b9      	ldrb	r1, [r7, #2]
 80006f8:	78fa      	ldrb	r2, [r7, #3]
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	431a      	orrs	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]

	pGPIO->OSPEEDR 	&= 	~(0x3 << (pin*2));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	78fa      	ldrb	r2, [r7, #3]
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	2103      	movs	r1, #3
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	43d2      	mvns	r2, r2
 8000716:	401a      	ands	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR 	|= 	(speed << (pin*2));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	7879      	ldrb	r1, [r7, #1]
 8000722:	78fa      	ldrb	r2, [r7, #3]
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	431a      	orrs	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	609a      	str	r2, [r3, #8]
	pGPIO->PUPDR 	&= 	~(0x3 << (pin*2));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	2103      	movs	r1, #3
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	43d2      	mvns	r2, r2
 8000740:	401a      	ands	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR 	|= 	(pupd << (pin*2));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f897 1078 	ldrb.w	r1, [r7, #120]	; 0x78
 800074e:	78fa      	ldrb	r2, [r7, #3]
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]

	if(mode == 0x2){
 800075c:	78bb      	ldrb	r3, [r7, #2]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d12d      	bne.n	80007be <GPIO_pinMode+0x1ae>
		pGPIO->AFR[pin/8] &= ~(0xF << ((pin%8)*4));
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	08db      	lsrs	r3, r3, #3
 8000766:	b2d8      	uxtb	r0, r3
 8000768:	4602      	mov	r2, r0
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3208      	adds	r2, #8
 800076e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	f002 0207 	and.w	r2, r2, #7
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	210f      	movs	r1, #15
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	43d2      	mvns	r2, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4602      	mov	r2, r0
 8000786:	4019      	ands	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3208      	adds	r2, #8
 800078c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO->AFR[pin/8] |= (AFRLH << ((pin%8)*4));
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	4602      	mov	r2, r0
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3208      	adds	r2, #8
 800079c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a0:	f897 107c 	ldrb.w	r1, [r7, #124]	; 0x7c
 80007a4:	78fa      	ldrb	r2, [r7, #3]
 80007a6:	f002 0207 	and.w	r2, r2, #7
 80007aa:	0092      	lsls	r2, r2, #2
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4602      	mov	r2, r0
 80007b4:	4319      	orrs	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3208      	adds	r2, #8
 80007ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007be:	bf00      	nop
 80007c0:	376c      	adds	r7, #108	; 0x6c
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bcb0      	pop	{r4, r5, r7}
 80007c6:	4770      	bx	lr
 80007c8:	08003c00 	.word	0x08003c00
 80007cc:	08003c2c 	.word	0x08003c2c
 80007d0:	24000228 	.word	0x24000228
 80007d4:	58024400 	.word	0x58024400

080007d8 <motor_init>:
struct motor_pin motorPin[] = {
		{&(TIM3->CCR1),&(TIM3->CCR2)},
		{&(TIM3->CCR3),&(TIM3->CCR4)}
};

void motor_init(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	Pwm_init();
 80007dc:	f000 f844 	bl	8000868 <Pwm_init>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <rotateMotor>:
 * @return            -	None
 *
 * @Note              -

 *//////////////////////////////////////////////////////////////////////
void rotateMotor(uint8_t channel, int32_t speed){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
	if (speed > 0) {
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	dd0d      	ble.n	8000812 <rotateMotor+0x2e>
	        *(motorPin[channel].ln1) = (uint32_t)speed; // Forward
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <rotateMotor+0x80>)
 80007fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	601a      	str	r2, [r3, #0]
	        *(motorPin[channel].ln2) = 0;
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <rotateMotor+0x80>)
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4413      	add	r3, r2
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
	        *(motorPin[channel].ln2) = (uint32_t)abs(speed); // Reverse
	    } else {
	        *(motorPin[channel].ln1) = 0; // Stop
	        *(motorPin[channel].ln2) = 0;
	    }
}
 8000810:	e022      	b.n	8000858 <rotateMotor+0x74>
	    } else if (speed < 0) {
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da12      	bge.n	800083e <rotateMotor+0x5a>
	        *(motorPin[channel].ln1) = 0;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <rotateMotor+0x80>)
 800081c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
	        *(motorPin[channel].ln2) = (uint32_t)abs(speed); // Reverse
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800082a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <rotateMotor+0x80>)
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4413      	add	r3, r2
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	460a      	mov	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	e00c      	b.n	8000858 <rotateMotor+0x74>
	        *(motorPin[channel].ln1) = 0; // Stop
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <rotateMotor+0x80>)
 8000842:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
	        *(motorPin[channel].ln2) = 0;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <rotateMotor+0x80>)
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4413      	add	r3, r2
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	24000000 	.word	0x24000000

08000868 <Pwm_init>:
 */

#include"pwm.h"
#include"gpio.h"

void Pwm_init(){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af02      	add	r7, sp, #8
	
	RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <Pwm_init+0x108>)
 8000870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000874:	4a3e      	ldr	r2, [pc, #248]	; (8000970 <Pwm_init+0x108>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	GPIO_pinMode(GPIOB,0,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM3_CH3);//ch3
 800087e:	2302      	movs	r3, #2
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2300      	movs	r3, #0
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	2202      	movs	r2, #2
 800088a:	2100      	movs	r1, #0
 800088c:	4839      	ldr	r0, [pc, #228]	; (8000974 <Pwm_init+0x10c>)
 800088e:	f7ff febf 	bl	8000610 <GPIO_pinMode>
	GPIO_pinMode(GPIOB,1,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM3_CH4);//ch4
 8000892:	2302      	movs	r3, #2
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	2202      	movs	r2, #2
 800089e:	2101      	movs	r1, #1
 80008a0:	4834      	ldr	r0, [pc, #208]	; (8000974 <Pwm_init+0x10c>)
 80008a2:	f7ff feb5 	bl	8000610 <GPIO_pinMode>
	GPIO_pinMode(GPIOB,5,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM3_CH2);//ch2
 80008a6:	2302      	movs	r3, #2
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	2202      	movs	r2, #2
 80008b2:	2105      	movs	r1, #5
 80008b4:	482f      	ldr	r0, [pc, #188]	; (8000974 <Pwm_init+0x10c>)
 80008b6:	f7ff feab 	bl	8000610 <GPIO_pinMode>
	GPIO_pinMode(GPIOC,6,ALTERNATE_FUNCTION,LOW_SPEED,NO_PUPD,TIM3_CH1);//ch1
 80008ba:	2302      	movs	r3, #2
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2300      	movs	r3, #0
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2202      	movs	r2, #2
 80008c6:	2106      	movs	r1, #6
 80008c8:	482b      	ldr	r0, [pc, #172]	; (8000978 <Pwm_init+0x110>)
 80008ca:	f7ff fea1 	bl	8000610 <GPIO_pinMode>

	TIM3->CCMR1 &= ~(TIM_CCMR1_CC1S|TIM_CCMR1_CC2S);//set output compare channel 1 and 2
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <Pwm_init+0x114>)
 80008d0:	699a      	ldr	r2, [r3, #24]
 80008d2:	492a      	ldr	r1, [pc, #168]	; (800097c <Pwm_init+0x114>)
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <Pwm_init+0x118>)
 80008d6:	4013      	ands	r3, r2
 80008d8:	618b      	str	r3, [r1, #24]
	TIM3->CCMR2 &= ~(TIM_CCMR2_CC3S|TIM_CCMR2_CC4S);//set output compare channel 3 and 4
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <Pwm_init+0x114>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	4927      	ldr	r1, [pc, #156]	; (800097c <Pwm_init+0x114>)
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <Pwm_init+0x118>)
 80008e2:	4013      	ands	r3, r2
 80008e4:	61cb      	str	r3, [r1, #28]

	TIM3->CCER &= ~(TIM_CCER_CC1P|TIM_CCER_CC2P|TIM_CCER_CC3P|TIM_CCER_CC4P); // set OC is active high when condition is true
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <Pwm_init+0x114>)
 80008e8:	6a1a      	ldr	r2, [r3, #32]
 80008ea:	4924      	ldr	r1, [pc, #144]	; (800097c <Pwm_init+0x114>)
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <Pwm_init+0x11c>)
 80008ee:	4013      	ands	r3, r2
 80008f0:	620b      	str	r3, [r1, #32]

	TIM3->CCMR1 &= ~((0xF << 4)|(0xF<<12));// PWM Mode for Channel 1, 2
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <Pwm_init+0x114>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4921      	ldr	r1, [pc, #132]	; (800097c <Pwm_init+0x114>)
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <Pwm_init+0x120>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	618b      	str	r3, [r1, #24]
	TIM3->CCMR1 |= ((0x6 << 4)|(0x6<<12));
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Pwm_init+0x114>)
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	491e      	ldr	r1, [pc, #120]	; (800097c <Pwm_init+0x114>)
 8000904:	f246 0360 	movw	r3, #24672	; 0x6060
 8000908:	4313      	orrs	r3, r2
 800090a:	618b      	str	r3, [r1, #24]
	TIM3->CCMR2 &= ~((0xF << 4)|(0xF<<12));// PWM Mode for Channel 3, 4
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <Pwm_init+0x114>)
 800090e:	69da      	ldr	r2, [r3, #28]
 8000910:	491a      	ldr	r1, [pc, #104]	; (800097c <Pwm_init+0x114>)
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <Pwm_init+0x120>)
 8000914:	4013      	ands	r3, r2
 8000916:	61cb      	str	r3, [r1, #28]
	TIM3->CCMR2 |= ((0x6 << 4)|(0x6<<12));
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <Pwm_init+0x114>)
 800091a:	69da      	ldr	r2, [r3, #28]
 800091c:	4917      	ldr	r1, [pc, #92]	; (800097c <Pwm_init+0x114>)
 800091e:	f246 0360 	movw	r3, #24672	; 0x6060
 8000922:	4313      	orrs	r3, r2
 8000924:	61cb      	str	r3, [r1, #28]


	TIM3->PSC = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Pwm_init+0x114>)
 8000928:	2201      	movs	r2, #1
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 65536-1; //ARR 16 bit
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <Pwm_init+0x114>)
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CCMR1 |= (TIM_CCMR1_OC1PE|TIM_CCMR1_OC2PE);//enable OC
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <Pwm_init+0x114>)
 8000936:	699a      	ldr	r2, [r3, #24]
 8000938:	4910      	ldr	r1, [pc, #64]	; (800097c <Pwm_init+0x114>)
 800093a:	f640 0308 	movw	r3, #2056	; 0x808
 800093e:	4313      	orrs	r3, r2
 8000940:	618b      	str	r3, [r1, #24]
	TIM3->CCMR2 |= (TIM_CCMR2_OC3PE|TIM_CCMR2_OC3PE);
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Pwm_init+0x114>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <Pwm_init+0x114>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	61d3      	str	r3, [r2, #28]

	TIM3->CCER |= (TIM_CCER_CC1E|TIM_CCER_CC2E|TIM_CCER_CC3E|TIM_CCER_CC4E); //enable pwm output
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Pwm_init+0x114>)
 8000950:	6a1a      	ldr	r2, [r3, #32]
 8000952:	490a      	ldr	r1, [pc, #40]	; (800097c <Pwm_init+0x114>)
 8000954:	f241 1311 	movw	r3, #4369	; 0x1111
 8000958:	4313      	orrs	r3, r2
 800095a:	620b      	str	r3, [r1, #32]
	TIM3->CR1	|= TIM_CR1_CEN;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <Pwm_init+0x114>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <Pwm_init+0x114>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	58024400 	.word	0x58024400
 8000974:	58020400 	.word	0x58020400
 8000978:	58020800 	.word	0x58020800
 800097c:	40000400 	.word	0x40000400
 8000980:	fffffcfc 	.word	0xfffffcfc
 8000984:	ffffdddd 	.word	0xffffdddd
 8000988:	ffff0f0f 	.word	0xffff0f0f

0800098c <USART3_Init>:
 */

#include "uart.h"

void USART3_Init(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;//enable AHB4 GPIOD
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <USART3_Init+0x80>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <USART3_Init+0x80>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    RCC->APB1LENR |= RCC_APB1LENR_USART3EN;//enable APB1 USART3
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <USART3_Init+0x80>)
 80009a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <USART3_Init+0x80>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
   
    // Configure GPIOD pins for USART3 TX (PD8) and RX (PD9)
    GPIOD->MODER &= ~((3U << (8 * 2)) | (3U << (9 * 2))); // Clear mode for PD8, PD9
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <USART3_Init+0x84>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <USART3_Init+0x84>)
 80009b6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80009ba:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (2U << (8 * 2)) | (2U << (9 * 2));    // Set to alternate function
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <USART3_Init+0x84>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <USART3_Init+0x84>)
 80009c2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80009c6:	6013      	str	r3, [r2, #0]
    GPIOD->AFR[1] |= (7U << ((8 - 8) * 4)) | (7U << ((9 - 8) * 4)); // AF7 for USART3 // AF7 for USART3
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <USART3_Init+0x84>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <USART3_Init+0x84>)
 80009ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80009d2:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure USART3
    USART3->CR1 &= ~USART_CR1_UE;  // Disable USART3 to configure
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <USART3_Init+0x88>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <USART3_Init+0x88>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

    // Set baud rate
    USART3->BRR = 0x364; //set baudrate 100000000/115200
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <USART3_Init+0x88>)
 80009e2:	f44f 7259 	mov.w	r2, #868	; 0x364
 80009e6:	60da      	str	r2, [r3, #12]

    // Enable transmitter and receiver
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <USART3_Init+0x88>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <USART3_Init+0x88>)
 80009ee:	f043 030c 	orr.w	r3, r3, #12
 80009f2:	6013      	str	r3, [r2, #0]

    // Enable USART3
    USART3->CR1 |= USART_CR1_UE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <USART3_Init+0x88>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <USART3_Init+0x88>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020c00 	.word	0x58020c00
 8000a14:	40004800 	.word	0x40004800

08000a18 <USART3_SendChar>:

void USART3_SendChar(char ch)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    while (!(USART3->ISR & (1<<7)));// Wait until TXFNF is set
 8000a22:	bf00      	nop
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <USART3_SendChar+0x2c>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f9      	beq.n	8000a24 <USART3_SendChar+0xc>
    USART3->TDR = ch & (uint8_t)0xFF;
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <USART3_SendChar+0x2c>)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40004800 	.word	0x40004800

08000a48 <USART3_SendString>:

void USART3_SendString(char* str)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    while (*str)
 8000a50:	e006      	b.n	8000a60 <USART3_SendString+0x18>
    {
        USART3_SendChar(*str++);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ffdc 	bl	8000a18 <USART3_SendChar>
    while (*str)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f4      	bne.n	8000a52 <USART3_SendString+0xa>
    }
    while (!(USART3->ISR & (1<<6)));
 8000a68:	bf00      	nop
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <USART3_SendString+0x38>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f9      	beq.n	8000a6a <USART3_SendString+0x22>
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004800 	.word	0x40004800

08000a84 <PIDMOTOR>:
  {1.0f, 0.005f, 2.08f,0.0f, 0.0f,0},// PID for Front Left Motor
  {1.0f, 0.005f, 2.08f,0.0f, 0.0f,0},// PID for Front Right Motor
};


int32_t PIDMOTOR(float setpoint, float rpm, float deltaTime,struct PIDControl *pid) {
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a92:	ed87 1a01 	vstr	s2, [r7, #4]
 8000a96:	6038      	str	r0, [r7, #0]

// Reset integral for direction change
  if ((setpoint > 0 && pid->state == 1) || (setpoint < 0 && pid->state == 0)) {
 8000a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa4:	dd03      	ble.n	8000aae <PIDMOTOR+0x2a>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	7d1b      	ldrb	r3, [r3, #20]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d00a      	beq.n	8000ac4 <PIDMOTOR+0x40>
 8000aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aba:	d517      	bpl.n	8000aec <PIDMOTOR+0x68>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	7d1b      	ldrb	r3, [r3, #20]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d113      	bne.n	8000aec <PIDMOTOR+0x68>
	        pid->integral = 0;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
	        pid->state = setpoint > 0 ? 0 : 1;
 8000acc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ad0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad8:	bfcc      	ite	gt
 8000ada:	2301      	movgt	r3, #1
 8000adc:	2300      	movle	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f083 0301 	eor.w	r3, r3, #1
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	751a      	strb	r2, [r3, #20]
  }


  float error = setpoint - rpm;
 8000aec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000af8:	edc7 7a06 	vstr	s15, [r7, #24]
  pid->integral += (error * deltaTime);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b02:	edd7 6a06 	vldr	s13, [r7, #24]
 8000b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	edc3 7a03 	vstr	s15, [r3, #12]
  // Anti-windup
  if (pid->integral > LIM_MAX_INT) {
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b1e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000c08 <PIDMOTOR+0x184>
 8000b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2a:	dd03      	ble.n	8000b34 <PIDMOTOR+0xb0>
    pid->integral = LIM_MAX_INT;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <PIDMOTOR+0x188>)
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	e00c      	b.n	8000b4e <PIDMOTOR+0xca>
  } else if (pid->integral < LIM_MIN_INT) {
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b3a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000c10 <PIDMOTOR+0x18c>
 8000b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	d502      	bpl.n	8000b4e <PIDMOTOR+0xca>
    pid->integral = LIM_MIN_INT;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <PIDMOTOR+0x190>)
 8000b4c:	60da      	str	r2, [r3, #12]
  }
  errorcheck = pid->integral;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <PIDMOTOR+0x194>)
 8000b54:	6013      	str	r3, [r2, #0]

  float derivative = (error - pid->previousError) / deltaTime;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b6c:	edc7 7a05 	vstr	s15, [r7, #20]

  float u = (pid->kp * error + pid->ki * pid->integral + pid->kd * derivative);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	ed93 7a00 	vldr	s14, [r3]
 8000b76:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	edd3 6a01 	vldr	s13, [r3, #4]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	edc7 7a04 	vstr	s15, [r7, #16]
  pid->previousError = error;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	611a      	str	r2, [r3, #16]

  int32_t pwm = (int32_t)(u * 65535.0f) / MAX_VRPM;
 8000bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000c1c <PIDMOTOR+0x198>
 8000bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbe:	ee17 1a90 	vmov	r1, s15
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <PIDMOTOR+0x19c>)
 8000bc4:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc8:	125a      	asrs	r2, r3, #9
 8000bca:	17cb      	asrs	r3, r1, #31
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	61fb      	str	r3, [r7, #28]
  errorcheck = error;
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <PIDMOTOR+0x194>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	6013      	str	r3, [r2, #0]

  if (pwm > 65535) {
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bdc:	db03      	blt.n	8000be6 <PIDMOTOR+0x162>
    pwm = 65535;
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	e005      	b.n	8000bf2 <PIDMOTOR+0x16e>
  } else if (pwm < -65535) {
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000bec:	dc01      	bgt.n	8000bf2 <PIDMOTOR+0x16e>
    pwm = -65535;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <PIDMOTOR+0x1a0>)
 8000bf0:	61fb      	str	r3, [r7, #28]
  }
  pidspeed = pwm;
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <PIDMOTOR+0x1a4>)
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	6013      	str	r3, [r2, #0]

  return pwm;
 8000bf8:	69fb      	ldr	r3, [r7, #28]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	4a4e05b0 	.word	0x4a4e05b0
 8000c0c:	4a4e05b0 	.word	0x4a4e05b0
 8000c10:	ca4e05b0 	.word	0xca4e05b0
 8000c14:	ca4e05b0 	.word	0xca4e05b0
 8000c18:	2400022c 	.word	0x2400022c
 8000c1c:	477fff00 	.word	0x477fff00
 8000c20:	134679ad 	.word	0x134679ad
 8000c24:	ffff0001 	.word	0xffff0001
 8000c28:	24000230 	.word	0x24000230

08000c2c <ChangetoRPM>:
struct Velocity Count[] = {
  { 0, 0, 0 },
  { 0, 0, 0}
};

float ChangetoRPM(int32_t Pulse, uint8_t i) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
  float Vrpm = (((float)Pulse*1.0f) - Count[i].PrevPulse) * 4.6875f;// 1output/จำนวนcount*60s/ms*1/deltatime(100) = vrpm
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c42:	78fa      	ldrb	r2, [r7, #3]
 8000c44:	4914      	ldr	r1, [pc, #80]	; (8000c98 <ChangetoRPM+0x6c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3304      	adds	r3, #4
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c9c <ChangetoRPM+0x70>
 8000c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c62:	edc7 7a03 	vstr	s15, [r7, #12]
  Count[i].PrevPulse = (float)(Pulse*1.0f);
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	4909      	ldr	r1, [pc, #36]	; (8000c98 <ChangetoRPM+0x6c>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3304      	adds	r3, #4
 8000c80:	edc3 7a00 	vstr	s15, [r3]
  return Vrpm;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	ee07 3a90 	vmov	s15, r3
}
 8000c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	24000234 	.word	0x24000234
 8000c9c:	40960000 	.word	0x40960000

08000ca0 <main>:

int main(){
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	f5ad 3dc3 	sub.w	sp, sp, #99840	; 0x18600
 8000ca6:	b0af      	sub	sp, #188	; 0xbc
 8000ca8:	af02      	add	r7, sp, #8
	Clk_init();
 8000caa:	f7ff fc0d 	bl	80004c8 <Clk_init>
	Systick_init(400000000,1000);
 8000cae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb2:	485b      	ldr	r0, [pc, #364]	; (8000e20 <main+0x180>)
 8000cb4:	f7ff fc7c 	bl	80005b0 <Systick_init>

	 /* FPU settings ------------------------------------------------------------*/
	SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <main+0x184>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a59      	ldr	r2, [pc, #356]	; (8000e24 <main+0x184>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	USART3_Init();
 8000cc8:	f7ff fe60 	bl	800098c <USART3_Init>
	Encoder_init();
 8000ccc:	f7ff fb60 	bl	8000390 <Encoder_init>
	motor_init();
 8000cd0:	f7ff fd82 	bl	80007d8 <motor_init>
	char encoder[99999];
	uint32_t prevtime = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4a54      	ldr	r2, [pc, #336]	; (8000e28 <main+0x188>)
 8000cd8:	443a      	add	r2, r7
 8000cda:	6013      	str	r3, [r2, #0]

	while(1){

		if(millis() - prevtime >= 100){
 8000cdc:	f7ff fc8c 	bl	80005f8 <millis>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <main+0x188>)
 8000ce4:	443b      	add	r3, r7
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b63      	cmp	r3, #99	; 0x63
 8000cec:	d979      	bls.n	8000de2 <main+0x142>
			for(uint8_t i = 0;i<2;i++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <main+0x18c>)
 8000cf2:	443a      	add	r2, r7
 8000cf4:	7013      	strb	r3, [r2, #0]
 8000cf6:	e040      	b.n	8000d7a <main+0xda>
				Count[i].Pulse = GetValueEncoder(i+1);
 8000cf8:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <main+0x18c>)
 8000cfa:	443b      	add	r3, r7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fbc6 	bl	8000494 <GetValueEncoder>
 8000d08:	ee07 0a90 	vmov	s15, r0
 8000d0c:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <main+0x18c>)
 8000d0e:	443b      	add	r3, r7
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d16:	4946      	ldr	r1, [pc, #280]	; (8000e30 <main+0x190>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	edc3 7a00 	vstr	s15, [r3]
				Count[i].Vrpm = ChangetoRPM(Count[i].Pulse,i);
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <main+0x18c>)
 8000d28:	443b      	add	r3, r7
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	4940      	ldr	r1, [pc, #256]	; (8000e30 <main+0x190>)
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	edd3 7a00 	vldr	s15, [r3]
 8000d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d40:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <main+0x18c>)
 8000d42:	443b      	add	r3, r7
 8000d44:	781c      	ldrb	r4, [r3, #0]
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <main+0x18c>)
 8000d48:	443b      	add	r3, r7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	ee17 0a90 	vmov	r0, s15
 8000d52:	f7ff ff6b 	bl	8000c2c <ChangetoRPM>
 8000d56:	eef0 7a40 	vmov.f32	s15, s0
 8000d5a:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <main+0x190>)
 8000d5c:	4623      	mov	r3, r4
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4423      	add	r3, r4
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t i = 0;i<2;i++){
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <main+0x18c>)
 8000d6e:	443b      	add	r3, r7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a2d      	ldr	r2, [pc, #180]	; (8000e2c <main+0x18c>)
 8000d76:	443a      	add	r2, r7
 8000d78:	7013      	strb	r3, [r2, #0]
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <main+0x18c>)
 8000d7c:	443b      	add	r3, r7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d9b9      	bls.n	8000cf8 <main+0x58>
			}
			int32_t speedFL = PIDMOTOR(6800.0f,Count[0].Vrpm,100,&PIDControllers[0]);
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <main+0x190>)
 8000d86:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d8a:	482a      	ldr	r0, [pc, #168]	; (8000e34 <main+0x194>)
 8000d8c:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8000e38 <main+0x198>
 8000d90:	eef0 0a67 	vmov.f32	s1, s15
 8000d94:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000e3c <main+0x19c>
 8000d98:	f7ff fe74 	bl	8000a84 <PIDMOTOR>
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <main+0x1a0>)
 8000d9e:	443b      	add	r3, r7
 8000da0:	6018      	str	r0, [r3, #0]
			int32_t speedFR = PIDMOTOR(5000.0f,Count[1].Vrpm,100,&PIDControllers[1]);
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <main+0x190>)
 8000da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000da8:	4826      	ldr	r0, [pc, #152]	; (8000e44 <main+0x1a4>)
 8000daa:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8000e38 <main+0x198>
 8000dae:	eef0 0a67 	vmov.f32	s1, s15
 8000db2:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8000e48 <main+0x1a8>
 8000db6:	f7ff fe65 	bl	8000a84 <PIDMOTOR>
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <main+0x1ac>)
 8000dbc:	443b      	add	r3, r7
 8000dbe:	6018      	str	r0, [r3, #0]
			rotateMotor(FRONT_LEFT_MOTOR,speedFL);
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <main+0x1a0>)
 8000dc2:	443b      	add	r3, r7
 8000dc4:	6819      	ldr	r1, [r3, #0]
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fd0c 	bl	80007e4 <rotateMotor>
			rotateMotor(FRONT_RIGHT_MOTOR,speedFR);
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <main+0x1ac>)
 8000dce:	443b      	add	r3, r7
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fd06 	bl	80007e4 <rotateMotor>
			prevtime = millis();
 8000dd8:	f7ff fc0e 	bl	80005f8 <millis>
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <main+0x188>)
 8000dde:	443b      	add	r3, r7
 8000de0:	6018      	str	r0, [r3, #0]

		}
			sprintf(encoder,"Vrpm1 : %.4f  Vrpm2 : = %.4f \r\n",Count[0].Vrpm,Count[1].Vrpm);
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <main+0x190>)
 8000de4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000de8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <main+0x190>)
 8000dee:	edd3 7a05 	vldr	s15, [r3, #20]
 8000df2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df6:	4816      	ldr	r0, [pc, #88]	; (8000e50 <main+0x1b0>)
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <main+0x1b4>)
 8000dfa:	4403      	add	r3, r0
 8000dfc:	19d8      	adds	r0, r3, r7
 8000dfe:	ed8d 7b00 	vstr	d7, [sp]
 8000e02:	ec53 2b16 	vmov	r2, r3, d6
 8000e06:	4914      	ldr	r1, [pc, #80]	; (8000e58 <main+0x1b8>)
 8000e08:	f000 fe16 	bl	8001a38 <siprintf>
			USART3_SendString(encoder);
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <main+0x1b0>)
 8000e0e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8000e12:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8000e16:	443b      	add	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe15 	bl	8000a48 <USART3_SendString>
		if(millis() - prevtime >= 100){
 8000e1e:	e75d      	b.n	8000cdc <main+0x3c>
 8000e20:	17d78400 	.word	0x17d78400
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	000186ac 	.word	0x000186ac
 8000e2c:	000186ab 	.word	0x000186ab
 8000e30:	24000234 	.word	0x24000234
 8000e34:	24000010 	.word	0x24000010
 8000e38:	42c80000 	.word	0x42c80000
 8000e3c:	45d48000 	.word	0x45d48000
 8000e40:	000186a4 	.word	0x000186a4
 8000e44:	24000028 	.word	0x24000028
 8000e48:	459c4000 	.word	0x459c4000
 8000e4c:	000186a0 	.word	0x000186a0
 8000e50:	fffe7950 	.word	0xfffe7950
 8000e54:	000186b0 	.word	0x000186b0
 8000e58:	08003c58 	.word	0x08003c58

08000e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_kill>:

int _kill(int pid, int sig)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e76:	f000 fe95 	bl	8001ba4 <__errno>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2216      	movs	r2, #22
 8000e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_exit>:

void _exit (int status)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ffe7 	bl	8000e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e9e:	e7fe      	b.n	8000e9e <_exit+0x12>

08000ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
  }

  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
  }
  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f000 fdfa 	bl	8001ba4 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	24080000 	.word	0x24080000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	2400024c 	.word	0x2400024c
 8000fe4:	240003a0 	.word	0x240003a0

08000fe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	; (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001016:	f000 fdcb 	bl	8001bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101a:	f7ff fe41 	bl	8000ca0 <main>

0800101e <LoopForever>:

LoopForever:
  b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   r0, =_estack
 8001020:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001028:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 800102c:	08003ff4 	.word	0x08003ff4
  ldr r2, =_sbss
 8001030:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 8001034:	2400039c 	.word	0x2400039c

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>

0800103a <__cvt>:
 800103a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103c:	ed2d 8b02 	vpush	{d8}
 8001040:	eeb0 8b40 	vmov.f64	d8, d0
 8001044:	b085      	sub	sp, #20
 8001046:	4617      	mov	r7, r2
 8001048:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800104a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800104c:	ee18 2a90 	vmov	r2, s17
 8001050:	f025 0520 	bic.w	r5, r5, #32
 8001054:	2a00      	cmp	r2, #0
 8001056:	bfb6      	itet	lt
 8001058:	222d      	movlt	r2, #45	; 0x2d
 800105a:	2200      	movge	r2, #0
 800105c:	eeb1 8b40 	vneglt.f64	d8, d0
 8001060:	2d46      	cmp	r5, #70	; 0x46
 8001062:	460c      	mov	r4, r1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	d004      	beq.n	8001072 <__cvt+0x38>
 8001068:	2d45      	cmp	r5, #69	; 0x45
 800106a:	d100      	bne.n	800106e <__cvt+0x34>
 800106c:	3401      	adds	r4, #1
 800106e:	2102      	movs	r1, #2
 8001070:	e000      	b.n	8001074 <__cvt+0x3a>
 8001072:	2103      	movs	r1, #3
 8001074:	ab03      	add	r3, sp, #12
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	ab02      	add	r3, sp, #8
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4622      	mov	r2, r4
 800107e:	4633      	mov	r3, r6
 8001080:	eeb0 0b48 	vmov.f64	d0, d8
 8001084:	f000 fe44 	bl	8001d10 <_dtoa_r>
 8001088:	2d47      	cmp	r5, #71	; 0x47
 800108a:	d101      	bne.n	8001090 <__cvt+0x56>
 800108c:	07fb      	lsls	r3, r7, #31
 800108e:	d51a      	bpl.n	80010c6 <__cvt+0x8c>
 8001090:	2d46      	cmp	r5, #70	; 0x46
 8001092:	eb00 0204 	add.w	r2, r0, r4
 8001096:	d10c      	bne.n	80010b2 <__cvt+0x78>
 8001098:	7803      	ldrb	r3, [r0, #0]
 800109a:	2b30      	cmp	r3, #48	; 0x30
 800109c:	d107      	bne.n	80010ae <__cvt+0x74>
 800109e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	bf1c      	itt	ne
 80010a8:	f1c4 0401 	rsbne	r4, r4, #1
 80010ac:	6034      	strne	r4, [r6, #0]
 80010ae:	6833      	ldr	r3, [r6, #0]
 80010b0:	441a      	add	r2, r3
 80010b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	bf08      	it	eq
 80010bc:	9203      	streq	r2, [sp, #12]
 80010be:	2130      	movs	r1, #48	; 0x30
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d307      	bcc.n	80010d6 <__cvt+0x9c>
 80010c6:	9b03      	ldr	r3, [sp, #12]
 80010c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80010ca:	1a1b      	subs	r3, r3, r0
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	b005      	add	sp, #20
 80010d0:	ecbd 8b02 	vpop	{d8}
 80010d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d6:	1c5c      	adds	r4, r3, #1
 80010d8:	9403      	str	r4, [sp, #12]
 80010da:	7019      	strb	r1, [r3, #0]
 80010dc:	e7f0      	b.n	80010c0 <__cvt+0x86>

080010de <__exponent>:
 80010de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010e0:	4603      	mov	r3, r0
 80010e2:	2900      	cmp	r1, #0
 80010e4:	bfb8      	it	lt
 80010e6:	4249      	neglt	r1, r1
 80010e8:	f803 2b02 	strb.w	r2, [r3], #2
 80010ec:	bfb4      	ite	lt
 80010ee:	222d      	movlt	r2, #45	; 0x2d
 80010f0:	222b      	movge	r2, #43	; 0x2b
 80010f2:	2909      	cmp	r1, #9
 80010f4:	7042      	strb	r2, [r0, #1]
 80010f6:	dd2a      	ble.n	800114e <__exponent+0x70>
 80010f8:	f10d 0207 	add.w	r2, sp, #7
 80010fc:	4617      	mov	r7, r2
 80010fe:	260a      	movs	r6, #10
 8001100:	4694      	mov	ip, r2
 8001102:	fb91 f5f6 	sdiv	r5, r1, r6
 8001106:	fb06 1415 	mls	r4, r6, r5, r1
 800110a:	3430      	adds	r4, #48	; 0x30
 800110c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8001110:	460c      	mov	r4, r1
 8001112:	2c63      	cmp	r4, #99	; 0x63
 8001114:	f102 32ff 	add.w	r2, r2, #4294967295
 8001118:	4629      	mov	r1, r5
 800111a:	dcf1      	bgt.n	8001100 <__exponent+0x22>
 800111c:	3130      	adds	r1, #48	; 0x30
 800111e:	f1ac 0402 	sub.w	r4, ip, #2
 8001122:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001126:	1c41      	adds	r1, r0, #1
 8001128:	4622      	mov	r2, r4
 800112a:	42ba      	cmp	r2, r7
 800112c:	d30a      	bcc.n	8001144 <__exponent+0x66>
 800112e:	f10d 0209 	add.w	r2, sp, #9
 8001132:	eba2 020c 	sub.w	r2, r2, ip
 8001136:	42bc      	cmp	r4, r7
 8001138:	bf88      	it	hi
 800113a:	2200      	movhi	r2, #0
 800113c:	4413      	add	r3, r2
 800113e:	1a18      	subs	r0, r3, r0
 8001140:	b003      	add	sp, #12
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001144:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001148:	f801 5f01 	strb.w	r5, [r1, #1]!
 800114c:	e7ed      	b.n	800112a <__exponent+0x4c>
 800114e:	2330      	movs	r3, #48	; 0x30
 8001150:	3130      	adds	r1, #48	; 0x30
 8001152:	7083      	strb	r3, [r0, #2]
 8001154:	70c1      	strb	r1, [r0, #3]
 8001156:	1d03      	adds	r3, r0, #4
 8001158:	e7f1      	b.n	800113e <__exponent+0x60>
 800115a:	0000      	movs	r0, r0
 800115c:	0000      	movs	r0, r0
	...

08001160 <_printf_float>:
 8001160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001164:	b08b      	sub	sp, #44	; 0x2c
 8001166:	460c      	mov	r4, r1
 8001168:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800116c:	4616      	mov	r6, r2
 800116e:	461f      	mov	r7, r3
 8001170:	4605      	mov	r5, r0
 8001172:	f000 fccd 	bl	8001b10 <_localeconv_r>
 8001176:	f8d0 b000 	ldr.w	fp, [r0]
 800117a:	4658      	mov	r0, fp
 800117c:	f7ff f900 	bl	8000380 <strlen>
 8001180:	2300      	movs	r3, #0
 8001182:	9308      	str	r3, [sp, #32]
 8001184:	f8d8 3000 	ldr.w	r3, [r8]
 8001188:	f894 9018 	ldrb.w	r9, [r4, #24]
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	3307      	adds	r3, #7
 8001190:	f023 0307 	bic.w	r3, r3, #7
 8001194:	f103 0108 	add.w	r1, r3, #8
 8001198:	f8c8 1000 	str.w	r1, [r8]
 800119c:	ed93 0b00 	vldr	d0, [r3]
 80011a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8001400 <_printf_float+0x2a0>
 80011a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80011a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80011b4:	4682      	mov	sl, r0
 80011b6:	dd24      	ble.n	8001202 <_printf_float+0xa2>
 80011b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d502      	bpl.n	80011c8 <_printf_float+0x68>
 80011c2:	232d      	movs	r3, #45	; 0x2d
 80011c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011c8:	498f      	ldr	r1, [pc, #572]	; (8001408 <_printf_float+0x2a8>)
 80011ca:	4b90      	ldr	r3, [pc, #576]	; (800140c <_printf_float+0x2ac>)
 80011cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80011d0:	bf94      	ite	ls
 80011d2:	4688      	movls	r8, r1
 80011d4:	4698      	movhi	r8, r3
 80011d6:	2303      	movs	r3, #3
 80011d8:	6123      	str	r3, [r4, #16]
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	2300      	movs	r3, #0
 80011e0:	6022      	str	r2, [r4, #0]
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	9700      	str	r7, [sp, #0]
 80011e6:	4633      	mov	r3, r6
 80011e8:	aa09      	add	r2, sp, #36	; 0x24
 80011ea:	4621      	mov	r1, r4
 80011ec:	4628      	mov	r0, r5
 80011ee:	f000 f9d1 	bl	8001594 <_printf_common>
 80011f2:	3001      	adds	r0, #1
 80011f4:	f040 808a 	bne.w	800130c <_printf_float+0x1ac>
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	b00b      	add	sp, #44	; 0x2c
 80011fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001202:	eeb4 0b40 	vcmp.f64	d0, d0
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	d709      	bvc.n	8001220 <_printf_float+0xc0>
 800120c:	ee10 3a90 	vmov	r3, s1
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfbc      	itt	lt
 8001214:	232d      	movlt	r3, #45	; 0x2d
 8001216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800121a:	497d      	ldr	r1, [pc, #500]	; (8001410 <_printf_float+0x2b0>)
 800121c:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <_printf_float+0x2b4>)
 800121e:	e7d5      	b.n	80011cc <_printf_float+0x6c>
 8001220:	6863      	ldr	r3, [r4, #4]
 8001222:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8001226:	9104      	str	r1, [sp, #16]
 8001228:	1c59      	adds	r1, r3, #1
 800122a:	d13c      	bne.n	80012a6 <_printf_float+0x146>
 800122c:	2306      	movs	r3, #6
 800122e:	6063      	str	r3, [r4, #4]
 8001230:	2300      	movs	r3, #0
 8001232:	9303      	str	r3, [sp, #12]
 8001234:	ab08      	add	r3, sp, #32
 8001236:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800123a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800123e:	ab07      	add	r3, sp, #28
 8001240:	6861      	ldr	r1, [r4, #4]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	6022      	str	r2, [r4, #0]
 8001246:	f10d 031b 	add.w	r3, sp, #27
 800124a:	4628      	mov	r0, r5
 800124c:	f7ff fef5 	bl	800103a <__cvt>
 8001250:	9b04      	ldr	r3, [sp, #16]
 8001252:	9907      	ldr	r1, [sp, #28]
 8001254:	2b47      	cmp	r3, #71	; 0x47
 8001256:	4680      	mov	r8, r0
 8001258:	d108      	bne.n	800126c <_printf_float+0x10c>
 800125a:	1cc8      	adds	r0, r1, #3
 800125c:	db02      	blt.n	8001264 <_printf_float+0x104>
 800125e:	6863      	ldr	r3, [r4, #4]
 8001260:	4299      	cmp	r1, r3
 8001262:	dd41      	ble.n	80012e8 <_printf_float+0x188>
 8001264:	f1a9 0902 	sub.w	r9, r9, #2
 8001268:	fa5f f989 	uxtb.w	r9, r9
 800126c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001270:	d820      	bhi.n	80012b4 <_printf_float+0x154>
 8001272:	3901      	subs	r1, #1
 8001274:	464a      	mov	r2, r9
 8001276:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800127a:	9107      	str	r1, [sp, #28]
 800127c:	f7ff ff2f 	bl	80010de <__exponent>
 8001280:	9a08      	ldr	r2, [sp, #32]
 8001282:	9004      	str	r0, [sp, #16]
 8001284:	1813      	adds	r3, r2, r0
 8001286:	2a01      	cmp	r2, #1
 8001288:	6123      	str	r3, [r4, #16]
 800128a:	dc02      	bgt.n	8001292 <_printf_float+0x132>
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	07d2      	lsls	r2, r2, #31
 8001290:	d501      	bpl.n	8001296 <_printf_float+0x136>
 8001292:	3301      	adds	r3, #1
 8001294:	6123      	str	r3, [r4, #16]
 8001296:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0a2      	beq.n	80011e4 <_printf_float+0x84>
 800129e:	232d      	movs	r3, #45	; 0x2d
 80012a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012a4:	e79e      	b.n	80011e4 <_printf_float+0x84>
 80012a6:	9904      	ldr	r1, [sp, #16]
 80012a8:	2947      	cmp	r1, #71	; 0x47
 80012aa:	d1c1      	bne.n	8001230 <_printf_float+0xd0>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1bf      	bne.n	8001230 <_printf_float+0xd0>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e7bc      	b.n	800122e <_printf_float+0xce>
 80012b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80012b8:	d118      	bne.n	80012ec <_printf_float+0x18c>
 80012ba:	2900      	cmp	r1, #0
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	dd0b      	ble.n	80012d8 <_printf_float+0x178>
 80012c0:	6121      	str	r1, [r4, #16]
 80012c2:	b913      	cbnz	r3, 80012ca <_printf_float+0x16a>
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	07d0      	lsls	r0, r2, #31
 80012c8:	d502      	bpl.n	80012d0 <_printf_float+0x170>
 80012ca:	3301      	adds	r3, #1
 80012cc:	440b      	add	r3, r1
 80012ce:	6123      	str	r3, [r4, #16]
 80012d0:	2300      	movs	r3, #0
 80012d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	e7de      	b.n	8001296 <_printf_float+0x136>
 80012d8:	b913      	cbnz	r3, 80012e0 <_printf_float+0x180>
 80012da:	6822      	ldr	r2, [r4, #0]
 80012dc:	07d2      	lsls	r2, r2, #31
 80012de:	d501      	bpl.n	80012e4 <_printf_float+0x184>
 80012e0:	3302      	adds	r3, #2
 80012e2:	e7f4      	b.n	80012ce <_printf_float+0x16e>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e7f2      	b.n	80012ce <_printf_float+0x16e>
 80012e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80012ec:	9b08      	ldr	r3, [sp, #32]
 80012ee:	4299      	cmp	r1, r3
 80012f0:	db05      	blt.n	80012fe <_printf_float+0x19e>
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	6121      	str	r1, [r4, #16]
 80012f6:	07d8      	lsls	r0, r3, #31
 80012f8:	d5ea      	bpl.n	80012d0 <_printf_float+0x170>
 80012fa:	1c4b      	adds	r3, r1, #1
 80012fc:	e7e7      	b.n	80012ce <_printf_float+0x16e>
 80012fe:	2900      	cmp	r1, #0
 8001300:	bfd4      	ite	le
 8001302:	f1c1 0202 	rsble	r2, r1, #2
 8001306:	2201      	movgt	r2, #1
 8001308:	4413      	add	r3, r2
 800130a:	e7e0      	b.n	80012ce <_printf_float+0x16e>
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	055a      	lsls	r2, r3, #21
 8001310:	d407      	bmi.n	8001322 <_printf_float+0x1c2>
 8001312:	6923      	ldr	r3, [r4, #16]
 8001314:	4642      	mov	r2, r8
 8001316:	4631      	mov	r1, r6
 8001318:	4628      	mov	r0, r5
 800131a:	47b8      	blx	r7
 800131c:	3001      	adds	r0, #1
 800131e:	d12a      	bne.n	8001376 <_printf_float+0x216>
 8001320:	e76a      	b.n	80011f8 <_printf_float+0x98>
 8001322:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001326:	f240 80e0 	bls.w	80014ea <_printf_float+0x38a>
 800132a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800132e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	d133      	bne.n	80013a0 <_printf_float+0x240>
 8001338:	4a37      	ldr	r2, [pc, #220]	; (8001418 <_printf_float+0x2b8>)
 800133a:	2301      	movs	r3, #1
 800133c:	4631      	mov	r1, r6
 800133e:	4628      	mov	r0, r5
 8001340:	47b8      	blx	r7
 8001342:	3001      	adds	r0, #1
 8001344:	f43f af58 	beq.w	80011f8 <_printf_float+0x98>
 8001348:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800134c:	429a      	cmp	r2, r3
 800134e:	db02      	blt.n	8001356 <_printf_float+0x1f6>
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	07d8      	lsls	r0, r3, #31
 8001354:	d50f      	bpl.n	8001376 <_printf_float+0x216>
 8001356:	4653      	mov	r3, sl
 8001358:	465a      	mov	r2, fp
 800135a:	4631      	mov	r1, r6
 800135c:	4628      	mov	r0, r5
 800135e:	47b8      	blx	r7
 8001360:	3001      	adds	r0, #1
 8001362:	f43f af49 	beq.w	80011f8 <_printf_float+0x98>
 8001366:	f04f 0800 	mov.w	r8, #0
 800136a:	f104 091a 	add.w	r9, r4, #26
 800136e:	9b08      	ldr	r3, [sp, #32]
 8001370:	3b01      	subs	r3, #1
 8001372:	4543      	cmp	r3, r8
 8001374:	dc09      	bgt.n	800138a <_printf_float+0x22a>
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	079b      	lsls	r3, r3, #30
 800137a:	f100 8106 	bmi.w	800158a <_printf_float+0x42a>
 800137e:	68e0      	ldr	r0, [r4, #12]
 8001380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001382:	4298      	cmp	r0, r3
 8001384:	bfb8      	it	lt
 8001386:	4618      	movlt	r0, r3
 8001388:	e738      	b.n	80011fc <_printf_float+0x9c>
 800138a:	2301      	movs	r3, #1
 800138c:	464a      	mov	r2, r9
 800138e:	4631      	mov	r1, r6
 8001390:	4628      	mov	r0, r5
 8001392:	47b8      	blx	r7
 8001394:	3001      	adds	r0, #1
 8001396:	f43f af2f 	beq.w	80011f8 <_printf_float+0x98>
 800139a:	f108 0801 	add.w	r8, r8, #1
 800139e:	e7e6      	b.n	800136e <_printf_float+0x20e>
 80013a0:	9b07      	ldr	r3, [sp, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dc3a      	bgt.n	800141c <_printf_float+0x2bc>
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <_printf_float+0x2b8>)
 80013a8:	2301      	movs	r3, #1
 80013aa:	4631      	mov	r1, r6
 80013ac:	4628      	mov	r0, r5
 80013ae:	47b8      	blx	r7
 80013b0:	3001      	adds	r0, #1
 80013b2:	f43f af21 	beq.w	80011f8 <_printf_float+0x98>
 80013b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	d102      	bne.n	80013c4 <_printf_float+0x264>
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	07d9      	lsls	r1, r3, #31
 80013c2:	d5d8      	bpl.n	8001376 <_printf_float+0x216>
 80013c4:	4653      	mov	r3, sl
 80013c6:	465a      	mov	r2, fp
 80013c8:	4631      	mov	r1, r6
 80013ca:	4628      	mov	r0, r5
 80013cc:	47b8      	blx	r7
 80013ce:	3001      	adds	r0, #1
 80013d0:	f43f af12 	beq.w	80011f8 <_printf_float+0x98>
 80013d4:	f04f 0900 	mov.w	r9, #0
 80013d8:	f104 0a1a 	add.w	sl, r4, #26
 80013dc:	9b07      	ldr	r3, [sp, #28]
 80013de:	425b      	negs	r3, r3
 80013e0:	454b      	cmp	r3, r9
 80013e2:	dc01      	bgt.n	80013e8 <_printf_float+0x288>
 80013e4:	9b08      	ldr	r3, [sp, #32]
 80013e6:	e795      	b.n	8001314 <_printf_float+0x1b4>
 80013e8:	2301      	movs	r3, #1
 80013ea:	4652      	mov	r2, sl
 80013ec:	4631      	mov	r1, r6
 80013ee:	4628      	mov	r0, r5
 80013f0:	47b8      	blx	r7
 80013f2:	3001      	adds	r0, #1
 80013f4:	f43f af00 	beq.w	80011f8 <_printf_float+0x98>
 80013f8:	f109 0901 	add.w	r9, r9, #1
 80013fc:	e7ee      	b.n	80013dc <_printf_float+0x27c>
 80013fe:	bf00      	nop
 8001400:	ffffffff 	.word	0xffffffff
 8001404:	7fefffff 	.word	0x7fefffff
 8001408:	08003c78 	.word	0x08003c78
 800140c:	08003c7c 	.word	0x08003c7c
 8001410:	08003c80 	.word	0x08003c80
 8001414:	08003c84 	.word	0x08003c84
 8001418:	08003c88 	.word	0x08003c88
 800141c:	9a08      	ldr	r2, [sp, #32]
 800141e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001420:	429a      	cmp	r2, r3
 8001422:	bfa8      	it	ge
 8001424:	461a      	movge	r2, r3
 8001426:	2a00      	cmp	r2, #0
 8001428:	4691      	mov	r9, r2
 800142a:	dc38      	bgt.n	800149e <_printf_float+0x33e>
 800142c:	2300      	movs	r3, #0
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001434:	f104 021a 	add.w	r2, r4, #26
 8001438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800143a:	9905      	ldr	r1, [sp, #20]
 800143c:	9304      	str	r3, [sp, #16]
 800143e:	eba3 0309 	sub.w	r3, r3, r9
 8001442:	428b      	cmp	r3, r1
 8001444:	dc33      	bgt.n	80014ae <_printf_float+0x34e>
 8001446:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800144a:	429a      	cmp	r2, r3
 800144c:	db3c      	blt.n	80014c8 <_printf_float+0x368>
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	07da      	lsls	r2, r3, #31
 8001452:	d439      	bmi.n	80014c8 <_printf_float+0x368>
 8001454:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8001458:	eba2 0903 	sub.w	r9, r2, r3
 800145c:	9b04      	ldr	r3, [sp, #16]
 800145e:	1ad2      	subs	r2, r2, r3
 8001460:	4591      	cmp	r9, r2
 8001462:	bfa8      	it	ge
 8001464:	4691      	movge	r9, r2
 8001466:	f1b9 0f00 	cmp.w	r9, #0
 800146a:	dc35      	bgt.n	80014d8 <_printf_float+0x378>
 800146c:	f04f 0800 	mov.w	r8, #0
 8001470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001474:	f104 0a1a 	add.w	sl, r4, #26
 8001478:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	eba3 0309 	sub.w	r3, r3, r9
 8001482:	4543      	cmp	r3, r8
 8001484:	f77f af77 	ble.w	8001376 <_printf_float+0x216>
 8001488:	2301      	movs	r3, #1
 800148a:	4652      	mov	r2, sl
 800148c:	4631      	mov	r1, r6
 800148e:	4628      	mov	r0, r5
 8001490:	47b8      	blx	r7
 8001492:	3001      	adds	r0, #1
 8001494:	f43f aeb0 	beq.w	80011f8 <_printf_float+0x98>
 8001498:	f108 0801 	add.w	r8, r8, #1
 800149c:	e7ec      	b.n	8001478 <_printf_float+0x318>
 800149e:	4613      	mov	r3, r2
 80014a0:	4631      	mov	r1, r6
 80014a2:	4642      	mov	r2, r8
 80014a4:	4628      	mov	r0, r5
 80014a6:	47b8      	blx	r7
 80014a8:	3001      	adds	r0, #1
 80014aa:	d1bf      	bne.n	800142c <_printf_float+0x2cc>
 80014ac:	e6a4      	b.n	80011f8 <_printf_float+0x98>
 80014ae:	2301      	movs	r3, #1
 80014b0:	4631      	mov	r1, r6
 80014b2:	4628      	mov	r0, r5
 80014b4:	9204      	str	r2, [sp, #16]
 80014b6:	47b8      	blx	r7
 80014b8:	3001      	adds	r0, #1
 80014ba:	f43f ae9d 	beq.w	80011f8 <_printf_float+0x98>
 80014be:	9b05      	ldr	r3, [sp, #20]
 80014c0:	9a04      	ldr	r2, [sp, #16]
 80014c2:	3301      	adds	r3, #1
 80014c4:	9305      	str	r3, [sp, #20]
 80014c6:	e7b7      	b.n	8001438 <_printf_float+0x2d8>
 80014c8:	4653      	mov	r3, sl
 80014ca:	465a      	mov	r2, fp
 80014cc:	4631      	mov	r1, r6
 80014ce:	4628      	mov	r0, r5
 80014d0:	47b8      	blx	r7
 80014d2:	3001      	adds	r0, #1
 80014d4:	d1be      	bne.n	8001454 <_printf_float+0x2f4>
 80014d6:	e68f      	b.n	80011f8 <_printf_float+0x98>
 80014d8:	9a04      	ldr	r2, [sp, #16]
 80014da:	464b      	mov	r3, r9
 80014dc:	4442      	add	r2, r8
 80014de:	4631      	mov	r1, r6
 80014e0:	4628      	mov	r0, r5
 80014e2:	47b8      	blx	r7
 80014e4:	3001      	adds	r0, #1
 80014e6:	d1c1      	bne.n	800146c <_printf_float+0x30c>
 80014e8:	e686      	b.n	80011f8 <_printf_float+0x98>
 80014ea:	9a08      	ldr	r2, [sp, #32]
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	dc01      	bgt.n	80014f4 <_printf_float+0x394>
 80014f0:	07db      	lsls	r3, r3, #31
 80014f2:	d537      	bpl.n	8001564 <_printf_float+0x404>
 80014f4:	2301      	movs	r3, #1
 80014f6:	4642      	mov	r2, r8
 80014f8:	4631      	mov	r1, r6
 80014fa:	4628      	mov	r0, r5
 80014fc:	47b8      	blx	r7
 80014fe:	3001      	adds	r0, #1
 8001500:	f43f ae7a 	beq.w	80011f8 <_printf_float+0x98>
 8001504:	4653      	mov	r3, sl
 8001506:	465a      	mov	r2, fp
 8001508:	4631      	mov	r1, r6
 800150a:	4628      	mov	r0, r5
 800150c:	47b8      	blx	r7
 800150e:	3001      	adds	r0, #1
 8001510:	f43f ae72 	beq.w	80011f8 <_printf_float+0x98>
 8001514:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8001518:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	9b08      	ldr	r3, [sp, #32]
 8001522:	d01a      	beq.n	800155a <_printf_float+0x3fa>
 8001524:	3b01      	subs	r3, #1
 8001526:	f108 0201 	add.w	r2, r8, #1
 800152a:	4631      	mov	r1, r6
 800152c:	4628      	mov	r0, r5
 800152e:	47b8      	blx	r7
 8001530:	3001      	adds	r0, #1
 8001532:	d10e      	bne.n	8001552 <_printf_float+0x3f2>
 8001534:	e660      	b.n	80011f8 <_printf_float+0x98>
 8001536:	2301      	movs	r3, #1
 8001538:	464a      	mov	r2, r9
 800153a:	4631      	mov	r1, r6
 800153c:	4628      	mov	r0, r5
 800153e:	47b8      	blx	r7
 8001540:	3001      	adds	r0, #1
 8001542:	f43f ae59 	beq.w	80011f8 <_printf_float+0x98>
 8001546:	f108 0801 	add.w	r8, r8, #1
 800154a:	9b08      	ldr	r3, [sp, #32]
 800154c:	3b01      	subs	r3, #1
 800154e:	4543      	cmp	r3, r8
 8001550:	dcf1      	bgt.n	8001536 <_printf_float+0x3d6>
 8001552:	9b04      	ldr	r3, [sp, #16]
 8001554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001558:	e6dd      	b.n	8001316 <_printf_float+0x1b6>
 800155a:	f04f 0800 	mov.w	r8, #0
 800155e:	f104 091a 	add.w	r9, r4, #26
 8001562:	e7f2      	b.n	800154a <_printf_float+0x3ea>
 8001564:	2301      	movs	r3, #1
 8001566:	4642      	mov	r2, r8
 8001568:	e7df      	b.n	800152a <_printf_float+0x3ca>
 800156a:	2301      	movs	r3, #1
 800156c:	464a      	mov	r2, r9
 800156e:	4631      	mov	r1, r6
 8001570:	4628      	mov	r0, r5
 8001572:	47b8      	blx	r7
 8001574:	3001      	adds	r0, #1
 8001576:	f43f ae3f 	beq.w	80011f8 <_printf_float+0x98>
 800157a:	f108 0801 	add.w	r8, r8, #1
 800157e:	68e3      	ldr	r3, [r4, #12]
 8001580:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	4543      	cmp	r3, r8
 8001586:	dcf0      	bgt.n	800156a <_printf_float+0x40a>
 8001588:	e6f9      	b.n	800137e <_printf_float+0x21e>
 800158a:	f04f 0800 	mov.w	r8, #0
 800158e:	f104 0919 	add.w	r9, r4, #25
 8001592:	e7f4      	b.n	800157e <_printf_float+0x41e>

08001594 <_printf_common>:
 8001594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001598:	4616      	mov	r6, r2
 800159a:	4699      	mov	r9, r3
 800159c:	688a      	ldr	r2, [r1, #8]
 800159e:	690b      	ldr	r3, [r1, #16]
 80015a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015a4:	4293      	cmp	r3, r2
 80015a6:	bfb8      	it	lt
 80015a8:	4613      	movlt	r3, r2
 80015aa:	6033      	str	r3, [r6, #0]
 80015ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015b0:	4607      	mov	r7, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	b10a      	cbz	r2, 80015ba <_printf_common+0x26>
 80015b6:	3301      	adds	r3, #1
 80015b8:	6033      	str	r3, [r6, #0]
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	0699      	lsls	r1, r3, #26
 80015be:	bf42      	ittt	mi
 80015c0:	6833      	ldrmi	r3, [r6, #0]
 80015c2:	3302      	addmi	r3, #2
 80015c4:	6033      	strmi	r3, [r6, #0]
 80015c6:	6825      	ldr	r5, [r4, #0]
 80015c8:	f015 0506 	ands.w	r5, r5, #6
 80015cc:	d106      	bne.n	80015dc <_printf_common+0x48>
 80015ce:	f104 0a19 	add.w	sl, r4, #25
 80015d2:	68e3      	ldr	r3, [r4, #12]
 80015d4:	6832      	ldr	r2, [r6, #0]
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	42ab      	cmp	r3, r5
 80015da:	dc26      	bgt.n	800162a <_printf_common+0x96>
 80015dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015e0:	1e13      	subs	r3, r2, #0
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	bf18      	it	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	0692      	lsls	r2, r2, #26
 80015ea:	d42b      	bmi.n	8001644 <_printf_common+0xb0>
 80015ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015f0:	4649      	mov	r1, r9
 80015f2:	4638      	mov	r0, r7
 80015f4:	47c0      	blx	r8
 80015f6:	3001      	adds	r0, #1
 80015f8:	d01e      	beq.n	8001638 <_printf_common+0xa4>
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	6922      	ldr	r2, [r4, #16]
 80015fe:	f003 0306 	and.w	r3, r3, #6
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf02      	ittt	eq
 8001606:	68e5      	ldreq	r5, [r4, #12]
 8001608:	6833      	ldreq	r3, [r6, #0]
 800160a:	1aed      	subeq	r5, r5, r3
 800160c:	68a3      	ldr	r3, [r4, #8]
 800160e:	bf0c      	ite	eq
 8001610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001614:	2500      	movne	r5, #0
 8001616:	4293      	cmp	r3, r2
 8001618:	bfc4      	itt	gt
 800161a:	1a9b      	subgt	r3, r3, r2
 800161c:	18ed      	addgt	r5, r5, r3
 800161e:	2600      	movs	r6, #0
 8001620:	341a      	adds	r4, #26
 8001622:	42b5      	cmp	r5, r6
 8001624:	d11a      	bne.n	800165c <_printf_common+0xc8>
 8001626:	2000      	movs	r0, #0
 8001628:	e008      	b.n	800163c <_printf_common+0xa8>
 800162a:	2301      	movs	r3, #1
 800162c:	4652      	mov	r2, sl
 800162e:	4649      	mov	r1, r9
 8001630:	4638      	mov	r0, r7
 8001632:	47c0      	blx	r8
 8001634:	3001      	adds	r0, #1
 8001636:	d103      	bne.n	8001640 <_printf_common+0xac>
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001640:	3501      	adds	r5, #1
 8001642:	e7c6      	b.n	80015d2 <_printf_common+0x3e>
 8001644:	18e1      	adds	r1, r4, r3
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	2030      	movs	r0, #48	; 0x30
 800164a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800164e:	4422      	add	r2, r4
 8001650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001658:	3302      	adds	r3, #2
 800165a:	e7c7      	b.n	80015ec <_printf_common+0x58>
 800165c:	2301      	movs	r3, #1
 800165e:	4622      	mov	r2, r4
 8001660:	4649      	mov	r1, r9
 8001662:	4638      	mov	r0, r7
 8001664:	47c0      	blx	r8
 8001666:	3001      	adds	r0, #1
 8001668:	d0e6      	beq.n	8001638 <_printf_common+0xa4>
 800166a:	3601      	adds	r6, #1
 800166c:	e7d9      	b.n	8001622 <_printf_common+0x8e>
	...

08001670 <_printf_i>:
 8001670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001674:	7e0f      	ldrb	r7, [r1, #24]
 8001676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001678:	2f78      	cmp	r7, #120	; 0x78
 800167a:	4691      	mov	r9, r2
 800167c:	4680      	mov	r8, r0
 800167e:	460c      	mov	r4, r1
 8001680:	469a      	mov	sl, r3
 8001682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001686:	d807      	bhi.n	8001698 <_printf_i+0x28>
 8001688:	2f62      	cmp	r7, #98	; 0x62
 800168a:	d80a      	bhi.n	80016a2 <_printf_i+0x32>
 800168c:	2f00      	cmp	r7, #0
 800168e:	f000 80d4 	beq.w	800183a <_printf_i+0x1ca>
 8001692:	2f58      	cmp	r7, #88	; 0x58
 8001694:	f000 80c0 	beq.w	8001818 <_printf_i+0x1a8>
 8001698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800169c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016a0:	e03a      	b.n	8001718 <_printf_i+0xa8>
 80016a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016a6:	2b15      	cmp	r3, #21
 80016a8:	d8f6      	bhi.n	8001698 <_printf_i+0x28>
 80016aa:	a101      	add	r1, pc, #4	; (adr r1, 80016b0 <_printf_i+0x40>)
 80016ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016b0:	08001709 	.word	0x08001709
 80016b4:	0800171d 	.word	0x0800171d
 80016b8:	08001699 	.word	0x08001699
 80016bc:	08001699 	.word	0x08001699
 80016c0:	08001699 	.word	0x08001699
 80016c4:	08001699 	.word	0x08001699
 80016c8:	0800171d 	.word	0x0800171d
 80016cc:	08001699 	.word	0x08001699
 80016d0:	08001699 	.word	0x08001699
 80016d4:	08001699 	.word	0x08001699
 80016d8:	08001699 	.word	0x08001699
 80016dc:	08001821 	.word	0x08001821
 80016e0:	08001749 	.word	0x08001749
 80016e4:	080017db 	.word	0x080017db
 80016e8:	08001699 	.word	0x08001699
 80016ec:	08001699 	.word	0x08001699
 80016f0:	08001843 	.word	0x08001843
 80016f4:	08001699 	.word	0x08001699
 80016f8:	08001749 	.word	0x08001749
 80016fc:	08001699 	.word	0x08001699
 8001700:	08001699 	.word	0x08001699
 8001704:	080017e3 	.word	0x080017e3
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	1d1a      	adds	r2, r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	602a      	str	r2, [r5, #0]
 8001710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001718:	2301      	movs	r3, #1
 800171a:	e09f      	b.n	800185c <_printf_i+0x1ec>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	0607      	lsls	r7, r0, #24
 8001722:	f103 0104 	add.w	r1, r3, #4
 8001726:	6029      	str	r1, [r5, #0]
 8001728:	d501      	bpl.n	800172e <_printf_i+0xbe>
 800172a:	681e      	ldr	r6, [r3, #0]
 800172c:	e003      	b.n	8001736 <_printf_i+0xc6>
 800172e:	0646      	lsls	r6, r0, #25
 8001730:	d5fb      	bpl.n	800172a <_printf_i+0xba>
 8001732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001736:	2e00      	cmp	r6, #0
 8001738:	da03      	bge.n	8001742 <_printf_i+0xd2>
 800173a:	232d      	movs	r3, #45	; 0x2d
 800173c:	4276      	negs	r6, r6
 800173e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001742:	485a      	ldr	r0, [pc, #360]	; (80018ac <_printf_i+0x23c>)
 8001744:	230a      	movs	r3, #10
 8001746:	e012      	b.n	800176e <_printf_i+0xfe>
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	6820      	ldr	r0, [r4, #0]
 800174c:	1d19      	adds	r1, r3, #4
 800174e:	6029      	str	r1, [r5, #0]
 8001750:	0605      	lsls	r5, r0, #24
 8001752:	d501      	bpl.n	8001758 <_printf_i+0xe8>
 8001754:	681e      	ldr	r6, [r3, #0]
 8001756:	e002      	b.n	800175e <_printf_i+0xee>
 8001758:	0641      	lsls	r1, r0, #25
 800175a:	d5fb      	bpl.n	8001754 <_printf_i+0xe4>
 800175c:	881e      	ldrh	r6, [r3, #0]
 800175e:	4853      	ldr	r0, [pc, #332]	; (80018ac <_printf_i+0x23c>)
 8001760:	2f6f      	cmp	r7, #111	; 0x6f
 8001762:	bf0c      	ite	eq
 8001764:	2308      	moveq	r3, #8
 8001766:	230a      	movne	r3, #10
 8001768:	2100      	movs	r1, #0
 800176a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800176e:	6865      	ldr	r5, [r4, #4]
 8001770:	60a5      	str	r5, [r4, #8]
 8001772:	2d00      	cmp	r5, #0
 8001774:	bfa2      	ittt	ge
 8001776:	6821      	ldrge	r1, [r4, #0]
 8001778:	f021 0104 	bicge.w	r1, r1, #4
 800177c:	6021      	strge	r1, [r4, #0]
 800177e:	b90e      	cbnz	r6, 8001784 <_printf_i+0x114>
 8001780:	2d00      	cmp	r5, #0
 8001782:	d04b      	beq.n	800181c <_printf_i+0x1ac>
 8001784:	4615      	mov	r5, r2
 8001786:	fbb6 f1f3 	udiv	r1, r6, r3
 800178a:	fb03 6711 	mls	r7, r3, r1, r6
 800178e:	5dc7      	ldrb	r7, [r0, r7]
 8001790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001794:	4637      	mov	r7, r6
 8001796:	42bb      	cmp	r3, r7
 8001798:	460e      	mov	r6, r1
 800179a:	d9f4      	bls.n	8001786 <_printf_i+0x116>
 800179c:	2b08      	cmp	r3, #8
 800179e:	d10b      	bne.n	80017b8 <_printf_i+0x148>
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	07de      	lsls	r6, r3, #31
 80017a4:	d508      	bpl.n	80017b8 <_printf_i+0x148>
 80017a6:	6923      	ldr	r3, [r4, #16]
 80017a8:	6861      	ldr	r1, [r4, #4]
 80017aa:	4299      	cmp	r1, r3
 80017ac:	bfde      	ittt	le
 80017ae:	2330      	movle	r3, #48	; 0x30
 80017b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017b8:	1b52      	subs	r2, r2, r5
 80017ba:	6122      	str	r2, [r4, #16]
 80017bc:	f8cd a000 	str.w	sl, [sp]
 80017c0:	464b      	mov	r3, r9
 80017c2:	aa03      	add	r2, sp, #12
 80017c4:	4621      	mov	r1, r4
 80017c6:	4640      	mov	r0, r8
 80017c8:	f7ff fee4 	bl	8001594 <_printf_common>
 80017cc:	3001      	adds	r0, #1
 80017ce:	d14a      	bne.n	8001866 <_printf_i+0x1f6>
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	b004      	add	sp, #16
 80017d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f043 0320 	orr.w	r3, r3, #32
 80017e0:	6023      	str	r3, [r4, #0]
 80017e2:	4833      	ldr	r0, [pc, #204]	; (80018b0 <_printf_i+0x240>)
 80017e4:	2778      	movs	r7, #120	; 0x78
 80017e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	6829      	ldr	r1, [r5, #0]
 80017ee:	061f      	lsls	r7, r3, #24
 80017f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80017f4:	d402      	bmi.n	80017fc <_printf_i+0x18c>
 80017f6:	065f      	lsls	r7, r3, #25
 80017f8:	bf48      	it	mi
 80017fa:	b2b6      	uxthmi	r6, r6
 80017fc:	07df      	lsls	r7, r3, #31
 80017fe:	bf48      	it	mi
 8001800:	f043 0320 	orrmi.w	r3, r3, #32
 8001804:	6029      	str	r1, [r5, #0]
 8001806:	bf48      	it	mi
 8001808:	6023      	strmi	r3, [r4, #0]
 800180a:	b91e      	cbnz	r6, 8001814 <_printf_i+0x1a4>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	f023 0320 	bic.w	r3, r3, #32
 8001812:	6023      	str	r3, [r4, #0]
 8001814:	2310      	movs	r3, #16
 8001816:	e7a7      	b.n	8001768 <_printf_i+0xf8>
 8001818:	4824      	ldr	r0, [pc, #144]	; (80018ac <_printf_i+0x23c>)
 800181a:	e7e4      	b.n	80017e6 <_printf_i+0x176>
 800181c:	4615      	mov	r5, r2
 800181e:	e7bd      	b.n	800179c <_printf_i+0x12c>
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	6826      	ldr	r6, [r4, #0]
 8001824:	6961      	ldr	r1, [r4, #20]
 8001826:	1d18      	adds	r0, r3, #4
 8001828:	6028      	str	r0, [r5, #0]
 800182a:	0635      	lsls	r5, r6, #24
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	d501      	bpl.n	8001834 <_printf_i+0x1c4>
 8001830:	6019      	str	r1, [r3, #0]
 8001832:	e002      	b.n	800183a <_printf_i+0x1ca>
 8001834:	0670      	lsls	r0, r6, #25
 8001836:	d5fb      	bpl.n	8001830 <_printf_i+0x1c0>
 8001838:	8019      	strh	r1, [r3, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	6123      	str	r3, [r4, #16]
 800183e:	4615      	mov	r5, r2
 8001840:	e7bc      	b.n	80017bc <_printf_i+0x14c>
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	1d1a      	adds	r2, r3, #4
 8001846:	602a      	str	r2, [r5, #0]
 8001848:	681d      	ldr	r5, [r3, #0]
 800184a:	6862      	ldr	r2, [r4, #4]
 800184c:	2100      	movs	r1, #0
 800184e:	4628      	mov	r0, r5
 8001850:	f7fe fd46 	bl	80002e0 <memchr>
 8001854:	b108      	cbz	r0, 800185a <_printf_i+0x1ea>
 8001856:	1b40      	subs	r0, r0, r5
 8001858:	6060      	str	r0, [r4, #4]
 800185a:	6863      	ldr	r3, [r4, #4]
 800185c:	6123      	str	r3, [r4, #16]
 800185e:	2300      	movs	r3, #0
 8001860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001864:	e7aa      	b.n	80017bc <_printf_i+0x14c>
 8001866:	6923      	ldr	r3, [r4, #16]
 8001868:	462a      	mov	r2, r5
 800186a:	4649      	mov	r1, r9
 800186c:	4640      	mov	r0, r8
 800186e:	47d0      	blx	sl
 8001870:	3001      	adds	r0, #1
 8001872:	d0ad      	beq.n	80017d0 <_printf_i+0x160>
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	079b      	lsls	r3, r3, #30
 8001878:	d413      	bmi.n	80018a2 <_printf_i+0x232>
 800187a:	68e0      	ldr	r0, [r4, #12]
 800187c:	9b03      	ldr	r3, [sp, #12]
 800187e:	4298      	cmp	r0, r3
 8001880:	bfb8      	it	lt
 8001882:	4618      	movlt	r0, r3
 8001884:	e7a6      	b.n	80017d4 <_printf_i+0x164>
 8001886:	2301      	movs	r3, #1
 8001888:	4632      	mov	r2, r6
 800188a:	4649      	mov	r1, r9
 800188c:	4640      	mov	r0, r8
 800188e:	47d0      	blx	sl
 8001890:	3001      	adds	r0, #1
 8001892:	d09d      	beq.n	80017d0 <_printf_i+0x160>
 8001894:	3501      	adds	r5, #1
 8001896:	68e3      	ldr	r3, [r4, #12]
 8001898:	9903      	ldr	r1, [sp, #12]
 800189a:	1a5b      	subs	r3, r3, r1
 800189c:	42ab      	cmp	r3, r5
 800189e:	dcf2      	bgt.n	8001886 <_printf_i+0x216>
 80018a0:	e7eb      	b.n	800187a <_printf_i+0x20a>
 80018a2:	2500      	movs	r5, #0
 80018a4:	f104 0619 	add.w	r6, r4, #25
 80018a8:	e7f5      	b.n	8001896 <_printf_i+0x226>
 80018aa:	bf00      	nop
 80018ac:	08003c8a 	.word	0x08003c8a
 80018b0:	08003c9b 	.word	0x08003c9b

080018b4 <std>:
 80018b4:	2300      	movs	r3, #0
 80018b6:	b510      	push	{r4, lr}
 80018b8:	4604      	mov	r4, r0
 80018ba:	e9c0 3300 	strd	r3, r3, [r0]
 80018be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018c2:	6083      	str	r3, [r0, #8]
 80018c4:	8181      	strh	r1, [r0, #12]
 80018c6:	6643      	str	r3, [r0, #100]	; 0x64
 80018c8:	81c2      	strh	r2, [r0, #14]
 80018ca:	6183      	str	r3, [r0, #24]
 80018cc:	4619      	mov	r1, r3
 80018ce:	2208      	movs	r2, #8
 80018d0:	305c      	adds	r0, #92	; 0x5c
 80018d2:	f000 f914 	bl	8001afe <memset>
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <std+0x58>)
 80018d8:	6263      	str	r3, [r4, #36]	; 0x24
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <std+0x5c>)
 80018dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <std+0x60>)
 80018e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <std+0x64>)
 80018e4:	6323      	str	r3, [r4, #48]	; 0x30
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <std+0x68>)
 80018e8:	6224      	str	r4, [r4, #32]
 80018ea:	429c      	cmp	r4, r3
 80018ec:	d006      	beq.n	80018fc <std+0x48>
 80018ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80018f2:	4294      	cmp	r4, r2
 80018f4:	d002      	beq.n	80018fc <std+0x48>
 80018f6:	33d0      	adds	r3, #208	; 0xd0
 80018f8:	429c      	cmp	r4, r3
 80018fa:	d105      	bne.n	8001908 <std+0x54>
 80018fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001904:	f000 b978 	b.w	8001bf8 <__retarget_lock_init_recursive>
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	08001a79 	.word	0x08001a79
 8001910:	08001a9b 	.word	0x08001a9b
 8001914:	08001ad3 	.word	0x08001ad3
 8001918:	08001af7 	.word	0x08001af7
 800191c:	24000250 	.word	0x24000250

08001920 <stdio_exit_handler>:
 8001920:	4a02      	ldr	r2, [pc, #8]	; (800192c <stdio_exit_handler+0xc>)
 8001922:	4903      	ldr	r1, [pc, #12]	; (8001930 <stdio_exit_handler+0x10>)
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <stdio_exit_handler+0x14>)
 8001926:	f000 b869 	b.w	80019fc <_fwalk_sglue>
 800192a:	bf00      	nop
 800192c:	24000040 	.word	0x24000040
 8001930:	0800349d 	.word	0x0800349d
 8001934:	2400004c 	.word	0x2400004c

08001938 <cleanup_stdio>:
 8001938:	6841      	ldr	r1, [r0, #4]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <cleanup_stdio+0x34>)
 800193c:	4299      	cmp	r1, r3
 800193e:	b510      	push	{r4, lr}
 8001940:	4604      	mov	r4, r0
 8001942:	d001      	beq.n	8001948 <cleanup_stdio+0x10>
 8001944:	f001 fdaa 	bl	800349c <_fflush_r>
 8001948:	68a1      	ldr	r1, [r4, #8]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <cleanup_stdio+0x38>)
 800194c:	4299      	cmp	r1, r3
 800194e:	d002      	beq.n	8001956 <cleanup_stdio+0x1e>
 8001950:	4620      	mov	r0, r4
 8001952:	f001 fda3 	bl	800349c <_fflush_r>
 8001956:	68e1      	ldr	r1, [r4, #12]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <cleanup_stdio+0x3c>)
 800195a:	4299      	cmp	r1, r3
 800195c:	d004      	beq.n	8001968 <cleanup_stdio+0x30>
 800195e:	4620      	mov	r0, r4
 8001960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001964:	f001 bd9a 	b.w	800349c <_fflush_r>
 8001968:	bd10      	pop	{r4, pc}
 800196a:	bf00      	nop
 800196c:	24000250 	.word	0x24000250
 8001970:	240002b8 	.word	0x240002b8
 8001974:	24000320 	.word	0x24000320

08001978 <global_stdio_init.part.0>:
 8001978:	b510      	push	{r4, lr}
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <global_stdio_init.part.0+0x30>)
 800197c:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <global_stdio_init.part.0+0x34>)
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <global_stdio_init.part.0+0x38>)
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	4620      	mov	r0, r4
 8001984:	2200      	movs	r2, #0
 8001986:	2104      	movs	r1, #4
 8001988:	f7ff ff94 	bl	80018b4 <std>
 800198c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001990:	2201      	movs	r2, #1
 8001992:	2109      	movs	r1, #9
 8001994:	f7ff ff8e 	bl	80018b4 <std>
 8001998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800199c:	2202      	movs	r2, #2
 800199e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019a2:	2112      	movs	r1, #18
 80019a4:	f7ff bf86 	b.w	80018b4 <std>
 80019a8:	24000388 	.word	0x24000388
 80019ac:	24000250 	.word	0x24000250
 80019b0:	08001921 	.word	0x08001921

080019b4 <__sfp_lock_acquire>:
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <__sfp_lock_acquire+0x8>)
 80019b6:	f000 b920 	b.w	8001bfa <__retarget_lock_acquire_recursive>
 80019ba:	bf00      	nop
 80019bc:	24000391 	.word	0x24000391

080019c0 <__sfp_lock_release>:
 80019c0:	4801      	ldr	r0, [pc, #4]	; (80019c8 <__sfp_lock_release+0x8>)
 80019c2:	f000 b91b 	b.w	8001bfc <__retarget_lock_release_recursive>
 80019c6:	bf00      	nop
 80019c8:	24000391 	.word	0x24000391

080019cc <__sinit>:
 80019cc:	b510      	push	{r4, lr}
 80019ce:	4604      	mov	r4, r0
 80019d0:	f7ff fff0 	bl	80019b4 <__sfp_lock_acquire>
 80019d4:	6a23      	ldr	r3, [r4, #32]
 80019d6:	b11b      	cbz	r3, 80019e0 <__sinit+0x14>
 80019d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019dc:	f7ff bff0 	b.w	80019c0 <__sfp_lock_release>
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__sinit+0x28>)
 80019e2:	6223      	str	r3, [r4, #32]
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__sinit+0x2c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f5      	bne.n	80019d8 <__sinit+0xc>
 80019ec:	f7ff ffc4 	bl	8001978 <global_stdio_init.part.0>
 80019f0:	e7f2      	b.n	80019d8 <__sinit+0xc>
 80019f2:	bf00      	nop
 80019f4:	08001939 	.word	0x08001939
 80019f8:	24000388 	.word	0x24000388

080019fc <_fwalk_sglue>:
 80019fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a00:	4607      	mov	r7, r0
 8001a02:	4688      	mov	r8, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	2600      	movs	r6, #0
 8001a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8001a10:	d505      	bpl.n	8001a1e <_fwalk_sglue+0x22>
 8001a12:	6824      	ldr	r4, [r4, #0]
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d1f7      	bne.n	8001a08 <_fwalk_sglue+0xc>
 8001a18:	4630      	mov	r0, r6
 8001a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a1e:	89ab      	ldrh	r3, [r5, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d907      	bls.n	8001a34 <_fwalk_sglue+0x38>
 8001a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	d003      	beq.n	8001a34 <_fwalk_sglue+0x38>
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4638      	mov	r0, r7
 8001a30:	47c0      	blx	r8
 8001a32:	4306      	orrs	r6, r0
 8001a34:	3568      	adds	r5, #104	; 0x68
 8001a36:	e7e9      	b.n	8001a0c <_fwalk_sglue+0x10>

08001a38 <siprintf>:
 8001a38:	b40e      	push	{r1, r2, r3}
 8001a3a:	b500      	push	{lr}
 8001a3c:	b09c      	sub	sp, #112	; 0x70
 8001a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8001a40:	9002      	str	r0, [sp, #8]
 8001a42:	9006      	str	r0, [sp, #24]
 8001a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <siprintf+0x38>)
 8001a4a:	9107      	str	r1, [sp, #28]
 8001a4c:	9104      	str	r1, [sp, #16]
 8001a4e:	4909      	ldr	r1, [pc, #36]	; (8001a74 <siprintf+0x3c>)
 8001a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a54:	9105      	str	r1, [sp, #20]
 8001a56:	6800      	ldr	r0, [r0, #0]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	a902      	add	r1, sp, #8
 8001a5c:	f001 fb9a 	bl	8003194 <_svfiprintf_r>
 8001a60:	9b02      	ldr	r3, [sp, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	b01c      	add	sp, #112	; 0x70
 8001a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a6c:	b003      	add	sp, #12
 8001a6e:	4770      	bx	lr
 8001a70:	24000098 	.word	0x24000098
 8001a74:	ffff0208 	.word	0xffff0208

08001a78 <__sread>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a80:	f000 f86c 	bl	8001b5c <_read_r>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	bfab      	itete	ge
 8001a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a8c:	181b      	addge	r3, r3, r0
 8001a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a92:	bfac      	ite	ge
 8001a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a96:	81a3      	strhlt	r3, [r4, #12]
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <__swrite>:
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	461f      	mov	r7, r3
 8001aa0:	898b      	ldrh	r3, [r1, #12]
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4616      	mov	r6, r2
 8001aaa:	d505      	bpl.n	8001ab8 <__swrite+0x1e>
 8001aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f000 f840 	bl	8001b38 <_lseek_r>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac2:	81a3      	strh	r3, [r4, #12]
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4628      	mov	r0, r5
 8001aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ace:	f000 b857 	b.w	8001b80 <_write_r>

08001ad2 <__sseek>:
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ada:	f000 f82d 	bl	8001b38 <_lseek_r>
 8001ade:	1c43      	adds	r3, r0, #1
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	bf15      	itete	ne
 8001ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aee:	81a3      	strheq	r3, [r4, #12]
 8001af0:	bf18      	it	ne
 8001af2:	81a3      	strhne	r3, [r4, #12]
 8001af4:	bd10      	pop	{r4, pc}

08001af6 <__sclose>:
 8001af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afa:	f000 b80d 	b.w	8001b18 <_close_r>

08001afe <memset>:
 8001afe:	4402      	add	r2, r0
 8001b00:	4603      	mov	r3, r0
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d100      	bne.n	8001b08 <memset+0xa>
 8001b06:	4770      	bx	lr
 8001b08:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0c:	e7f9      	b.n	8001b02 <memset+0x4>
	...

08001b10 <_localeconv_r>:
 8001b10:	4800      	ldr	r0, [pc, #0]	; (8001b14 <_localeconv_r+0x4>)
 8001b12:	4770      	bx	lr
 8001b14:	2400018c 	.word	0x2400018c

08001b18 <_close_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4d06      	ldr	r5, [pc, #24]	; (8001b34 <_close_r+0x1c>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	602b      	str	r3, [r5, #0]
 8001b24:	f7ff f9f5 	bl	8000f12 <_close>
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	d102      	bne.n	8001b32 <_close_r+0x1a>
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	b103      	cbz	r3, 8001b32 <_close_r+0x1a>
 8001b30:	6023      	str	r3, [r4, #0]
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
 8001b34:	2400038c 	.word	0x2400038c

08001b38 <_lseek_r>:
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4d07      	ldr	r5, [pc, #28]	; (8001b58 <_lseek_r+0x20>)
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	4608      	mov	r0, r1
 8001b40:	4611      	mov	r1, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	602a      	str	r2, [r5, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f7ff fa0a 	bl	8000f60 <_lseek>
 8001b4c:	1c43      	adds	r3, r0, #1
 8001b4e:	d102      	bne.n	8001b56 <_lseek_r+0x1e>
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	b103      	cbz	r3, 8001b56 <_lseek_r+0x1e>
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	2400038c 	.word	0x2400038c

08001b5c <_read_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4d07      	ldr	r5, [pc, #28]	; (8001b7c <_read_r+0x20>)
 8001b60:	4604      	mov	r4, r0
 8001b62:	4608      	mov	r0, r1
 8001b64:	4611      	mov	r1, r2
 8001b66:	2200      	movs	r2, #0
 8001b68:	602a      	str	r2, [r5, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f7ff f998 	bl	8000ea0 <_read>
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d102      	bne.n	8001b7a <_read_r+0x1e>
 8001b74:	682b      	ldr	r3, [r5, #0]
 8001b76:	b103      	cbz	r3, 8001b7a <_read_r+0x1e>
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 8001b7c:	2400038c 	.word	0x2400038c

08001b80 <_write_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4d07      	ldr	r5, [pc, #28]	; (8001ba0 <_write_r+0x20>)
 8001b84:	4604      	mov	r4, r0
 8001b86:	4608      	mov	r0, r1
 8001b88:	4611      	mov	r1, r2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	602a      	str	r2, [r5, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f7ff f9a3 	bl	8000eda <_write>
 8001b94:	1c43      	adds	r3, r0, #1
 8001b96:	d102      	bne.n	8001b9e <_write_r+0x1e>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	b103      	cbz	r3, 8001b9e <_write_r+0x1e>
 8001b9c:	6023      	str	r3, [r4, #0]
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ba0:	2400038c 	.word	0x2400038c

08001ba4 <__errno>:
 8001ba4:	4b01      	ldr	r3, [pc, #4]	; (8001bac <__errno+0x8>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	24000098 	.word	0x24000098

08001bb0 <__libc_init_array>:
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	4d0d      	ldr	r5, [pc, #52]	; (8001be8 <__libc_init_array+0x38>)
 8001bb4:	4c0d      	ldr	r4, [pc, #52]	; (8001bec <__libc_init_array+0x3c>)
 8001bb6:	1b64      	subs	r4, r4, r5
 8001bb8:	10a4      	asrs	r4, r4, #2
 8001bba:	2600      	movs	r6, #0
 8001bbc:	42a6      	cmp	r6, r4
 8001bbe:	d109      	bne.n	8001bd4 <__libc_init_array+0x24>
 8001bc0:	4d0b      	ldr	r5, [pc, #44]	; (8001bf0 <__libc_init_array+0x40>)
 8001bc2:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <__libc_init_array+0x44>)
 8001bc4:	f002 f80e 	bl	8003be4 <_init>
 8001bc8:	1b64      	subs	r4, r4, r5
 8001bca:	10a4      	asrs	r4, r4, #2
 8001bcc:	2600      	movs	r6, #0
 8001bce:	42a6      	cmp	r6, r4
 8001bd0:	d105      	bne.n	8001bde <__libc_init_array+0x2e>
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
 8001bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd8:	4798      	blx	r3
 8001bda:	3601      	adds	r6, #1
 8001bdc:	e7ee      	b.n	8001bbc <__libc_init_array+0xc>
 8001bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be2:	4798      	blx	r3
 8001be4:	3601      	adds	r6, #1
 8001be6:	e7f2      	b.n	8001bce <__libc_init_array+0x1e>
 8001be8:	08003fec 	.word	0x08003fec
 8001bec:	08003fec 	.word	0x08003fec
 8001bf0:	08003fec 	.word	0x08003fec
 8001bf4:	08003ff0 	.word	0x08003ff0

08001bf8 <__retarget_lock_init_recursive>:
 8001bf8:	4770      	bx	lr

08001bfa <__retarget_lock_acquire_recursive>:
 8001bfa:	4770      	bx	lr

08001bfc <__retarget_lock_release_recursive>:
 8001bfc:	4770      	bx	lr

08001bfe <quorem>:
 8001bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c02:	6903      	ldr	r3, [r0, #16]
 8001c04:	690c      	ldr	r4, [r1, #16]
 8001c06:	42a3      	cmp	r3, r4
 8001c08:	4607      	mov	r7, r0
 8001c0a:	db7e      	blt.n	8001d0a <quorem+0x10c>
 8001c0c:	3c01      	subs	r4, #1
 8001c0e:	f101 0814 	add.w	r8, r1, #20
 8001c12:	f100 0514 	add.w	r5, r0, #20
 8001c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8001c24:	3301      	adds	r3, #1
 8001c26:	429a      	cmp	r2, r3
 8001c28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8001c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8001c30:	fbb2 f6f3 	udiv	r6, r2, r3
 8001c34:	d331      	bcc.n	8001c9a <quorem+0x9c>
 8001c36:	f04f 0e00 	mov.w	lr, #0
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	46ac      	mov	ip, r5
 8001c3e:	46f2      	mov	sl, lr
 8001c40:	f850 2b04 	ldr.w	r2, [r0], #4
 8001c44:	b293      	uxth	r3, r2
 8001c46:	fb06 e303 	mla	r3, r6, r3, lr
 8001c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001c4e:	0c1a      	lsrs	r2, r3, #16
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	ebaa 0303 	sub.w	r3, sl, r3
 8001c56:	f8dc a000 	ldr.w	sl, [ip]
 8001c5a:	fa13 f38a 	uxtah	r3, r3, sl
 8001c5e:	fb06 220e 	mla	r2, r6, lr, r2
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	9b00      	ldr	r3, [sp, #0]
 8001c66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8001c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8001c74:	f8bd 3000 	ldrh.w	r3, [sp]
 8001c78:	4581      	cmp	r9, r0
 8001c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c7e:	f84c 3b04 	str.w	r3, [ip], #4
 8001c82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8001c86:	d2db      	bcs.n	8001c40 <quorem+0x42>
 8001c88:	f855 300b 	ldr.w	r3, [r5, fp]
 8001c8c:	b92b      	cbnz	r3, 8001c9a <quorem+0x9c>
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	3b04      	subs	r3, #4
 8001c92:	429d      	cmp	r5, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	d32c      	bcc.n	8001cf2 <quorem+0xf4>
 8001c98:	613c      	str	r4, [r7, #16]
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f001 f920 	bl	8002ee0 <__mcmp>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	db22      	blt.n	8001cea <quorem+0xec>
 8001ca4:	3601      	adds	r6, #1
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f858 2b04 	ldr.w	r2, [r8], #4
 8001cae:	f8d1 c000 	ldr.w	ip, [r1]
 8001cb2:	b293      	uxth	r3, r2
 8001cb4:	1ac3      	subs	r3, r0, r3
 8001cb6:	0c12      	lsrs	r2, r2, #16
 8001cb8:	fa13 f38c 	uxtah	r3, r3, ip
 8001cbc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8001cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cca:	45c1      	cmp	r9, r8
 8001ccc:	f841 3b04 	str.w	r3, [r1], #4
 8001cd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8001cd4:	d2e9      	bcs.n	8001caa <quorem+0xac>
 8001cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8001cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8001cde:	b922      	cbnz	r2, 8001cea <quorem+0xec>
 8001ce0:	3b04      	subs	r3, #4
 8001ce2:	429d      	cmp	r5, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	d30a      	bcc.n	8001cfe <quorem+0x100>
 8001ce8:	613c      	str	r4, [r7, #16]
 8001cea:	4630      	mov	r0, r6
 8001cec:	b003      	add	sp, #12
 8001cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	3b04      	subs	r3, #4
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d1ce      	bne.n	8001c98 <quorem+0x9a>
 8001cfa:	3c01      	subs	r4, #1
 8001cfc:	e7c9      	b.n	8001c92 <quorem+0x94>
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	3b04      	subs	r3, #4
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d1f0      	bne.n	8001ce8 <quorem+0xea>
 8001d06:	3c01      	subs	r4, #1
 8001d08:	e7eb      	b.n	8001ce2 <quorem+0xe4>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e7ee      	b.n	8001cec <quorem+0xee>
	...

08001d10 <_dtoa_r>:
 8001d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d14:	ed2d 8b02 	vpush	{d8}
 8001d18:	69c5      	ldr	r5, [r0, #28]
 8001d1a:	b091      	sub	sp, #68	; 0x44
 8001d1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8001d20:	ec59 8b10 	vmov	r8, r9, d0
 8001d24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8001d26:	9106      	str	r1, [sp, #24]
 8001d28:	4606      	mov	r6, r0
 8001d2a:	9208      	str	r2, [sp, #32]
 8001d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8001d2e:	b975      	cbnz	r5, 8001d4e <_dtoa_r+0x3e>
 8001d30:	2010      	movs	r0, #16
 8001d32:	f000 fda5 	bl	8002880 <malloc>
 8001d36:	4602      	mov	r2, r0
 8001d38:	61f0      	str	r0, [r6, #28]
 8001d3a:	b920      	cbnz	r0, 8001d46 <_dtoa_r+0x36>
 8001d3c:	4ba6      	ldr	r3, [pc, #664]	; (8001fd8 <_dtoa_r+0x2c8>)
 8001d3e:	21ef      	movs	r1, #239	; 0xef
 8001d40:	48a6      	ldr	r0, [pc, #664]	; (8001fdc <_dtoa_r+0x2cc>)
 8001d42:	f001 fc0b 	bl	800355c <__assert_func>
 8001d46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8001d4a:	6005      	str	r5, [r0, #0]
 8001d4c:	60c5      	str	r5, [r0, #12]
 8001d4e:	69f3      	ldr	r3, [r6, #28]
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	b151      	cbz	r1, 8001d6a <_dtoa_r+0x5a>
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	604a      	str	r2, [r1, #4]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f000 fe82 	bl	8002a68 <_Bfree>
 8001d64:	69f3      	ldr	r3, [r6, #28]
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f1b9 0300 	subs.w	r3, r9, #0
 8001d6e:	bfbb      	ittet	lt
 8001d70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8001d74:	9303      	strlt	r3, [sp, #12]
 8001d76:	2300      	movge	r3, #0
 8001d78:	2201      	movlt	r2, #1
 8001d7a:	bfac      	ite	ge
 8001d7c:	6023      	strge	r3, [r4, #0]
 8001d7e:	6022      	strlt	r2, [r4, #0]
 8001d80:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <_dtoa_r+0x2d0>)
 8001d82:	9c03      	ldr	r4, [sp, #12]
 8001d84:	43a3      	bics	r3, r4
 8001d86:	d11c      	bne.n	8001dc2 <_dtoa_r+0xb2>
 8001d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8001d94:	ea53 0308 	orrs.w	r3, r3, r8
 8001d98:	f000 84fb 	beq.w	8002792 <_dtoa_r+0xa82>
 8001d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001d9e:	b963      	cbnz	r3, 8001dba <_dtoa_r+0xaa>
 8001da0:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <_dtoa_r+0x2d4>)
 8001da2:	e020      	b.n	8001de6 <_dtoa_r+0xd6>
 8001da4:	4b90      	ldr	r3, [pc, #576]	; (8001fe8 <_dtoa_r+0x2d8>)
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	3308      	adds	r3, #8
 8001daa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	9801      	ldr	r0, [sp, #4]
 8001db0:	b011      	add	sp, #68	; 0x44
 8001db2:	ecbd 8b02 	vpop	{d8}
 8001db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dba:	4b8a      	ldr	r3, [pc, #552]	; (8001fe4 <_dtoa_r+0x2d4>)
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	e7f3      	b.n	8001daa <_dtoa_r+0x9a>
 8001dc2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8001dc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d10c      	bne.n	8001dea <_dtoa_r+0xda>
 8001dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 84d7 	beq.w	800278c <_dtoa_r+0xa7c>
 8001dde:	4b83      	ldr	r3, [pc, #524]	; (8001fec <_dtoa_r+0x2dc>)
 8001de0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	e7e1      	b.n	8001dae <_dtoa_r+0x9e>
 8001dea:	aa0e      	add	r2, sp, #56	; 0x38
 8001dec:	a90f      	add	r1, sp, #60	; 0x3c
 8001dee:	4630      	mov	r0, r6
 8001df0:	eeb0 0b48 	vmov.f64	d0, d8
 8001df4:	f001 f91a 	bl	800302c <__d2b>
 8001df8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8001dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001dfe:	4605      	mov	r5, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d046      	beq.n	8001e92 <_dtoa_r+0x182>
 8001e04:	eeb0 7b48 	vmov.f64	d7, d8
 8001e08:	ee18 1a90 	vmov	r1, s17
 8001e0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8001e10:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8001e14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	ee07 1a90 	vmov	s15, r1
 8001e22:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8001e26:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001fc0 <_dtoa_r+0x2b0>
 8001e2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e2e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8001fc8 <_dtoa_r+0x2b8>
 8001e32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8001e36:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001fd0 <_dtoa_r+0x2c0>
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8001e42:	eeb0 7b46 	vmov.f64	d7, d6
 8001e46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8001e4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8001e4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	ee16 ba90 	vmov	fp, s13
 8001e5a:	9009      	str	r0, [sp, #36]	; 0x24
 8001e5c:	d508      	bpl.n	8001e70 <_dtoa_r+0x160>
 8001e5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001e62:	eeb4 6b47 	vcmp.f64	d6, d7
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	bf18      	it	ne
 8001e6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8001e70:	f1bb 0f16 	cmp.w	fp, #22
 8001e74:	d82b      	bhi.n	8001ece <_dtoa_r+0x1be>
 8001e76:	495e      	ldr	r1, [pc, #376]	; (8001ff0 <_dtoa_r+0x2e0>)
 8001e78:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8001e7c:	ed91 7b00 	vldr	d7, [r1]
 8001e80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d501      	bpl.n	8001e8e <_dtoa_r+0x17e>
 8001e8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001e8e:	2100      	movs	r1, #0
 8001e90:	e01e      	b.n	8001ed0 <_dtoa_r+0x1c0>
 8001e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8001e9a:	2920      	cmp	r1, #32
 8001e9c:	bfc1      	itttt	gt
 8001e9e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8001ea2:	408c      	lslgt	r4, r1
 8001ea4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8001ea8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8001eac:	bfd6      	itet	le
 8001eae:	f1c1 0120 	rsble	r1, r1, #32
 8001eb2:	4321      	orrgt	r1, r4
 8001eb4:	fa08 f101 	lslle.w	r1, r8, r1
 8001eb8:	ee07 1a90 	vmov	s15, r1
 8001ebc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	ee17 1a90 	vmov	r1, s15
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001ecc:	e7a7      	b.n	8001e1e <_dtoa_r+0x10e>
 8001ece:	2101      	movs	r1, #1
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	1e53      	subs	r3, r2, #1
 8001ed4:	9305      	str	r3, [sp, #20]
 8001ed6:	bf45      	ittet	mi
 8001ed8:	f1c2 0301 	rsbmi	r3, r2, #1
 8001edc:	9304      	strmi	r3, [sp, #16]
 8001ede:	2300      	movpl	r3, #0
 8001ee0:	2300      	movmi	r3, #0
 8001ee2:	bf4c      	ite	mi
 8001ee4:	9305      	strmi	r3, [sp, #20]
 8001ee6:	9304      	strpl	r3, [sp, #16]
 8001ee8:	f1bb 0f00 	cmp.w	fp, #0
 8001eec:	910b      	str	r1, [sp, #44]	; 0x2c
 8001eee:	db18      	blt.n	8001f22 <_dtoa_r+0x212>
 8001ef0:	9b05      	ldr	r3, [sp, #20]
 8001ef2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8001ef6:	445b      	add	r3, fp
 8001ef8:	9305      	str	r3, [sp, #20]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9a06      	ldr	r2, [sp, #24]
 8001efe:	2a09      	cmp	r2, #9
 8001f00:	d848      	bhi.n	8001f94 <_dtoa_r+0x284>
 8001f02:	2a05      	cmp	r2, #5
 8001f04:	bfc4      	itt	gt
 8001f06:	3a04      	subgt	r2, #4
 8001f08:	9206      	strgt	r2, [sp, #24]
 8001f0a:	9a06      	ldr	r2, [sp, #24]
 8001f0c:	f1a2 0202 	sub.w	r2, r2, #2
 8001f10:	bfcc      	ite	gt
 8001f12:	2400      	movgt	r4, #0
 8001f14:	2401      	movle	r4, #1
 8001f16:	2a03      	cmp	r2, #3
 8001f18:	d847      	bhi.n	8001faa <_dtoa_r+0x29a>
 8001f1a:	e8df f002 	tbb	[pc, r2]
 8001f1e:	2d0b      	.short	0x2d0b
 8001f20:	392b      	.short	0x392b
 8001f22:	9b04      	ldr	r3, [sp, #16]
 8001f24:	2200      	movs	r2, #0
 8001f26:	eba3 030b 	sub.w	r3, r3, fp
 8001f2a:	9304      	str	r3, [sp, #16]
 8001f2c:	920a      	str	r2, [sp, #40]	; 0x28
 8001f2e:	f1cb 0300 	rsb	r3, fp, #0
 8001f32:	e7e3      	b.n	8001efc <_dtoa_r+0x1ec>
 8001f34:	2200      	movs	r2, #0
 8001f36:	9207      	str	r2, [sp, #28]
 8001f38:	9a08      	ldr	r2, [sp, #32]
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	dc38      	bgt.n	8001fb0 <_dtoa_r+0x2a0>
 8001f3e:	f04f 0a01 	mov.w	sl, #1
 8001f42:	46d1      	mov	r9, sl
 8001f44:	4652      	mov	r2, sl
 8001f46:	f8cd a020 	str.w	sl, [sp, #32]
 8001f4a:	69f7      	ldr	r7, [r6, #28]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f100 0c14 	add.w	ip, r0, #20
 8001f54:	4594      	cmp	ip, r2
 8001f56:	d930      	bls.n	8001fba <_dtoa_r+0x2aa>
 8001f58:	6079      	str	r1, [r7, #4]
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8001f5e:	f000 fd43 	bl	80029e8 <_Balloc>
 8001f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f64:	9001      	str	r0, [sp, #4]
 8001f66:	4602      	mov	r2, r0
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d145      	bne.n	8001ff8 <_dtoa_r+0x2e8>
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <_dtoa_r+0x2e4>)
 8001f6e:	f240 11af 	movw	r1, #431	; 0x1af
 8001f72:	e6e5      	b.n	8001d40 <_dtoa_r+0x30>
 8001f74:	2201      	movs	r2, #1
 8001f76:	e7de      	b.n	8001f36 <_dtoa_r+0x226>
 8001f78:	2200      	movs	r2, #0
 8001f7a:	9207      	str	r2, [sp, #28]
 8001f7c:	9a08      	ldr	r2, [sp, #32]
 8001f7e:	eb0b 0a02 	add.w	sl, fp, r2
 8001f82:	f10a 0901 	add.w	r9, sl, #1
 8001f86:	464a      	mov	r2, r9
 8001f88:	2a01      	cmp	r2, #1
 8001f8a:	bfb8      	it	lt
 8001f8c:	2201      	movlt	r2, #1
 8001f8e:	e7dc      	b.n	8001f4a <_dtoa_r+0x23a>
 8001f90:	2201      	movs	r2, #1
 8001f92:	e7f2      	b.n	8001f7a <_dtoa_r+0x26a>
 8001f94:	2401      	movs	r4, #1
 8001f96:	2200      	movs	r2, #0
 8001f98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8001f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	46d1      	mov	r9, sl
 8001fa4:	2212      	movs	r2, #18
 8001fa6:	9108      	str	r1, [sp, #32]
 8001fa8:	e7cf      	b.n	8001f4a <_dtoa_r+0x23a>
 8001faa:	2201      	movs	r2, #1
 8001fac:	9207      	str	r2, [sp, #28]
 8001fae:	e7f5      	b.n	8001f9c <_dtoa_r+0x28c>
 8001fb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8001fb4:	46d1      	mov	r9, sl
 8001fb6:	4652      	mov	r2, sl
 8001fb8:	e7c7      	b.n	8001f4a <_dtoa_r+0x23a>
 8001fba:	3101      	adds	r1, #1
 8001fbc:	0040      	lsls	r0, r0, #1
 8001fbe:	e7c7      	b.n	8001f50 <_dtoa_r+0x240>
 8001fc0:	636f4361 	.word	0x636f4361
 8001fc4:	3fd287a7 	.word	0x3fd287a7
 8001fc8:	8b60c8b3 	.word	0x8b60c8b3
 8001fcc:	3fc68a28 	.word	0x3fc68a28
 8001fd0:	509f79fb 	.word	0x509f79fb
 8001fd4:	3fd34413 	.word	0x3fd34413
 8001fd8:	08003cb9 	.word	0x08003cb9
 8001fdc:	08003cd0 	.word	0x08003cd0
 8001fe0:	7ff00000 	.word	0x7ff00000
 8001fe4:	08003cb5 	.word	0x08003cb5
 8001fe8:	08003cac 	.word	0x08003cac
 8001fec:	08003c89 	.word	0x08003c89
 8001ff0:	08003dc0 	.word	0x08003dc0
 8001ff4:	08003d28 	.word	0x08003d28
 8001ff8:	69f2      	ldr	r2, [r6, #28]
 8001ffa:	9901      	ldr	r1, [sp, #4]
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f1b9 0f0e 	cmp.w	r9, #14
 8002002:	d86c      	bhi.n	80020de <_dtoa_r+0x3ce>
 8002004:	2c00      	cmp	r4, #0
 8002006:	d06a      	beq.n	80020de <_dtoa_r+0x3ce>
 8002008:	f1bb 0f00 	cmp.w	fp, #0
 800200c:	f340 80a0 	ble.w	8002150 <_dtoa_r+0x440>
 8002010:	4ac1      	ldr	r2, [pc, #772]	; (8002318 <_dtoa_r+0x608>)
 8002012:	f00b 010f 	and.w	r1, fp, #15
 8002016:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800201a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800201e:	ed92 7b00 	vldr	d7, [r2]
 8002022:	ea4f 122b 	mov.w	r2, fp, asr #4
 8002026:	f000 8087 	beq.w	8002138 <_dtoa_r+0x428>
 800202a:	49bc      	ldr	r1, [pc, #752]	; (800231c <_dtoa_r+0x60c>)
 800202c:	ed91 6b08 	vldr	d6, [r1, #32]
 8002030:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8002034:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002038:	f002 020f 	and.w	r2, r2, #15
 800203c:	2103      	movs	r1, #3
 800203e:	48b7      	ldr	r0, [pc, #732]	; (800231c <_dtoa_r+0x60c>)
 8002040:	2a00      	cmp	r2, #0
 8002042:	d17b      	bne.n	800213c <_dtoa_r+0x42c>
 8002044:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002048:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800204c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002056:	2a00      	cmp	r2, #0
 8002058:	f000 80a0 	beq.w	800219c <_dtoa_r+0x48c>
 800205c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002060:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	f140 8098 	bpl.w	800219c <_dtoa_r+0x48c>
 800206c:	f1b9 0f00 	cmp.w	r9, #0
 8002070:	f000 8094 	beq.w	800219c <_dtoa_r+0x48c>
 8002074:	f1ba 0f00 	cmp.w	sl, #0
 8002078:	dd2f      	ble.n	80020da <_dtoa_r+0x3ca>
 800207a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800207e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002082:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002086:	f10b 32ff 	add.w	r2, fp, #4294967295
 800208a:	3101      	adds	r1, #1
 800208c:	4654      	mov	r4, sl
 800208e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002092:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002096:	ee07 1a90 	vmov	s15, r1
 800209a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800209e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80020a2:	ee15 7a90 	vmov	r7, s11
 80020a6:	ec51 0b15 	vmov	r0, r1, d5
 80020aa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	d177      	bne.n	80021a2 <_dtoa_r+0x492>
 80020b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80020b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80020ba:	ec41 0b17 	vmov	d7, r0, r1
 80020be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	f300 826a 	bgt.w	800259e <_dtoa_r+0x88e>
 80020ca:	eeb1 7b47 	vneg.f64	d7, d7
 80020ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	f100 8260 	bmi.w	800259a <_dtoa_r+0x88a>
 80020da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80020de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	f2c0 811d 	blt.w	8002320 <_dtoa_r+0x610>
 80020e6:	f1bb 0f0e 	cmp.w	fp, #14
 80020ea:	f300 8119 	bgt.w	8002320 <_dtoa_r+0x610>
 80020ee:	4b8a      	ldr	r3, [pc, #552]	; (8002318 <_dtoa_r+0x608>)
 80020f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80020f4:	ed93 6b00 	vldr	d6, [r3]
 80020f8:	9b08      	ldr	r3, [sp, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f280 80b7 	bge.w	800226e <_dtoa_r+0x55e>
 8002100:	f1b9 0f00 	cmp.w	r9, #0
 8002104:	f300 80b3 	bgt.w	800226e <_dtoa_r+0x55e>
 8002108:	f040 8246 	bne.w	8002598 <_dtoa_r+0x888>
 800210c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002110:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002114:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	464c      	mov	r4, r9
 8002122:	464f      	mov	r7, r9
 8002124:	f280 821c 	bge.w	8002560 <_dtoa_r+0x850>
 8002128:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800212c:	2331      	movs	r3, #49	; 0x31
 800212e:	f808 3b01 	strb.w	r3, [r8], #1
 8002132:	f10b 0b01 	add.w	fp, fp, #1
 8002136:	e218      	b.n	800256a <_dtoa_r+0x85a>
 8002138:	2102      	movs	r1, #2
 800213a:	e780      	b.n	800203e <_dtoa_r+0x32e>
 800213c:	07d4      	lsls	r4, r2, #31
 800213e:	d504      	bpl.n	800214a <_dtoa_r+0x43a>
 8002140:	ed90 6b00 	vldr	d6, [r0]
 8002144:	3101      	adds	r1, #1
 8002146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800214a:	1052      	asrs	r2, r2, #1
 800214c:	3008      	adds	r0, #8
 800214e:	e777      	b.n	8002040 <_dtoa_r+0x330>
 8002150:	d022      	beq.n	8002198 <_dtoa_r+0x488>
 8002152:	f1cb 0200 	rsb	r2, fp, #0
 8002156:	4970      	ldr	r1, [pc, #448]	; (8002318 <_dtoa_r+0x608>)
 8002158:	f002 000f 	and.w	r0, r2, #15
 800215c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8002160:	ed91 7b00 	vldr	d7, [r1]
 8002164:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002168:	ed8d 7b02 	vstr	d7, [sp, #8]
 800216c:	486b      	ldr	r0, [pc, #428]	; (800231c <_dtoa_r+0x60c>)
 800216e:	1112      	asrs	r2, r2, #4
 8002170:	2400      	movs	r4, #0
 8002172:	2102      	movs	r1, #2
 8002174:	b92a      	cbnz	r2, 8002182 <_dtoa_r+0x472>
 8002176:	2c00      	cmp	r4, #0
 8002178:	f43f af6a 	beq.w	8002050 <_dtoa_r+0x340>
 800217c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002180:	e766      	b.n	8002050 <_dtoa_r+0x340>
 8002182:	07d7      	lsls	r7, r2, #31
 8002184:	d505      	bpl.n	8002192 <_dtoa_r+0x482>
 8002186:	ed90 6b00 	vldr	d6, [r0]
 800218a:	3101      	adds	r1, #1
 800218c:	2401      	movs	r4, #1
 800218e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002192:	1052      	asrs	r2, r2, #1
 8002194:	3008      	adds	r0, #8
 8002196:	e7ed      	b.n	8002174 <_dtoa_r+0x464>
 8002198:	2102      	movs	r1, #2
 800219a:	e759      	b.n	8002050 <_dtoa_r+0x340>
 800219c:	465a      	mov	r2, fp
 800219e:	464c      	mov	r4, r9
 80021a0:	e775      	b.n	800208e <_dtoa_r+0x37e>
 80021a2:	ec41 0b17 	vmov	d7, r0, r1
 80021a6:	495c      	ldr	r1, [pc, #368]	; (8002318 <_dtoa_r+0x608>)
 80021a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80021ac:	ed11 4b02 	vldr	d4, [r1, #-8]
 80021b0:	9901      	ldr	r1, [sp, #4]
 80021b2:	440c      	add	r4, r1
 80021b4:	9907      	ldr	r1, [sp, #28]
 80021b6:	b351      	cbz	r1, 800220e <_dtoa_r+0x4fe>
 80021b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80021bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80021c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80021c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80021c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80021cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80021d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80021d4:	ee14 1a90 	vmov	r1, s9
 80021d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80021dc:	3130      	adds	r1, #48	; 0x30
 80021de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80021e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	f808 1b01 	strb.w	r1, [r8], #1
 80021ee:	d439      	bmi.n	8002264 <_dtoa_r+0x554>
 80021f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80021f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	d472      	bmi.n	80022e4 <_dtoa_r+0x5d4>
 80021fe:	45a0      	cmp	r8, r4
 8002200:	f43f af6b 	beq.w	80020da <_dtoa_r+0x3ca>
 8002204:	ee27 7b03 	vmul.f64	d7, d7, d3
 8002208:	ee26 6b03 	vmul.f64	d6, d6, d3
 800220c:	e7e0      	b.n	80021d0 <_dtoa_r+0x4c0>
 800220e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002212:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002216:	4620      	mov	r0, r4
 8002218:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800221c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002220:	ee14 1a90 	vmov	r1, s9
 8002224:	3130      	adds	r1, #48	; 0x30
 8002226:	f808 1b01 	strb.w	r1, [r8], #1
 800222a:	45a0      	cmp	r8, r4
 800222c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002230:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002234:	d118      	bne.n	8002268 <_dtoa_r+0x558>
 8002236:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800223a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800223e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	dc4d      	bgt.n	80022e4 <_dtoa_r+0x5d4>
 8002248:	ee35 5b47 	vsub.f64	d5, d5, d7
 800224c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8002250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002254:	f57f af41 	bpl.w	80020da <_dtoa_r+0x3ca>
 8002258:	4680      	mov	r8, r0
 800225a:	3801      	subs	r0, #1
 800225c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8002260:	2b30      	cmp	r3, #48	; 0x30
 8002262:	d0f9      	beq.n	8002258 <_dtoa_r+0x548>
 8002264:	4693      	mov	fp, r2
 8002266:	e02a      	b.n	80022be <_dtoa_r+0x5ae>
 8002268:	ee26 6b03 	vmul.f64	d6, d6, d3
 800226c:	e7d6      	b.n	800221c <_dtoa_r+0x50c>
 800226e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002272:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8002276:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800227a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800227e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8002282:	ee15 3a10 	vmov	r3, s10
 8002286:	3330      	adds	r3, #48	; 0x30
 8002288:	f808 3b01 	strb.w	r3, [r8], #1
 800228c:	9b01      	ldr	r3, [sp, #4]
 800228e:	eba8 0303 	sub.w	r3, r8, r3
 8002292:	4599      	cmp	r9, r3
 8002294:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8002298:	eea3 7b46 	vfms.f64	d7, d3, d6
 800229c:	d133      	bne.n	8002306 <_dtoa_r+0x5f6>
 800229e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	dc1a      	bgt.n	80022e2 <_dtoa_r+0x5d2>
 80022ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d103      	bne.n	80022be <_dtoa_r+0x5ae>
 80022b6:	ee15 3a10 	vmov	r3, s10
 80022ba:	07d9      	lsls	r1, r3, #31
 80022bc:	d411      	bmi.n	80022e2 <_dtoa_r+0x5d2>
 80022be:	4629      	mov	r1, r5
 80022c0:	4630      	mov	r0, r6
 80022c2:	f000 fbd1 	bl	8002a68 <_Bfree>
 80022c6:	2300      	movs	r3, #0
 80022c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80022ca:	f888 3000 	strb.w	r3, [r8]
 80022ce:	f10b 0301 	add.w	r3, fp, #1
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f43f ad69 	beq.w	8001dae <_dtoa_r+0x9e>
 80022dc:	f8c3 8000 	str.w	r8, [r3]
 80022e0:	e565      	b.n	8001dae <_dtoa_r+0x9e>
 80022e2:	465a      	mov	r2, fp
 80022e4:	4643      	mov	r3, r8
 80022e6:	4698      	mov	r8, r3
 80022e8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80022ec:	2939      	cmp	r1, #57	; 0x39
 80022ee:	d106      	bne.n	80022fe <_dtoa_r+0x5ee>
 80022f0:	9901      	ldr	r1, [sp, #4]
 80022f2:	4299      	cmp	r1, r3
 80022f4:	d1f7      	bne.n	80022e6 <_dtoa_r+0x5d6>
 80022f6:	9801      	ldr	r0, [sp, #4]
 80022f8:	2130      	movs	r1, #48	; 0x30
 80022fa:	3201      	adds	r2, #1
 80022fc:	7001      	strb	r1, [r0, #0]
 80022fe:	7819      	ldrb	r1, [r3, #0]
 8002300:	3101      	adds	r1, #1
 8002302:	7019      	strb	r1, [r3, #0]
 8002304:	e7ae      	b.n	8002264 <_dtoa_r+0x554>
 8002306:	ee27 7b04 	vmul.f64	d7, d7, d4
 800230a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	d1b2      	bne.n	800227a <_dtoa_r+0x56a>
 8002314:	e7d3      	b.n	80022be <_dtoa_r+0x5ae>
 8002316:	bf00      	nop
 8002318:	08003dc0 	.word	0x08003dc0
 800231c:	08003d98 	.word	0x08003d98
 8002320:	9907      	ldr	r1, [sp, #28]
 8002322:	2900      	cmp	r1, #0
 8002324:	f000 80d0 	beq.w	80024c8 <_dtoa_r+0x7b8>
 8002328:	9906      	ldr	r1, [sp, #24]
 800232a:	2901      	cmp	r1, #1
 800232c:	f300 80b4 	bgt.w	8002498 <_dtoa_r+0x788>
 8002330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002332:	2900      	cmp	r1, #0
 8002334:	f000 80ac 	beq.w	8002490 <_dtoa_r+0x780>
 8002338:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800233c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002340:	461c      	mov	r4, r3
 8002342:	9309      	str	r3, [sp, #36]	; 0x24
 8002344:	9b04      	ldr	r3, [sp, #16]
 8002346:	4413      	add	r3, r2
 8002348:	9304      	str	r3, [sp, #16]
 800234a:	9b05      	ldr	r3, [sp, #20]
 800234c:	2101      	movs	r1, #1
 800234e:	4413      	add	r3, r2
 8002350:	4630      	mov	r0, r6
 8002352:	9305      	str	r3, [sp, #20]
 8002354:	f000 fc3e 	bl	8002bd4 <__i2b>
 8002358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800235a:	4607      	mov	r7, r0
 800235c:	f1b8 0f00 	cmp.w	r8, #0
 8002360:	d00d      	beq.n	800237e <_dtoa_r+0x66e>
 8002362:	9a05      	ldr	r2, [sp, #20]
 8002364:	2a00      	cmp	r2, #0
 8002366:	dd0a      	ble.n	800237e <_dtoa_r+0x66e>
 8002368:	4542      	cmp	r2, r8
 800236a:	9904      	ldr	r1, [sp, #16]
 800236c:	bfa8      	it	ge
 800236e:	4642      	movge	r2, r8
 8002370:	1a89      	subs	r1, r1, r2
 8002372:	9104      	str	r1, [sp, #16]
 8002374:	9905      	ldr	r1, [sp, #20]
 8002376:	eba8 0802 	sub.w	r8, r8, r2
 800237a:	1a8a      	subs	r2, r1, r2
 800237c:	9205      	str	r2, [sp, #20]
 800237e:	b303      	cbz	r3, 80023c2 <_dtoa_r+0x6b2>
 8002380:	9a07      	ldr	r2, [sp, #28]
 8002382:	2a00      	cmp	r2, #0
 8002384:	f000 80a5 	beq.w	80024d2 <_dtoa_r+0x7c2>
 8002388:	2c00      	cmp	r4, #0
 800238a:	dd13      	ble.n	80023b4 <_dtoa_r+0x6a4>
 800238c:	4639      	mov	r1, r7
 800238e:	4622      	mov	r2, r4
 8002390:	4630      	mov	r0, r6
 8002392:	930d      	str	r3, [sp, #52]	; 0x34
 8002394:	f000 fcde 	bl	8002d54 <__pow5mult>
 8002398:	462a      	mov	r2, r5
 800239a:	4601      	mov	r1, r0
 800239c:	4607      	mov	r7, r0
 800239e:	4630      	mov	r0, r6
 80023a0:	f000 fc2e 	bl	8002c00 <__multiply>
 80023a4:	4629      	mov	r1, r5
 80023a6:	9009      	str	r0, [sp, #36]	; 0x24
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 fb5d 	bl	8002a68 <_Bfree>
 80023ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023b2:	4615      	mov	r5, r2
 80023b4:	1b1a      	subs	r2, r3, r4
 80023b6:	d004      	beq.n	80023c2 <_dtoa_r+0x6b2>
 80023b8:	4629      	mov	r1, r5
 80023ba:	4630      	mov	r0, r6
 80023bc:	f000 fcca 	bl	8002d54 <__pow5mult>
 80023c0:	4605      	mov	r5, r0
 80023c2:	2101      	movs	r1, #1
 80023c4:	4630      	mov	r0, r6
 80023c6:	f000 fc05 	bl	8002bd4 <__i2b>
 80023ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	4604      	mov	r4, r0
 80023d0:	f340 8081 	ble.w	80024d6 <_dtoa_r+0x7c6>
 80023d4:	461a      	mov	r2, r3
 80023d6:	4601      	mov	r1, r0
 80023d8:	4630      	mov	r0, r6
 80023da:	f000 fcbb 	bl	8002d54 <__pow5mult>
 80023de:	9b06      	ldr	r3, [sp, #24]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	4604      	mov	r4, r0
 80023e4:	dd7a      	ble.n	80024dc <_dtoa_r+0x7cc>
 80023e6:	2300      	movs	r3, #0
 80023e8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ea:	6922      	ldr	r2, [r4, #16]
 80023ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80023f0:	6910      	ldr	r0, [r2, #16]
 80023f2:	f000 fba1 	bl	8002b38 <__hi0bits>
 80023f6:	f1c0 0020 	rsb	r0, r0, #32
 80023fa:	9b05      	ldr	r3, [sp, #20]
 80023fc:	4418      	add	r0, r3
 80023fe:	f010 001f 	ands.w	r0, r0, #31
 8002402:	f000 8093 	beq.w	800252c <_dtoa_r+0x81c>
 8002406:	f1c0 0220 	rsb	r2, r0, #32
 800240a:	2a04      	cmp	r2, #4
 800240c:	f340 8085 	ble.w	800251a <_dtoa_r+0x80a>
 8002410:	9b04      	ldr	r3, [sp, #16]
 8002412:	f1c0 001c 	rsb	r0, r0, #28
 8002416:	4403      	add	r3, r0
 8002418:	9304      	str	r3, [sp, #16]
 800241a:	9b05      	ldr	r3, [sp, #20]
 800241c:	4480      	add	r8, r0
 800241e:	4403      	add	r3, r0
 8002420:	9305      	str	r3, [sp, #20]
 8002422:	9b04      	ldr	r3, [sp, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	dd05      	ble.n	8002434 <_dtoa_r+0x724>
 8002428:	4629      	mov	r1, r5
 800242a:	461a      	mov	r2, r3
 800242c:	4630      	mov	r0, r6
 800242e:	f000 fceb 	bl	8002e08 <__lshift>
 8002432:	4605      	mov	r5, r0
 8002434:	9b05      	ldr	r3, [sp, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	dd05      	ble.n	8002446 <_dtoa_r+0x736>
 800243a:	4621      	mov	r1, r4
 800243c:	461a      	mov	r2, r3
 800243e:	4630      	mov	r0, r6
 8002440:	f000 fce2 	bl	8002e08 <__lshift>
 8002444:	4604      	mov	r4, r0
 8002446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d071      	beq.n	8002530 <_dtoa_r+0x820>
 800244c:	4621      	mov	r1, r4
 800244e:	4628      	mov	r0, r5
 8002450:	f000 fd46 	bl	8002ee0 <__mcmp>
 8002454:	2800      	cmp	r0, #0
 8002456:	da6b      	bge.n	8002530 <_dtoa_r+0x820>
 8002458:	2300      	movs	r3, #0
 800245a:	4629      	mov	r1, r5
 800245c:	220a      	movs	r2, #10
 800245e:	4630      	mov	r0, r6
 8002460:	f000 fb24 	bl	8002aac <__multadd>
 8002464:	9b07      	ldr	r3, [sp, #28]
 8002466:	f10b 3bff 	add.w	fp, fp, #4294967295
 800246a:	4605      	mov	r5, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8197 	beq.w	80027a0 <_dtoa_r+0xa90>
 8002472:	4639      	mov	r1, r7
 8002474:	2300      	movs	r3, #0
 8002476:	220a      	movs	r2, #10
 8002478:	4630      	mov	r0, r6
 800247a:	f000 fb17 	bl	8002aac <__multadd>
 800247e:	f1ba 0f00 	cmp.w	sl, #0
 8002482:	4607      	mov	r7, r0
 8002484:	f300 8093 	bgt.w	80025ae <_dtoa_r+0x89e>
 8002488:	9b06      	ldr	r3, [sp, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	dc57      	bgt.n	800253e <_dtoa_r+0x82e>
 800248e:	e08e      	b.n	80025ae <_dtoa_r+0x89e>
 8002490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002492:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8002496:	e751      	b.n	800233c <_dtoa_r+0x62c>
 8002498:	f109 34ff 	add.w	r4, r9, #4294967295
 800249c:	42a3      	cmp	r3, r4
 800249e:	bfbf      	itttt	lt
 80024a0:	1ae2      	sublt	r2, r4, r3
 80024a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80024a4:	189b      	addlt	r3, r3, r2
 80024a6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80024a8:	bfae      	itee	ge
 80024aa:	1b1c      	subge	r4, r3, r4
 80024ac:	4623      	movlt	r3, r4
 80024ae:	2400      	movlt	r4, #0
 80024b0:	f1b9 0f00 	cmp.w	r9, #0
 80024b4:	bfb5      	itete	lt
 80024b6:	9a04      	ldrlt	r2, [sp, #16]
 80024b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80024bc:	eba2 0809 	sublt.w	r8, r2, r9
 80024c0:	464a      	movge	r2, r9
 80024c2:	bfb8      	it	lt
 80024c4:	2200      	movlt	r2, #0
 80024c6:	e73c      	b.n	8002342 <_dtoa_r+0x632>
 80024c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80024cc:	9f07      	ldr	r7, [sp, #28]
 80024ce:	461c      	mov	r4, r3
 80024d0:	e744      	b.n	800235c <_dtoa_r+0x64c>
 80024d2:	461a      	mov	r2, r3
 80024d4:	e770      	b.n	80023b8 <_dtoa_r+0x6a8>
 80024d6:	9b06      	ldr	r3, [sp, #24]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	dc18      	bgt.n	800250e <_dtoa_r+0x7fe>
 80024dc:	9b02      	ldr	r3, [sp, #8]
 80024de:	b9b3      	cbnz	r3, 800250e <_dtoa_r+0x7fe>
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80024e6:	b9a2      	cbnz	r2, 8002512 <_dtoa_r+0x802>
 80024e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ec:	0d12      	lsrs	r2, r2, #20
 80024ee:	0512      	lsls	r2, r2, #20
 80024f0:	b18a      	cbz	r2, 8002516 <_dtoa_r+0x806>
 80024f2:	9b04      	ldr	r3, [sp, #16]
 80024f4:	3301      	adds	r3, #1
 80024f6:	9304      	str	r3, [sp, #16]
 80024f8:	9b05      	ldr	r3, [sp, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	9305      	str	r3, [sp, #20]
 80024fe:	2301      	movs	r3, #1
 8002500:	9309      	str	r3, [sp, #36]	; 0x24
 8002502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f af70 	bne.w	80023ea <_dtoa_r+0x6da>
 800250a:	2001      	movs	r0, #1
 800250c:	e775      	b.n	80023fa <_dtoa_r+0x6ea>
 800250e:	2300      	movs	r3, #0
 8002510:	e7f6      	b.n	8002500 <_dtoa_r+0x7f0>
 8002512:	9b02      	ldr	r3, [sp, #8]
 8002514:	e7f4      	b.n	8002500 <_dtoa_r+0x7f0>
 8002516:	9209      	str	r2, [sp, #36]	; 0x24
 8002518:	e7f3      	b.n	8002502 <_dtoa_r+0x7f2>
 800251a:	d082      	beq.n	8002422 <_dtoa_r+0x712>
 800251c:	9b04      	ldr	r3, [sp, #16]
 800251e:	321c      	adds	r2, #28
 8002520:	4413      	add	r3, r2
 8002522:	9304      	str	r3, [sp, #16]
 8002524:	9b05      	ldr	r3, [sp, #20]
 8002526:	4490      	add	r8, r2
 8002528:	4413      	add	r3, r2
 800252a:	e779      	b.n	8002420 <_dtoa_r+0x710>
 800252c:	4602      	mov	r2, r0
 800252e:	e7f5      	b.n	800251c <_dtoa_r+0x80c>
 8002530:	f1b9 0f00 	cmp.w	r9, #0
 8002534:	dc36      	bgt.n	80025a4 <_dtoa_r+0x894>
 8002536:	9b06      	ldr	r3, [sp, #24]
 8002538:	2b02      	cmp	r3, #2
 800253a:	dd33      	ble.n	80025a4 <_dtoa_r+0x894>
 800253c:	46ca      	mov	sl, r9
 800253e:	f1ba 0f00 	cmp.w	sl, #0
 8002542:	d10d      	bne.n	8002560 <_dtoa_r+0x850>
 8002544:	4621      	mov	r1, r4
 8002546:	4653      	mov	r3, sl
 8002548:	2205      	movs	r2, #5
 800254a:	4630      	mov	r0, r6
 800254c:	f000 faae 	bl	8002aac <__multadd>
 8002550:	4601      	mov	r1, r0
 8002552:	4604      	mov	r4, r0
 8002554:	4628      	mov	r0, r5
 8002556:	f000 fcc3 	bl	8002ee0 <__mcmp>
 800255a:	2800      	cmp	r0, #0
 800255c:	f73f ade4 	bgt.w	8002128 <_dtoa_r+0x418>
 8002560:	9b08      	ldr	r3, [sp, #32]
 8002562:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002566:	ea6f 0b03 	mvn.w	fp, r3
 800256a:	f04f 0900 	mov.w	r9, #0
 800256e:	4621      	mov	r1, r4
 8002570:	4630      	mov	r0, r6
 8002572:	f000 fa79 	bl	8002a68 <_Bfree>
 8002576:	2f00      	cmp	r7, #0
 8002578:	f43f aea1 	beq.w	80022be <_dtoa_r+0x5ae>
 800257c:	f1b9 0f00 	cmp.w	r9, #0
 8002580:	d005      	beq.n	800258e <_dtoa_r+0x87e>
 8002582:	45b9      	cmp	r9, r7
 8002584:	d003      	beq.n	800258e <_dtoa_r+0x87e>
 8002586:	4649      	mov	r1, r9
 8002588:	4630      	mov	r0, r6
 800258a:	f000 fa6d 	bl	8002a68 <_Bfree>
 800258e:	4639      	mov	r1, r7
 8002590:	4630      	mov	r0, r6
 8002592:	f000 fa69 	bl	8002a68 <_Bfree>
 8002596:	e692      	b.n	80022be <_dtoa_r+0x5ae>
 8002598:	2400      	movs	r4, #0
 800259a:	4627      	mov	r7, r4
 800259c:	e7e0      	b.n	8002560 <_dtoa_r+0x850>
 800259e:	4693      	mov	fp, r2
 80025a0:	4627      	mov	r7, r4
 80025a2:	e5c1      	b.n	8002128 <_dtoa_r+0x418>
 80025a4:	9b07      	ldr	r3, [sp, #28]
 80025a6:	46ca      	mov	sl, r9
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8100 	beq.w	80027ae <_dtoa_r+0xa9e>
 80025ae:	f1b8 0f00 	cmp.w	r8, #0
 80025b2:	dd05      	ble.n	80025c0 <_dtoa_r+0x8b0>
 80025b4:	4639      	mov	r1, r7
 80025b6:	4642      	mov	r2, r8
 80025b8:	4630      	mov	r0, r6
 80025ba:	f000 fc25 	bl	8002e08 <__lshift>
 80025be:	4607      	mov	r7, r0
 80025c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d05d      	beq.n	8002682 <_dtoa_r+0x972>
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 fa0d 	bl	80029e8 <_Balloc>
 80025ce:	4680      	mov	r8, r0
 80025d0:	b928      	cbnz	r0, 80025de <_dtoa_r+0x8ce>
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <_dtoa_r+0xacc>)
 80025d4:	4602      	mov	r2, r0
 80025d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80025da:	f7ff bbb1 	b.w	8001d40 <_dtoa_r+0x30>
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	3202      	adds	r2, #2
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	f107 010c 	add.w	r1, r7, #12
 80025e8:	300c      	adds	r0, #12
 80025ea:	f000 ffa9 	bl	8003540 <memcpy>
 80025ee:	2201      	movs	r2, #1
 80025f0:	4641      	mov	r1, r8
 80025f2:	4630      	mov	r0, r6
 80025f4:	f000 fc08 	bl	8002e08 <__lshift>
 80025f8:	9b01      	ldr	r3, [sp, #4]
 80025fa:	3301      	adds	r3, #1
 80025fc:	9304      	str	r3, [sp, #16]
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	4453      	add	r3, sl
 8002602:	9308      	str	r3, [sp, #32]
 8002604:	9b02      	ldr	r3, [sp, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	46b9      	mov	r9, r7
 800260c:	9307      	str	r3, [sp, #28]
 800260e:	4607      	mov	r7, r0
 8002610:	9b04      	ldr	r3, [sp, #16]
 8002612:	4621      	mov	r1, r4
 8002614:	3b01      	subs	r3, #1
 8002616:	4628      	mov	r0, r5
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	f7ff faf0 	bl	8001bfe <quorem>
 800261e:	4603      	mov	r3, r0
 8002620:	3330      	adds	r3, #48	; 0x30
 8002622:	9005      	str	r0, [sp, #20]
 8002624:	4649      	mov	r1, r9
 8002626:	4628      	mov	r0, r5
 8002628:	9309      	str	r3, [sp, #36]	; 0x24
 800262a:	f000 fc59 	bl	8002ee0 <__mcmp>
 800262e:	463a      	mov	r2, r7
 8002630:	4682      	mov	sl, r0
 8002632:	4621      	mov	r1, r4
 8002634:	4630      	mov	r0, r6
 8002636:	f000 fc6f 	bl	8002f18 <__mdiff>
 800263a:	68c2      	ldr	r2, [r0, #12]
 800263c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800263e:	4680      	mov	r8, r0
 8002640:	bb0a      	cbnz	r2, 8002686 <_dtoa_r+0x976>
 8002642:	4601      	mov	r1, r0
 8002644:	4628      	mov	r0, r5
 8002646:	f000 fc4b 	bl	8002ee0 <__mcmp>
 800264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800264c:	4602      	mov	r2, r0
 800264e:	4641      	mov	r1, r8
 8002650:	4630      	mov	r0, r6
 8002652:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8002656:	f000 fa07 	bl	8002a68 <_Bfree>
 800265a:	9b06      	ldr	r3, [sp, #24]
 800265c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800265e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002662:	ea43 0102 	orr.w	r1, r3, r2
 8002666:	9b07      	ldr	r3, [sp, #28]
 8002668:	4319      	orrs	r1, r3
 800266a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800266c:	d10d      	bne.n	800268a <_dtoa_r+0x97a>
 800266e:	2b39      	cmp	r3, #57	; 0x39
 8002670:	d029      	beq.n	80026c6 <_dtoa_r+0x9b6>
 8002672:	f1ba 0f00 	cmp.w	sl, #0
 8002676:	dd01      	ble.n	800267c <_dtoa_r+0x96c>
 8002678:	9b05      	ldr	r3, [sp, #20]
 800267a:	3331      	adds	r3, #49	; 0x31
 800267c:	9a02      	ldr	r2, [sp, #8]
 800267e:	7013      	strb	r3, [r2, #0]
 8002680:	e775      	b.n	800256e <_dtoa_r+0x85e>
 8002682:	4638      	mov	r0, r7
 8002684:	e7b8      	b.n	80025f8 <_dtoa_r+0x8e8>
 8002686:	2201      	movs	r2, #1
 8002688:	e7e1      	b.n	800264e <_dtoa_r+0x93e>
 800268a:	f1ba 0f00 	cmp.w	sl, #0
 800268e:	db06      	blt.n	800269e <_dtoa_r+0x98e>
 8002690:	9906      	ldr	r1, [sp, #24]
 8002692:	ea41 0a0a 	orr.w	sl, r1, sl
 8002696:	9907      	ldr	r1, [sp, #28]
 8002698:	ea5a 0a01 	orrs.w	sl, sl, r1
 800269c:	d120      	bne.n	80026e0 <_dtoa_r+0x9d0>
 800269e:	2a00      	cmp	r2, #0
 80026a0:	ddec      	ble.n	800267c <_dtoa_r+0x96c>
 80026a2:	4629      	mov	r1, r5
 80026a4:	2201      	movs	r2, #1
 80026a6:	4630      	mov	r0, r6
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	f000 fbad 	bl	8002e08 <__lshift>
 80026ae:	4621      	mov	r1, r4
 80026b0:	4605      	mov	r5, r0
 80026b2:	f000 fc15 	bl	8002ee0 <__mcmp>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	9b04      	ldr	r3, [sp, #16]
 80026ba:	dc02      	bgt.n	80026c2 <_dtoa_r+0x9b2>
 80026bc:	d1de      	bne.n	800267c <_dtoa_r+0x96c>
 80026be:	07da      	lsls	r2, r3, #31
 80026c0:	d5dc      	bpl.n	800267c <_dtoa_r+0x96c>
 80026c2:	2b39      	cmp	r3, #57	; 0x39
 80026c4:	d1d8      	bne.n	8002678 <_dtoa_r+0x968>
 80026c6:	9a02      	ldr	r2, [sp, #8]
 80026c8:	2339      	movs	r3, #57	; 0x39
 80026ca:	7013      	strb	r3, [r2, #0]
 80026cc:	4643      	mov	r3, r8
 80026ce:	4698      	mov	r8, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80026d6:	2a39      	cmp	r2, #57	; 0x39
 80026d8:	d051      	beq.n	800277e <_dtoa_r+0xa6e>
 80026da:	3201      	adds	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e746      	b.n	800256e <_dtoa_r+0x85e>
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	dd03      	ble.n	80026ec <_dtoa_r+0x9dc>
 80026e4:	2b39      	cmp	r3, #57	; 0x39
 80026e6:	d0ee      	beq.n	80026c6 <_dtoa_r+0x9b6>
 80026e8:	3301      	adds	r3, #1
 80026ea:	e7c7      	b.n	800267c <_dtoa_r+0x96c>
 80026ec:	9a04      	ldr	r2, [sp, #16]
 80026ee:	9908      	ldr	r1, [sp, #32]
 80026f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80026f4:	428a      	cmp	r2, r1
 80026f6:	d02b      	beq.n	8002750 <_dtoa_r+0xa40>
 80026f8:	4629      	mov	r1, r5
 80026fa:	2300      	movs	r3, #0
 80026fc:	220a      	movs	r2, #10
 80026fe:	4630      	mov	r0, r6
 8002700:	f000 f9d4 	bl	8002aac <__multadd>
 8002704:	45b9      	cmp	r9, r7
 8002706:	4605      	mov	r5, r0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	f04f 020a 	mov.w	r2, #10
 8002710:	4649      	mov	r1, r9
 8002712:	4630      	mov	r0, r6
 8002714:	d107      	bne.n	8002726 <_dtoa_r+0xa16>
 8002716:	f000 f9c9 	bl	8002aac <__multadd>
 800271a:	4681      	mov	r9, r0
 800271c:	4607      	mov	r7, r0
 800271e:	9b04      	ldr	r3, [sp, #16]
 8002720:	3301      	adds	r3, #1
 8002722:	9304      	str	r3, [sp, #16]
 8002724:	e774      	b.n	8002610 <_dtoa_r+0x900>
 8002726:	f000 f9c1 	bl	8002aac <__multadd>
 800272a:	4639      	mov	r1, r7
 800272c:	4681      	mov	r9, r0
 800272e:	2300      	movs	r3, #0
 8002730:	220a      	movs	r2, #10
 8002732:	4630      	mov	r0, r6
 8002734:	f000 f9ba 	bl	8002aac <__multadd>
 8002738:	4607      	mov	r7, r0
 800273a:	e7f0      	b.n	800271e <_dtoa_r+0xa0e>
 800273c:	f1ba 0f00 	cmp.w	sl, #0
 8002740:	9a01      	ldr	r2, [sp, #4]
 8002742:	bfcc      	ite	gt
 8002744:	46d0      	movgt	r8, sl
 8002746:	f04f 0801 	movle.w	r8, #1
 800274a:	4490      	add	r8, r2
 800274c:	f04f 0900 	mov.w	r9, #0
 8002750:	4629      	mov	r1, r5
 8002752:	2201      	movs	r2, #1
 8002754:	4630      	mov	r0, r6
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	f000 fb56 	bl	8002e08 <__lshift>
 800275c:	4621      	mov	r1, r4
 800275e:	4605      	mov	r5, r0
 8002760:	f000 fbbe 	bl	8002ee0 <__mcmp>
 8002764:	2800      	cmp	r0, #0
 8002766:	dcb1      	bgt.n	80026cc <_dtoa_r+0x9bc>
 8002768:	d102      	bne.n	8002770 <_dtoa_r+0xa60>
 800276a:	9b02      	ldr	r3, [sp, #8]
 800276c:	07db      	lsls	r3, r3, #31
 800276e:	d4ad      	bmi.n	80026cc <_dtoa_r+0x9bc>
 8002770:	4643      	mov	r3, r8
 8002772:	4698      	mov	r8, r3
 8002774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002778:	2a30      	cmp	r2, #48	; 0x30
 800277a:	d0fa      	beq.n	8002772 <_dtoa_r+0xa62>
 800277c:	e6f7      	b.n	800256e <_dtoa_r+0x85e>
 800277e:	9a01      	ldr	r2, [sp, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d1a4      	bne.n	80026ce <_dtoa_r+0x9be>
 8002784:	f10b 0b01 	add.w	fp, fp, #1
 8002788:	2331      	movs	r3, #49	; 0x31
 800278a:	e778      	b.n	800267e <_dtoa_r+0x96e>
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <_dtoa_r+0xad0>)
 800278e:	f7ff bb2a 	b.w	8001de6 <_dtoa_r+0xd6>
 8002792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f ab05 	bne.w	8001da4 <_dtoa_r+0x94>
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <_dtoa_r+0xad4>)
 800279c:	f7ff bb23 	b.w	8001de6 <_dtoa_r+0xd6>
 80027a0:	f1ba 0f00 	cmp.w	sl, #0
 80027a4:	dc03      	bgt.n	80027ae <_dtoa_r+0xa9e>
 80027a6:	9b06      	ldr	r3, [sp, #24]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f73f aec8 	bgt.w	800253e <_dtoa_r+0x82e>
 80027ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80027b2:	4621      	mov	r1, r4
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff fa22 	bl	8001bfe <quorem>
 80027ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80027be:	f808 3b01 	strb.w	r3, [r8], #1
 80027c2:	9a01      	ldr	r2, [sp, #4]
 80027c4:	eba8 0202 	sub.w	r2, r8, r2
 80027c8:	4592      	cmp	sl, r2
 80027ca:	ddb7      	ble.n	800273c <_dtoa_r+0xa2c>
 80027cc:	4629      	mov	r1, r5
 80027ce:	2300      	movs	r3, #0
 80027d0:	220a      	movs	r2, #10
 80027d2:	4630      	mov	r0, r6
 80027d4:	f000 f96a 	bl	8002aac <__multadd>
 80027d8:	4605      	mov	r5, r0
 80027da:	e7ea      	b.n	80027b2 <_dtoa_r+0xaa2>
 80027dc:	08003d28 	.word	0x08003d28
 80027e0:	08003c88 	.word	0x08003c88
 80027e4:	08003cac 	.word	0x08003cac

080027e8 <_free_r>:
 80027e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027ea:	2900      	cmp	r1, #0
 80027ec:	d044      	beq.n	8002878 <_free_r+0x90>
 80027ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027f2:	9001      	str	r0, [sp, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f1a1 0404 	sub.w	r4, r1, #4
 80027fa:	bfb8      	it	lt
 80027fc:	18e4      	addlt	r4, r4, r3
 80027fe:	f000 f8e7 	bl	80029d0 <__malloc_lock>
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <_free_r+0x94>)
 8002804:	9801      	ldr	r0, [sp, #4]
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	b933      	cbnz	r3, 8002818 <_free_r+0x30>
 800280a:	6063      	str	r3, [r4, #4]
 800280c:	6014      	str	r4, [r2, #0]
 800280e:	b003      	add	sp, #12
 8002810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002814:	f000 b8e2 	b.w	80029dc <__malloc_unlock>
 8002818:	42a3      	cmp	r3, r4
 800281a:	d908      	bls.n	800282e <_free_r+0x46>
 800281c:	6825      	ldr	r5, [r4, #0]
 800281e:	1961      	adds	r1, r4, r5
 8002820:	428b      	cmp	r3, r1
 8002822:	bf01      	itttt	eq
 8002824:	6819      	ldreq	r1, [r3, #0]
 8002826:	685b      	ldreq	r3, [r3, #4]
 8002828:	1949      	addeq	r1, r1, r5
 800282a:	6021      	streq	r1, [r4, #0]
 800282c:	e7ed      	b.n	800280a <_free_r+0x22>
 800282e:	461a      	mov	r2, r3
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	b10b      	cbz	r3, 8002838 <_free_r+0x50>
 8002834:	42a3      	cmp	r3, r4
 8002836:	d9fa      	bls.n	800282e <_free_r+0x46>
 8002838:	6811      	ldr	r1, [r2, #0]
 800283a:	1855      	adds	r5, r2, r1
 800283c:	42a5      	cmp	r5, r4
 800283e:	d10b      	bne.n	8002858 <_free_r+0x70>
 8002840:	6824      	ldr	r4, [r4, #0]
 8002842:	4421      	add	r1, r4
 8002844:	1854      	adds	r4, r2, r1
 8002846:	42a3      	cmp	r3, r4
 8002848:	6011      	str	r1, [r2, #0]
 800284a:	d1e0      	bne.n	800280e <_free_r+0x26>
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	6053      	str	r3, [r2, #4]
 8002852:	440c      	add	r4, r1
 8002854:	6014      	str	r4, [r2, #0]
 8002856:	e7da      	b.n	800280e <_free_r+0x26>
 8002858:	d902      	bls.n	8002860 <_free_r+0x78>
 800285a:	230c      	movs	r3, #12
 800285c:	6003      	str	r3, [r0, #0]
 800285e:	e7d6      	b.n	800280e <_free_r+0x26>
 8002860:	6825      	ldr	r5, [r4, #0]
 8002862:	1961      	adds	r1, r4, r5
 8002864:	428b      	cmp	r3, r1
 8002866:	bf04      	itt	eq
 8002868:	6819      	ldreq	r1, [r3, #0]
 800286a:	685b      	ldreq	r3, [r3, #4]
 800286c:	6063      	str	r3, [r4, #4]
 800286e:	bf04      	itt	eq
 8002870:	1949      	addeq	r1, r1, r5
 8002872:	6021      	streq	r1, [r4, #0]
 8002874:	6054      	str	r4, [r2, #4]
 8002876:	e7ca      	b.n	800280e <_free_r+0x26>
 8002878:	b003      	add	sp, #12
 800287a:	bd30      	pop	{r4, r5, pc}
 800287c:	24000394 	.word	0x24000394

08002880 <malloc>:
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <malloc+0xc>)
 8002882:	4601      	mov	r1, r0
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f000 b823 	b.w	80028d0 <_malloc_r>
 800288a:	bf00      	nop
 800288c:	24000098 	.word	0x24000098

08002890 <sbrk_aligned>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	4e0e      	ldr	r6, [pc, #56]	; (80028cc <sbrk_aligned+0x3c>)
 8002894:	460c      	mov	r4, r1
 8002896:	6831      	ldr	r1, [r6, #0]
 8002898:	4605      	mov	r5, r0
 800289a:	b911      	cbnz	r1, 80028a2 <sbrk_aligned+0x12>
 800289c:	f000 fe40 	bl	8003520 <_sbrk_r>
 80028a0:	6030      	str	r0, [r6, #0]
 80028a2:	4621      	mov	r1, r4
 80028a4:	4628      	mov	r0, r5
 80028a6:	f000 fe3b 	bl	8003520 <_sbrk_r>
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	d00a      	beq.n	80028c4 <sbrk_aligned+0x34>
 80028ae:	1cc4      	adds	r4, r0, #3
 80028b0:	f024 0403 	bic.w	r4, r4, #3
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d007      	beq.n	80028c8 <sbrk_aligned+0x38>
 80028b8:	1a21      	subs	r1, r4, r0
 80028ba:	4628      	mov	r0, r5
 80028bc:	f000 fe30 	bl	8003520 <_sbrk_r>
 80028c0:	3001      	adds	r0, #1
 80028c2:	d101      	bne.n	80028c8 <sbrk_aligned+0x38>
 80028c4:	f04f 34ff 	mov.w	r4, #4294967295
 80028c8:	4620      	mov	r0, r4
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	24000398 	.word	0x24000398

080028d0 <_malloc_r>:
 80028d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	1ccd      	adds	r5, r1, #3
 80028d6:	f025 0503 	bic.w	r5, r5, #3
 80028da:	3508      	adds	r5, #8
 80028dc:	2d0c      	cmp	r5, #12
 80028de:	bf38      	it	cc
 80028e0:	250c      	movcc	r5, #12
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	4607      	mov	r7, r0
 80028e6:	db01      	blt.n	80028ec <_malloc_r+0x1c>
 80028e8:	42a9      	cmp	r1, r5
 80028ea:	d905      	bls.n	80028f8 <_malloc_r+0x28>
 80028ec:	230c      	movs	r3, #12
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	2600      	movs	r6, #0
 80028f2:	4630      	mov	r0, r6
 80028f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029cc <_malloc_r+0xfc>
 80028fc:	f000 f868 	bl	80029d0 <__malloc_lock>
 8002900:	f8d8 3000 	ldr.w	r3, [r8]
 8002904:	461c      	mov	r4, r3
 8002906:	bb5c      	cbnz	r4, 8002960 <_malloc_r+0x90>
 8002908:	4629      	mov	r1, r5
 800290a:	4638      	mov	r0, r7
 800290c:	f7ff ffc0 	bl	8002890 <sbrk_aligned>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	4604      	mov	r4, r0
 8002914:	d155      	bne.n	80029c2 <_malloc_r+0xf2>
 8002916:	f8d8 4000 	ldr.w	r4, [r8]
 800291a:	4626      	mov	r6, r4
 800291c:	2e00      	cmp	r6, #0
 800291e:	d145      	bne.n	80029ac <_malloc_r+0xdc>
 8002920:	2c00      	cmp	r4, #0
 8002922:	d048      	beq.n	80029b6 <_malloc_r+0xe6>
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	4631      	mov	r1, r6
 8002928:	4638      	mov	r0, r7
 800292a:	eb04 0903 	add.w	r9, r4, r3
 800292e:	f000 fdf7 	bl	8003520 <_sbrk_r>
 8002932:	4581      	cmp	r9, r0
 8002934:	d13f      	bne.n	80029b6 <_malloc_r+0xe6>
 8002936:	6821      	ldr	r1, [r4, #0]
 8002938:	1a6d      	subs	r5, r5, r1
 800293a:	4629      	mov	r1, r5
 800293c:	4638      	mov	r0, r7
 800293e:	f7ff ffa7 	bl	8002890 <sbrk_aligned>
 8002942:	3001      	adds	r0, #1
 8002944:	d037      	beq.n	80029b6 <_malloc_r+0xe6>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	442b      	add	r3, r5
 800294a:	6023      	str	r3, [r4, #0]
 800294c:	f8d8 3000 	ldr.w	r3, [r8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d038      	beq.n	80029c6 <_malloc_r+0xf6>
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	42a2      	cmp	r2, r4
 8002958:	d12b      	bne.n	80029b2 <_malloc_r+0xe2>
 800295a:	2200      	movs	r2, #0
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e00f      	b.n	8002980 <_malloc_r+0xb0>
 8002960:	6822      	ldr	r2, [r4, #0]
 8002962:	1b52      	subs	r2, r2, r5
 8002964:	d41f      	bmi.n	80029a6 <_malloc_r+0xd6>
 8002966:	2a0b      	cmp	r2, #11
 8002968:	d917      	bls.n	800299a <_malloc_r+0xca>
 800296a:	1961      	adds	r1, r4, r5
 800296c:	42a3      	cmp	r3, r4
 800296e:	6025      	str	r5, [r4, #0]
 8002970:	bf18      	it	ne
 8002972:	6059      	strne	r1, [r3, #4]
 8002974:	6863      	ldr	r3, [r4, #4]
 8002976:	bf08      	it	eq
 8002978:	f8c8 1000 	streq.w	r1, [r8]
 800297c:	5162      	str	r2, [r4, r5]
 800297e:	604b      	str	r3, [r1, #4]
 8002980:	4638      	mov	r0, r7
 8002982:	f104 060b 	add.w	r6, r4, #11
 8002986:	f000 f829 	bl	80029dc <__malloc_unlock>
 800298a:	f026 0607 	bic.w	r6, r6, #7
 800298e:	1d23      	adds	r3, r4, #4
 8002990:	1af2      	subs	r2, r6, r3
 8002992:	d0ae      	beq.n	80028f2 <_malloc_r+0x22>
 8002994:	1b9b      	subs	r3, r3, r6
 8002996:	50a3      	str	r3, [r4, r2]
 8002998:	e7ab      	b.n	80028f2 <_malloc_r+0x22>
 800299a:	42a3      	cmp	r3, r4
 800299c:	6862      	ldr	r2, [r4, #4]
 800299e:	d1dd      	bne.n	800295c <_malloc_r+0x8c>
 80029a0:	f8c8 2000 	str.w	r2, [r8]
 80029a4:	e7ec      	b.n	8002980 <_malloc_r+0xb0>
 80029a6:	4623      	mov	r3, r4
 80029a8:	6864      	ldr	r4, [r4, #4]
 80029aa:	e7ac      	b.n	8002906 <_malloc_r+0x36>
 80029ac:	4634      	mov	r4, r6
 80029ae:	6876      	ldr	r6, [r6, #4]
 80029b0:	e7b4      	b.n	800291c <_malloc_r+0x4c>
 80029b2:	4613      	mov	r3, r2
 80029b4:	e7cc      	b.n	8002950 <_malloc_r+0x80>
 80029b6:	230c      	movs	r3, #12
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	4638      	mov	r0, r7
 80029bc:	f000 f80e 	bl	80029dc <__malloc_unlock>
 80029c0:	e797      	b.n	80028f2 <_malloc_r+0x22>
 80029c2:	6025      	str	r5, [r4, #0]
 80029c4:	e7dc      	b.n	8002980 <_malloc_r+0xb0>
 80029c6:	605b      	str	r3, [r3, #4]
 80029c8:	deff      	udf	#255	; 0xff
 80029ca:	bf00      	nop
 80029cc:	24000394 	.word	0x24000394

080029d0 <__malloc_lock>:
 80029d0:	4801      	ldr	r0, [pc, #4]	; (80029d8 <__malloc_lock+0x8>)
 80029d2:	f7ff b912 	b.w	8001bfa <__retarget_lock_acquire_recursive>
 80029d6:	bf00      	nop
 80029d8:	24000390 	.word	0x24000390

080029dc <__malloc_unlock>:
 80029dc:	4801      	ldr	r0, [pc, #4]	; (80029e4 <__malloc_unlock+0x8>)
 80029de:	f7ff b90d 	b.w	8001bfc <__retarget_lock_release_recursive>
 80029e2:	bf00      	nop
 80029e4:	24000390 	.word	0x24000390

080029e8 <_Balloc>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	69c6      	ldr	r6, [r0, #28]
 80029ec:	4604      	mov	r4, r0
 80029ee:	460d      	mov	r5, r1
 80029f0:	b976      	cbnz	r6, 8002a10 <_Balloc+0x28>
 80029f2:	2010      	movs	r0, #16
 80029f4:	f7ff ff44 	bl	8002880 <malloc>
 80029f8:	4602      	mov	r2, r0
 80029fa:	61e0      	str	r0, [r4, #28]
 80029fc:	b920      	cbnz	r0, 8002a08 <_Balloc+0x20>
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <_Balloc+0x78>)
 8002a00:	4818      	ldr	r0, [pc, #96]	; (8002a64 <_Balloc+0x7c>)
 8002a02:	216b      	movs	r1, #107	; 0x6b
 8002a04:	f000 fdaa 	bl	800355c <__assert_func>
 8002a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002a0c:	6006      	str	r6, [r0, #0]
 8002a0e:	60c6      	str	r6, [r0, #12]
 8002a10:	69e6      	ldr	r6, [r4, #28]
 8002a12:	68f3      	ldr	r3, [r6, #12]
 8002a14:	b183      	cbz	r3, 8002a38 <_Balloc+0x50>
 8002a16:	69e3      	ldr	r3, [r4, #28]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002a1e:	b9b8      	cbnz	r0, 8002a50 <_Balloc+0x68>
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f605 	lsl.w	r6, r1, r5
 8002a26:	1d72      	adds	r2, r6, #5
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f000 fdb4 	bl	8003598 <_calloc_r>
 8002a30:	b160      	cbz	r0, 8002a4c <_Balloc+0x64>
 8002a32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8002a36:	e00e      	b.n	8002a56 <_Balloc+0x6e>
 8002a38:	2221      	movs	r2, #33	; 0x21
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 fdab 	bl	8003598 <_calloc_r>
 8002a42:	69e3      	ldr	r3, [r4, #28]
 8002a44:	60f0      	str	r0, [r6, #12]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e4      	bne.n	8002a16 <_Balloc+0x2e>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	6802      	ldr	r2, [r0, #0]
 8002a52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8002a56:	2300      	movs	r3, #0
 8002a58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002a5c:	e7f7      	b.n	8002a4e <_Balloc+0x66>
 8002a5e:	bf00      	nop
 8002a60:	08003cb9 	.word	0x08003cb9
 8002a64:	08003d39 	.word	0x08003d39

08002a68 <_Bfree>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	69c6      	ldr	r6, [r0, #28]
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	b976      	cbnz	r6, 8002a90 <_Bfree+0x28>
 8002a72:	2010      	movs	r0, #16
 8002a74:	f7ff ff04 	bl	8002880 <malloc>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	61e8      	str	r0, [r5, #28]
 8002a7c:	b920      	cbnz	r0, 8002a88 <_Bfree+0x20>
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_Bfree+0x3c>)
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <_Bfree+0x40>)
 8002a82:	218f      	movs	r1, #143	; 0x8f
 8002a84:	f000 fd6a 	bl	800355c <__assert_func>
 8002a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002a8c:	6006      	str	r6, [r0, #0]
 8002a8e:	60c6      	str	r6, [r0, #12]
 8002a90:	b13c      	cbz	r4, 8002aa2 <_Bfree+0x3a>
 8002a92:	69eb      	ldr	r3, [r5, #28]
 8002a94:	6862      	ldr	r2, [r4, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a9c:	6021      	str	r1, [r4, #0]
 8002a9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	08003cb9 	.word	0x08003cb9
 8002aa8:	08003d39 	.word	0x08003d39

08002aac <__multadd>:
 8002aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab0:	690d      	ldr	r5, [r1, #16]
 8002ab2:	4607      	mov	r7, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	461e      	mov	r6, r3
 8002ab8:	f101 0c14 	add.w	ip, r1, #20
 8002abc:	2000      	movs	r0, #0
 8002abe:	f8dc 3000 	ldr.w	r3, [ip]
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	fb02 6101 	mla	r1, r2, r1, r6
 8002ac8:	0c1e      	lsrs	r6, r3, #16
 8002aca:	0c0b      	lsrs	r3, r1, #16
 8002acc:	fb02 3306 	mla	r3, r2, r6, r3
 8002ad0:	b289      	uxth	r1, r1
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8002ad8:	4285      	cmp	r5, r0
 8002ada:	f84c 1b04 	str.w	r1, [ip], #4
 8002ade:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8002ae2:	dcec      	bgt.n	8002abe <__multadd+0x12>
 8002ae4:	b30e      	cbz	r6, 8002b2a <__multadd+0x7e>
 8002ae6:	68a3      	ldr	r3, [r4, #8]
 8002ae8:	42ab      	cmp	r3, r5
 8002aea:	dc19      	bgt.n	8002b20 <__multadd+0x74>
 8002aec:	6861      	ldr	r1, [r4, #4]
 8002aee:	4638      	mov	r0, r7
 8002af0:	3101      	adds	r1, #1
 8002af2:	f7ff ff79 	bl	80029e8 <_Balloc>
 8002af6:	4680      	mov	r8, r0
 8002af8:	b928      	cbnz	r0, 8002b06 <__multadd+0x5a>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__multadd+0x84>)
 8002afe:	480d      	ldr	r0, [pc, #52]	; (8002b34 <__multadd+0x88>)
 8002b00:	21ba      	movs	r1, #186	; 0xba
 8002b02:	f000 fd2b 	bl	800355c <__assert_func>
 8002b06:	6922      	ldr	r2, [r4, #16]
 8002b08:	3202      	adds	r2, #2
 8002b0a:	f104 010c 	add.w	r1, r4, #12
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	300c      	adds	r0, #12
 8002b12:	f000 fd15 	bl	8003540 <memcpy>
 8002b16:	4621      	mov	r1, r4
 8002b18:	4638      	mov	r0, r7
 8002b1a:	f7ff ffa5 	bl	8002a68 <_Bfree>
 8002b1e:	4644      	mov	r4, r8
 8002b20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002b24:	3501      	adds	r5, #1
 8002b26:	615e      	str	r6, [r3, #20]
 8002b28:	6125      	str	r5, [r4, #16]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b30:	08003d28 	.word	0x08003d28
 8002b34:	08003d39 	.word	0x08003d39

08002b38 <__hi0bits>:
 8002b38:	0c03      	lsrs	r3, r0, #16
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	b9d3      	cbnz	r3, 8002b74 <__hi0bits+0x3c>
 8002b3e:	0400      	lsls	r0, r0, #16
 8002b40:	2310      	movs	r3, #16
 8002b42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8002b46:	bf04      	itt	eq
 8002b48:	0200      	lsleq	r0, r0, #8
 8002b4a:	3308      	addeq	r3, #8
 8002b4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8002b50:	bf04      	itt	eq
 8002b52:	0100      	lsleq	r0, r0, #4
 8002b54:	3304      	addeq	r3, #4
 8002b56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8002b5a:	bf04      	itt	eq
 8002b5c:	0080      	lsleq	r0, r0, #2
 8002b5e:	3302      	addeq	r3, #2
 8002b60:	2800      	cmp	r0, #0
 8002b62:	db05      	blt.n	8002b70 <__hi0bits+0x38>
 8002b64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002b68:	f103 0301 	add.w	r3, r3, #1
 8002b6c:	bf08      	it	eq
 8002b6e:	2320      	moveq	r3, #32
 8002b70:	4618      	mov	r0, r3
 8002b72:	4770      	bx	lr
 8002b74:	2300      	movs	r3, #0
 8002b76:	e7e4      	b.n	8002b42 <__hi0bits+0xa>

08002b78 <__lo0bits>:
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	f013 0207 	ands.w	r2, r3, #7
 8002b7e:	d00c      	beq.n	8002b9a <__lo0bits+0x22>
 8002b80:	07d9      	lsls	r1, r3, #31
 8002b82:	d422      	bmi.n	8002bca <__lo0bits+0x52>
 8002b84:	079a      	lsls	r2, r3, #30
 8002b86:	bf49      	itett	mi
 8002b88:	085b      	lsrmi	r3, r3, #1
 8002b8a:	089b      	lsrpl	r3, r3, #2
 8002b8c:	6003      	strmi	r3, [r0, #0]
 8002b8e:	2201      	movmi	r2, #1
 8002b90:	bf5c      	itt	pl
 8002b92:	6003      	strpl	r3, [r0, #0]
 8002b94:	2202      	movpl	r2, #2
 8002b96:	4610      	mov	r0, r2
 8002b98:	4770      	bx	lr
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	b909      	cbnz	r1, 8002ba2 <__lo0bits+0x2a>
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	b2d9      	uxtb	r1, r3
 8002ba4:	b909      	cbnz	r1, 8002baa <__lo0bits+0x32>
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	0719      	lsls	r1, r3, #28
 8002bac:	bf04      	itt	eq
 8002bae:	091b      	lsreq	r3, r3, #4
 8002bb0:	3204      	addeq	r2, #4
 8002bb2:	0799      	lsls	r1, r3, #30
 8002bb4:	bf04      	itt	eq
 8002bb6:	089b      	lsreq	r3, r3, #2
 8002bb8:	3202      	addeq	r2, #2
 8002bba:	07d9      	lsls	r1, r3, #31
 8002bbc:	d403      	bmi.n	8002bc6 <__lo0bits+0x4e>
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	f102 0201 	add.w	r2, r2, #1
 8002bc4:	d003      	beq.n	8002bce <__lo0bits+0x56>
 8002bc6:	6003      	str	r3, [r0, #0]
 8002bc8:	e7e5      	b.n	8002b96 <__lo0bits+0x1e>
 8002bca:	2200      	movs	r2, #0
 8002bcc:	e7e3      	b.n	8002b96 <__lo0bits+0x1e>
 8002bce:	2220      	movs	r2, #32
 8002bd0:	e7e1      	b.n	8002b96 <__lo0bits+0x1e>
	...

08002bd4 <__i2b>:
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f7ff ff05 	bl	80029e8 <_Balloc>
 8002bde:	4602      	mov	r2, r0
 8002be0:	b928      	cbnz	r0, 8002bee <__i2b+0x1a>
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <__i2b+0x24>)
 8002be4:	4805      	ldr	r0, [pc, #20]	; (8002bfc <__i2b+0x28>)
 8002be6:	f240 1145 	movw	r1, #325	; 0x145
 8002bea:	f000 fcb7 	bl	800355c <__assert_func>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	6144      	str	r4, [r0, #20]
 8002bf2:	6103      	str	r3, [r0, #16]
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	bf00      	nop
 8002bf8:	08003d28 	.word	0x08003d28
 8002bfc:	08003d39 	.word	0x08003d39

08002c00 <__multiply>:
 8002c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c04:	4691      	mov	r9, r2
 8002c06:	690a      	ldr	r2, [r1, #16]
 8002c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	bfb8      	it	lt
 8002c10:	460b      	movlt	r3, r1
 8002c12:	460c      	mov	r4, r1
 8002c14:	bfbc      	itt	lt
 8002c16:	464c      	movlt	r4, r9
 8002c18:	4699      	movlt	r9, r3
 8002c1a:	6927      	ldr	r7, [r4, #16]
 8002c1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8002c20:	68a3      	ldr	r3, [r4, #8]
 8002c22:	6861      	ldr	r1, [r4, #4]
 8002c24:	eb07 060a 	add.w	r6, r7, sl
 8002c28:	42b3      	cmp	r3, r6
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	bfb8      	it	lt
 8002c2e:	3101      	addlt	r1, #1
 8002c30:	f7ff feda 	bl	80029e8 <_Balloc>
 8002c34:	b930      	cbnz	r0, 8002c44 <__multiply+0x44>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <__multiply+0x14c>)
 8002c3a:	4845      	ldr	r0, [pc, #276]	; (8002d50 <__multiply+0x150>)
 8002c3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8002c40:	f000 fc8c 	bl	800355c <__assert_func>
 8002c44:	f100 0514 	add.w	r5, r0, #20
 8002c48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4543      	cmp	r3, r8
 8002c52:	d321      	bcc.n	8002c98 <__multiply+0x98>
 8002c54:	f104 0314 	add.w	r3, r4, #20
 8002c58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8002c5c:	f109 0314 	add.w	r3, r9, #20
 8002c60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8002c64:	9202      	str	r2, [sp, #8]
 8002c66:	1b3a      	subs	r2, r7, r4
 8002c68:	3a15      	subs	r2, #21
 8002c6a:	f022 0203 	bic.w	r2, r2, #3
 8002c6e:	3204      	adds	r2, #4
 8002c70:	f104 0115 	add.w	r1, r4, #21
 8002c74:	428f      	cmp	r7, r1
 8002c76:	bf38      	it	cc
 8002c78:	2204      	movcc	r2, #4
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	9a02      	ldr	r2, [sp, #8]
 8002c7e:	9303      	str	r3, [sp, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d80c      	bhi.n	8002c9e <__multiply+0x9e>
 8002c84:	2e00      	cmp	r6, #0
 8002c86:	dd03      	ble.n	8002c90 <__multiply+0x90>
 8002c88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d05b      	beq.n	8002d48 <__multiply+0x148>
 8002c90:	6106      	str	r6, [r0, #16]
 8002c92:	b005      	add	sp, #20
 8002c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c98:	f843 2b04 	str.w	r2, [r3], #4
 8002c9c:	e7d8      	b.n	8002c50 <__multiply+0x50>
 8002c9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8002ca2:	f1ba 0f00 	cmp.w	sl, #0
 8002ca6:	d024      	beq.n	8002cf2 <__multiply+0xf2>
 8002ca8:	f104 0e14 	add.w	lr, r4, #20
 8002cac:	46a9      	mov	r9, r5
 8002cae:	f04f 0c00 	mov.w	ip, #0
 8002cb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8002cb6:	f8d9 1000 	ldr.w	r1, [r9]
 8002cba:	fa1f fb82 	uxth.w	fp, r2
 8002cbe:	b289      	uxth	r1, r1
 8002cc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8002cc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8002cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8002ccc:	4461      	add	r1, ip
 8002cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8002cd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8002cd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8002cda:	b289      	uxth	r1, r1
 8002cdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002ce0:	4577      	cmp	r7, lr
 8002ce2:	f849 1b04 	str.w	r1, [r9], #4
 8002ce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8002cea:	d8e2      	bhi.n	8002cb2 <__multiply+0xb2>
 8002cec:	9a01      	ldr	r2, [sp, #4]
 8002cee:	f845 c002 	str.w	ip, [r5, r2]
 8002cf2:	9a03      	ldr	r2, [sp, #12]
 8002cf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	f1b9 0f00 	cmp.w	r9, #0
 8002cfe:	d021      	beq.n	8002d44 <__multiply+0x144>
 8002d00:	6829      	ldr	r1, [r5, #0]
 8002d02:	f104 0c14 	add.w	ip, r4, #20
 8002d06:	46ae      	mov	lr, r5
 8002d08:	f04f 0a00 	mov.w	sl, #0
 8002d0c:	f8bc b000 	ldrh.w	fp, [ip]
 8002d10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8002d14:	fb09 220b 	mla	r2, r9, fp, r2
 8002d18:	4452      	add	r2, sl
 8002d1a:	b289      	uxth	r1, r1
 8002d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002d20:	f84e 1b04 	str.w	r1, [lr], #4
 8002d24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8002d28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002d2c:	f8be 1000 	ldrh.w	r1, [lr]
 8002d30:	fb09 110a 	mla	r1, r9, sl, r1
 8002d34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8002d38:	4567      	cmp	r7, ip
 8002d3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002d3e:	d8e5      	bhi.n	8002d0c <__multiply+0x10c>
 8002d40:	9a01      	ldr	r2, [sp, #4]
 8002d42:	50a9      	str	r1, [r5, r2]
 8002d44:	3504      	adds	r5, #4
 8002d46:	e799      	b.n	8002c7c <__multiply+0x7c>
 8002d48:	3e01      	subs	r6, #1
 8002d4a:	e79b      	b.n	8002c84 <__multiply+0x84>
 8002d4c:	08003d28 	.word	0x08003d28
 8002d50:	08003d39 	.word	0x08003d39

08002d54 <__pow5mult>:
 8002d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d58:	4615      	mov	r5, r2
 8002d5a:	f012 0203 	ands.w	r2, r2, #3
 8002d5e:	4606      	mov	r6, r0
 8002d60:	460f      	mov	r7, r1
 8002d62:	d007      	beq.n	8002d74 <__pow5mult+0x20>
 8002d64:	4c25      	ldr	r4, [pc, #148]	; (8002dfc <__pow5mult+0xa8>)
 8002d66:	3a01      	subs	r2, #1
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002d6e:	f7ff fe9d 	bl	8002aac <__multadd>
 8002d72:	4607      	mov	r7, r0
 8002d74:	10ad      	asrs	r5, r5, #2
 8002d76:	d03d      	beq.n	8002df4 <__pow5mult+0xa0>
 8002d78:	69f4      	ldr	r4, [r6, #28]
 8002d7a:	b97c      	cbnz	r4, 8002d9c <__pow5mult+0x48>
 8002d7c:	2010      	movs	r0, #16
 8002d7e:	f7ff fd7f 	bl	8002880 <malloc>
 8002d82:	4602      	mov	r2, r0
 8002d84:	61f0      	str	r0, [r6, #28]
 8002d86:	b928      	cbnz	r0, 8002d94 <__pow5mult+0x40>
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <__pow5mult+0xac>)
 8002d8a:	481e      	ldr	r0, [pc, #120]	; (8002e04 <__pow5mult+0xb0>)
 8002d8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002d90:	f000 fbe4 	bl	800355c <__assert_func>
 8002d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002d98:	6004      	str	r4, [r0, #0]
 8002d9a:	60c4      	str	r4, [r0, #12]
 8002d9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8002da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8002da4:	b94c      	cbnz	r4, 8002dba <__pow5mult+0x66>
 8002da6:	f240 2171 	movw	r1, #625	; 0x271
 8002daa:	4630      	mov	r0, r6
 8002dac:	f7ff ff12 	bl	8002bd4 <__i2b>
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8002db6:	4604      	mov	r4, r0
 8002db8:	6003      	str	r3, [r0, #0]
 8002dba:	f04f 0900 	mov.w	r9, #0
 8002dbe:	07eb      	lsls	r3, r5, #31
 8002dc0:	d50a      	bpl.n	8002dd8 <__pow5mult+0x84>
 8002dc2:	4639      	mov	r1, r7
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	f7ff ff1a 	bl	8002c00 <__multiply>
 8002dcc:	4639      	mov	r1, r7
 8002dce:	4680      	mov	r8, r0
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f7ff fe49 	bl	8002a68 <_Bfree>
 8002dd6:	4647      	mov	r7, r8
 8002dd8:	106d      	asrs	r5, r5, #1
 8002dda:	d00b      	beq.n	8002df4 <__pow5mult+0xa0>
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	b938      	cbnz	r0, 8002df0 <__pow5mult+0x9c>
 8002de0:	4622      	mov	r2, r4
 8002de2:	4621      	mov	r1, r4
 8002de4:	4630      	mov	r0, r6
 8002de6:	f7ff ff0b 	bl	8002c00 <__multiply>
 8002dea:	6020      	str	r0, [r4, #0]
 8002dec:	f8c0 9000 	str.w	r9, [r0]
 8002df0:	4604      	mov	r4, r0
 8002df2:	e7e4      	b.n	8002dbe <__pow5mult+0x6a>
 8002df4:	4638      	mov	r0, r7
 8002df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	bf00      	nop
 8002dfc:	08003e88 	.word	0x08003e88
 8002e00:	08003cb9 	.word	0x08003cb9
 8002e04:	08003d39 	.word	0x08003d39

08002e08 <__lshift>:
 8002e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	6849      	ldr	r1, [r1, #4]
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8002e16:	68a3      	ldr	r3, [r4, #8]
 8002e18:	4607      	mov	r7, r0
 8002e1a:	4691      	mov	r9, r2
 8002e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8002e20:	f108 0601 	add.w	r6, r8, #1
 8002e24:	42b3      	cmp	r3, r6
 8002e26:	db0b      	blt.n	8002e40 <__lshift+0x38>
 8002e28:	4638      	mov	r0, r7
 8002e2a:	f7ff fddd 	bl	80029e8 <_Balloc>
 8002e2e:	4605      	mov	r5, r0
 8002e30:	b948      	cbnz	r0, 8002e46 <__lshift+0x3e>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <__lshift+0xd0>)
 8002e36:	4829      	ldr	r0, [pc, #164]	; (8002edc <__lshift+0xd4>)
 8002e38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002e3c:	f000 fb8e 	bl	800355c <__assert_func>
 8002e40:	3101      	adds	r1, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	e7ee      	b.n	8002e24 <__lshift+0x1c>
 8002e46:	2300      	movs	r3, #0
 8002e48:	f100 0114 	add.w	r1, r0, #20
 8002e4c:	f100 0210 	add.w	r2, r0, #16
 8002e50:	4618      	mov	r0, r3
 8002e52:	4553      	cmp	r3, sl
 8002e54:	db33      	blt.n	8002ebe <__lshift+0xb6>
 8002e56:	6920      	ldr	r0, [r4, #16]
 8002e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002e5c:	f104 0314 	add.w	r3, r4, #20
 8002e60:	f019 091f 	ands.w	r9, r9, #31
 8002e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002e68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8002e6c:	d02b      	beq.n	8002ec6 <__lshift+0xbe>
 8002e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8002e72:	468a      	mov	sl, r1
 8002e74:	2200      	movs	r2, #0
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	fa00 f009 	lsl.w	r0, r0, r9
 8002e7c:	4310      	orrs	r0, r2
 8002e7e:	f84a 0b04 	str.w	r0, [sl], #4
 8002e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e86:	459c      	cmp	ip, r3
 8002e88:	fa22 f20e 	lsr.w	r2, r2, lr
 8002e8c:	d8f3      	bhi.n	8002e76 <__lshift+0x6e>
 8002e8e:	ebac 0304 	sub.w	r3, ip, r4
 8002e92:	3b15      	subs	r3, #21
 8002e94:	f023 0303 	bic.w	r3, r3, #3
 8002e98:	3304      	adds	r3, #4
 8002e9a:	f104 0015 	add.w	r0, r4, #21
 8002e9e:	4584      	cmp	ip, r0
 8002ea0:	bf38      	it	cc
 8002ea2:	2304      	movcc	r3, #4
 8002ea4:	50ca      	str	r2, [r1, r3]
 8002ea6:	b10a      	cbz	r2, 8002eac <__lshift+0xa4>
 8002ea8:	f108 0602 	add.w	r6, r8, #2
 8002eac:	3e01      	subs	r6, #1
 8002eae:	4638      	mov	r0, r7
 8002eb0:	612e      	str	r6, [r5, #16]
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	f7ff fdd8 	bl	8002a68 <_Bfree>
 8002eb8:	4628      	mov	r0, r5
 8002eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ebe:	f842 0f04 	str.w	r0, [r2, #4]!
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	e7c5      	b.n	8002e52 <__lshift+0x4a>
 8002ec6:	3904      	subs	r1, #4
 8002ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ecc:	f841 2f04 	str.w	r2, [r1, #4]!
 8002ed0:	459c      	cmp	ip, r3
 8002ed2:	d8f9      	bhi.n	8002ec8 <__lshift+0xc0>
 8002ed4:	e7ea      	b.n	8002eac <__lshift+0xa4>
 8002ed6:	bf00      	nop
 8002ed8:	08003d28 	.word	0x08003d28
 8002edc:	08003d39 	.word	0x08003d39

08002ee0 <__mcmp>:
 8002ee0:	b530      	push	{r4, r5, lr}
 8002ee2:	6902      	ldr	r2, [r0, #16]
 8002ee4:	690c      	ldr	r4, [r1, #16]
 8002ee6:	1b12      	subs	r2, r2, r4
 8002ee8:	d10e      	bne.n	8002f08 <__mcmp+0x28>
 8002eea:	f100 0314 	add.w	r3, r0, #20
 8002eee:	3114      	adds	r1, #20
 8002ef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8002ef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002ef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8002efc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8002f00:	42a5      	cmp	r5, r4
 8002f02:	d003      	beq.n	8002f0c <__mcmp+0x2c>
 8002f04:	d305      	bcc.n	8002f12 <__mcmp+0x32>
 8002f06:	2201      	movs	r2, #1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	bd30      	pop	{r4, r5, pc}
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	d3f3      	bcc.n	8002ef8 <__mcmp+0x18>
 8002f10:	e7fa      	b.n	8002f08 <__mcmp+0x28>
 8002f12:	f04f 32ff 	mov.w	r2, #4294967295
 8002f16:	e7f7      	b.n	8002f08 <__mcmp+0x28>

08002f18 <__mdiff>:
 8002f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	460c      	mov	r4, r1
 8002f1e:	4606      	mov	r6, r0
 8002f20:	4611      	mov	r1, r2
 8002f22:	4620      	mov	r0, r4
 8002f24:	4690      	mov	r8, r2
 8002f26:	f7ff ffdb 	bl	8002ee0 <__mcmp>
 8002f2a:	1e05      	subs	r5, r0, #0
 8002f2c:	d110      	bne.n	8002f50 <__mdiff+0x38>
 8002f2e:	4629      	mov	r1, r5
 8002f30:	4630      	mov	r0, r6
 8002f32:	f7ff fd59 	bl	80029e8 <_Balloc>
 8002f36:	b930      	cbnz	r0, 8002f46 <__mdiff+0x2e>
 8002f38:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <__mdiff+0x10c>)
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f240 2137 	movw	r1, #567	; 0x237
 8002f40:	4839      	ldr	r0, [pc, #228]	; (8003028 <__mdiff+0x110>)
 8002f42:	f000 fb0b 	bl	800355c <__assert_func>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8002f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f50:	bfa4      	itt	ge
 8002f52:	4643      	movge	r3, r8
 8002f54:	46a0      	movge	r8, r4
 8002f56:	4630      	mov	r0, r6
 8002f58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002f5c:	bfa6      	itte	ge
 8002f5e:	461c      	movge	r4, r3
 8002f60:	2500      	movge	r5, #0
 8002f62:	2501      	movlt	r5, #1
 8002f64:	f7ff fd40 	bl	80029e8 <_Balloc>
 8002f68:	b920      	cbnz	r0, 8002f74 <__mdiff+0x5c>
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <__mdiff+0x10c>)
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f240 2145 	movw	r1, #581	; 0x245
 8002f72:	e7e5      	b.n	8002f40 <__mdiff+0x28>
 8002f74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8002f78:	6926      	ldr	r6, [r4, #16]
 8002f7a:	60c5      	str	r5, [r0, #12]
 8002f7c:	f104 0914 	add.w	r9, r4, #20
 8002f80:	f108 0514 	add.w	r5, r8, #20
 8002f84:	f100 0e14 	add.w	lr, r0, #20
 8002f88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8002f8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002f90:	f108 0210 	add.w	r2, r8, #16
 8002f94:	46f2      	mov	sl, lr
 8002f96:	2100      	movs	r1, #0
 8002f98:	f859 3b04 	ldr.w	r3, [r9], #4
 8002f9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8002fa0:	fa11 f88b 	uxtah	r8, r1, fp
 8002fa4:	b299      	uxth	r1, r3
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	eba8 0801 	sub.w	r8, r8, r1
 8002fac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8002fb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8002fb4:	fa1f f888 	uxth.w	r8, r8
 8002fb8:	1419      	asrs	r1, r3, #16
 8002fba:	454e      	cmp	r6, r9
 8002fbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8002fc0:	f84a 3b04 	str.w	r3, [sl], #4
 8002fc4:	d8e8      	bhi.n	8002f98 <__mdiff+0x80>
 8002fc6:	1b33      	subs	r3, r6, r4
 8002fc8:	3b15      	subs	r3, #21
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	3304      	adds	r3, #4
 8002fd0:	3415      	adds	r4, #21
 8002fd2:	42a6      	cmp	r6, r4
 8002fd4:	bf38      	it	cc
 8002fd6:	2304      	movcc	r3, #4
 8002fd8:	441d      	add	r5, r3
 8002fda:	4473      	add	r3, lr
 8002fdc:	469e      	mov	lr, r3
 8002fde:	462e      	mov	r6, r5
 8002fe0:	4566      	cmp	r6, ip
 8002fe2:	d30e      	bcc.n	8003002 <__mdiff+0xea>
 8002fe4:	f10c 0203 	add.w	r2, ip, #3
 8002fe8:	1b52      	subs	r2, r2, r5
 8002fea:	f022 0203 	bic.w	r2, r2, #3
 8002fee:	3d03      	subs	r5, #3
 8002ff0:	45ac      	cmp	ip, r5
 8002ff2:	bf38      	it	cc
 8002ff4:	2200      	movcc	r2, #0
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002ffc:	b17a      	cbz	r2, 800301e <__mdiff+0x106>
 8002ffe:	6107      	str	r7, [r0, #16]
 8003000:	e7a4      	b.n	8002f4c <__mdiff+0x34>
 8003002:	f856 8b04 	ldr.w	r8, [r6], #4
 8003006:	fa11 f288 	uxtah	r2, r1, r8
 800300a:	1414      	asrs	r4, r2, #16
 800300c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003010:	b292      	uxth	r2, r2
 8003012:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003016:	f84e 2b04 	str.w	r2, [lr], #4
 800301a:	1421      	asrs	r1, r4, #16
 800301c:	e7e0      	b.n	8002fe0 <__mdiff+0xc8>
 800301e:	3f01      	subs	r7, #1
 8003020:	e7ea      	b.n	8002ff8 <__mdiff+0xe0>
 8003022:	bf00      	nop
 8003024:	08003d28 	.word	0x08003d28
 8003028:	08003d39 	.word	0x08003d39

0800302c <__d2b>:
 800302c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003030:	460f      	mov	r7, r1
 8003032:	2101      	movs	r1, #1
 8003034:	ec59 8b10 	vmov	r8, r9, d0
 8003038:	4616      	mov	r6, r2
 800303a:	f7ff fcd5 	bl	80029e8 <_Balloc>
 800303e:	4604      	mov	r4, r0
 8003040:	b930      	cbnz	r0, 8003050 <__d2b+0x24>
 8003042:	4602      	mov	r2, r0
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <__d2b+0xac>)
 8003046:	4825      	ldr	r0, [pc, #148]	; (80030dc <__d2b+0xb0>)
 8003048:	f240 310f 	movw	r1, #783	; 0x30f
 800304c:	f000 fa86 	bl	800355c <__assert_func>
 8003050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003058:	bb2d      	cbnz	r5, 80030a6 <__d2b+0x7a>
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	f1b8 0300 	subs.w	r3, r8, #0
 8003060:	d026      	beq.n	80030b0 <__d2b+0x84>
 8003062:	4668      	mov	r0, sp
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f7ff fd87 	bl	8002b78 <__lo0bits>
 800306a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800306e:	b1e8      	cbz	r0, 80030ac <__d2b+0x80>
 8003070:	f1c0 0320 	rsb	r3, r0, #32
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	430b      	orrs	r3, r1
 800307a:	40c2      	lsrs	r2, r0
 800307c:	6163      	str	r3, [r4, #20]
 800307e:	9201      	str	r2, [sp, #4]
 8003080:	9b01      	ldr	r3, [sp, #4]
 8003082:	61a3      	str	r3, [r4, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2202      	movne	r2, #2
 800308a:	2201      	moveq	r2, #1
 800308c:	6122      	str	r2, [r4, #16]
 800308e:	b1bd      	cbz	r5, 80030c0 <__d2b+0x94>
 8003090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003094:	4405      	add	r5, r0
 8003096:	603d      	str	r5, [r7, #0]
 8003098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800309c:	6030      	str	r0, [r6, #0]
 800309e:	4620      	mov	r0, r4
 80030a0:	b003      	add	sp, #12
 80030a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030aa:	e7d6      	b.n	800305a <__d2b+0x2e>
 80030ac:	6161      	str	r1, [r4, #20]
 80030ae:	e7e7      	b.n	8003080 <__d2b+0x54>
 80030b0:	a801      	add	r0, sp, #4
 80030b2:	f7ff fd61 	bl	8002b78 <__lo0bits>
 80030b6:	9b01      	ldr	r3, [sp, #4]
 80030b8:	6163      	str	r3, [r4, #20]
 80030ba:	3020      	adds	r0, #32
 80030bc:	2201      	movs	r2, #1
 80030be:	e7e5      	b.n	800308c <__d2b+0x60>
 80030c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80030c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80030c8:	6038      	str	r0, [r7, #0]
 80030ca:	6918      	ldr	r0, [r3, #16]
 80030cc:	f7ff fd34 	bl	8002b38 <__hi0bits>
 80030d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80030d4:	e7e2      	b.n	800309c <__d2b+0x70>
 80030d6:	bf00      	nop
 80030d8:	08003d28 	.word	0x08003d28
 80030dc:	08003d39 	.word	0x08003d39

080030e0 <__ssputs_r>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	688e      	ldr	r6, [r1, #8]
 80030e6:	461f      	mov	r7, r3
 80030e8:	42be      	cmp	r6, r7
 80030ea:	680b      	ldr	r3, [r1, #0]
 80030ec:	4682      	mov	sl, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	4690      	mov	r8, r2
 80030f2:	d82c      	bhi.n	800314e <__ssputs_r+0x6e>
 80030f4:	898a      	ldrh	r2, [r1, #12]
 80030f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030fa:	d026      	beq.n	800314a <__ssputs_r+0x6a>
 80030fc:	6965      	ldr	r5, [r4, #20]
 80030fe:	6909      	ldr	r1, [r1, #16]
 8003100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003104:	eba3 0901 	sub.w	r9, r3, r1
 8003108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800310c:	1c7b      	adds	r3, r7, #1
 800310e:	444b      	add	r3, r9
 8003110:	106d      	asrs	r5, r5, #1
 8003112:	429d      	cmp	r5, r3
 8003114:	bf38      	it	cc
 8003116:	461d      	movcc	r5, r3
 8003118:	0553      	lsls	r3, r2, #21
 800311a:	d527      	bpl.n	800316c <__ssputs_r+0x8c>
 800311c:	4629      	mov	r1, r5
 800311e:	f7ff fbd7 	bl	80028d0 <_malloc_r>
 8003122:	4606      	mov	r6, r0
 8003124:	b360      	cbz	r0, 8003180 <__ssputs_r+0xa0>
 8003126:	6921      	ldr	r1, [r4, #16]
 8003128:	464a      	mov	r2, r9
 800312a:	f000 fa09 	bl	8003540 <memcpy>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	81a3      	strh	r3, [r4, #12]
 800313a:	6126      	str	r6, [r4, #16]
 800313c:	6165      	str	r5, [r4, #20]
 800313e:	444e      	add	r6, r9
 8003140:	eba5 0509 	sub.w	r5, r5, r9
 8003144:	6026      	str	r6, [r4, #0]
 8003146:	60a5      	str	r5, [r4, #8]
 8003148:	463e      	mov	r6, r7
 800314a:	42be      	cmp	r6, r7
 800314c:	d900      	bls.n	8003150 <__ssputs_r+0x70>
 800314e:	463e      	mov	r6, r7
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	4632      	mov	r2, r6
 8003154:	4641      	mov	r1, r8
 8003156:	f000 f9c9 	bl	80034ec <memmove>
 800315a:	68a3      	ldr	r3, [r4, #8]
 800315c:	1b9b      	subs	r3, r3, r6
 800315e:	60a3      	str	r3, [r4, #8]
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	4433      	add	r3, r6
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	2000      	movs	r0, #0
 8003168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316c:	462a      	mov	r2, r5
 800316e:	f000 fa3b 	bl	80035e8 <_realloc_r>
 8003172:	4606      	mov	r6, r0
 8003174:	2800      	cmp	r0, #0
 8003176:	d1e0      	bne.n	800313a <__ssputs_r+0x5a>
 8003178:	6921      	ldr	r1, [r4, #16]
 800317a:	4650      	mov	r0, sl
 800317c:	f7ff fb34 	bl	80027e8 <_free_r>
 8003180:	230c      	movs	r3, #12
 8003182:	f8ca 3000 	str.w	r3, [sl]
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	e7e9      	b.n	8003168 <__ssputs_r+0x88>

08003194 <_svfiprintf_r>:
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	4698      	mov	r8, r3
 800319a:	898b      	ldrh	r3, [r1, #12]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	b09d      	sub	sp, #116	; 0x74
 80031a0:	4607      	mov	r7, r0
 80031a2:	460d      	mov	r5, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	d50e      	bpl.n	80031c6 <_svfiprintf_r+0x32>
 80031a8:	690b      	ldr	r3, [r1, #16]
 80031aa:	b963      	cbnz	r3, 80031c6 <_svfiprintf_r+0x32>
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f7ff fb8f 	bl	80028d0 <_malloc_r>
 80031b2:	6028      	str	r0, [r5, #0]
 80031b4:	6128      	str	r0, [r5, #16]
 80031b6:	b920      	cbnz	r0, 80031c2 <_svfiprintf_r+0x2e>
 80031b8:	230c      	movs	r3, #12
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	e0d0      	b.n	8003364 <_svfiprintf_r+0x1d0>
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	616b      	str	r3, [r5, #20]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9309      	str	r3, [sp, #36]	; 0x24
 80031ca:	2320      	movs	r3, #32
 80031cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80031d4:	2330      	movs	r3, #48	; 0x30
 80031d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800337c <_svfiprintf_r+0x1e8>
 80031da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031de:	f04f 0901 	mov.w	r9, #1
 80031e2:	4623      	mov	r3, r4
 80031e4:	469a      	mov	sl, r3
 80031e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ea:	b10a      	cbz	r2, 80031f0 <_svfiprintf_r+0x5c>
 80031ec:	2a25      	cmp	r2, #37	; 0x25
 80031ee:	d1f9      	bne.n	80031e4 <_svfiprintf_r+0x50>
 80031f0:	ebba 0b04 	subs.w	fp, sl, r4
 80031f4:	d00b      	beq.n	800320e <_svfiprintf_r+0x7a>
 80031f6:	465b      	mov	r3, fp
 80031f8:	4622      	mov	r2, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	4638      	mov	r0, r7
 80031fe:	f7ff ff6f 	bl	80030e0 <__ssputs_r>
 8003202:	3001      	adds	r0, #1
 8003204:	f000 80a9 	beq.w	800335a <_svfiprintf_r+0x1c6>
 8003208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800320a:	445a      	add	r2, fp
 800320c:	9209      	str	r2, [sp, #36]	; 0x24
 800320e:	f89a 3000 	ldrb.w	r3, [sl]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a1 	beq.w	800335a <_svfiprintf_r+0x1c6>
 8003218:	2300      	movs	r3, #0
 800321a:	f04f 32ff 	mov.w	r2, #4294967295
 800321e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003222:	f10a 0a01 	add.w	sl, sl, #1
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	9307      	str	r3, [sp, #28]
 800322a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800322e:	931a      	str	r3, [sp, #104]	; 0x68
 8003230:	4654      	mov	r4, sl
 8003232:	2205      	movs	r2, #5
 8003234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003238:	4850      	ldr	r0, [pc, #320]	; (800337c <_svfiprintf_r+0x1e8>)
 800323a:	f7fd f851 	bl	80002e0 <memchr>
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	b9d8      	cbnz	r0, 800327a <_svfiprintf_r+0xe6>
 8003242:	06d0      	lsls	r0, r2, #27
 8003244:	bf44      	itt	mi
 8003246:	2320      	movmi	r3, #32
 8003248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324c:	0711      	lsls	r1, r2, #28
 800324e:	bf44      	itt	mi
 8003250:	232b      	movmi	r3, #43	; 0x2b
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003256:	f89a 3000 	ldrb.w	r3, [sl]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d015      	beq.n	800328a <_svfiprintf_r+0xf6>
 800325e:	9a07      	ldr	r2, [sp, #28]
 8003260:	4654      	mov	r4, sl
 8003262:	2000      	movs	r0, #0
 8003264:	f04f 0c0a 	mov.w	ip, #10
 8003268:	4621      	mov	r1, r4
 800326a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800326e:	3b30      	subs	r3, #48	; 0x30
 8003270:	2b09      	cmp	r3, #9
 8003272:	d94d      	bls.n	8003310 <_svfiprintf_r+0x17c>
 8003274:	b1b0      	cbz	r0, 80032a4 <_svfiprintf_r+0x110>
 8003276:	9207      	str	r2, [sp, #28]
 8003278:	e014      	b.n	80032a4 <_svfiprintf_r+0x110>
 800327a:	eba0 0308 	sub.w	r3, r0, r8
 800327e:	fa09 f303 	lsl.w	r3, r9, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	9304      	str	r3, [sp, #16]
 8003286:	46a2      	mov	sl, r4
 8003288:	e7d2      	b.n	8003230 <_svfiprintf_r+0x9c>
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9103      	str	r1, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfbb      	ittet	lt
 8003296:	425b      	neglt	r3, r3
 8003298:	f042 0202 	orrlt.w	r2, r2, #2
 800329c:	9307      	strge	r3, [sp, #28]
 800329e:	9307      	strlt	r3, [sp, #28]
 80032a0:	bfb8      	it	lt
 80032a2:	9204      	strlt	r2, [sp, #16]
 80032a4:	7823      	ldrb	r3, [r4, #0]
 80032a6:	2b2e      	cmp	r3, #46	; 0x2e
 80032a8:	d10c      	bne.n	80032c4 <_svfiprintf_r+0x130>
 80032aa:	7863      	ldrb	r3, [r4, #1]
 80032ac:	2b2a      	cmp	r3, #42	; 0x2a
 80032ae:	d134      	bne.n	800331a <_svfiprintf_r+0x186>
 80032b0:	9b03      	ldr	r3, [sp, #12]
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	9203      	str	r2, [sp, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bfb8      	it	lt
 80032bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80032c0:	3402      	adds	r4, #2
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800338c <_svfiprintf_r+0x1f8>
 80032c8:	7821      	ldrb	r1, [r4, #0]
 80032ca:	2203      	movs	r2, #3
 80032cc:	4650      	mov	r0, sl
 80032ce:	f7fd f807 	bl	80002e0 <memchr>
 80032d2:	b138      	cbz	r0, 80032e4 <_svfiprintf_r+0x150>
 80032d4:	9b04      	ldr	r3, [sp, #16]
 80032d6:	eba0 000a 	sub.w	r0, r0, sl
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	4082      	lsls	r2, r0
 80032de:	4313      	orrs	r3, r2
 80032e0:	3401      	adds	r4, #1
 80032e2:	9304      	str	r3, [sp, #16]
 80032e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <_svfiprintf_r+0x1ec>)
 80032ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032ee:	2206      	movs	r2, #6
 80032f0:	f7fc fff6 	bl	80002e0 <memchr>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d038      	beq.n	800336a <_svfiprintf_r+0x1d6>
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <_svfiprintf_r+0x1f0>)
 80032fa:	bb1b      	cbnz	r3, 8003344 <_svfiprintf_r+0x1b0>
 80032fc:	9b03      	ldr	r3, [sp, #12]
 80032fe:	3307      	adds	r3, #7
 8003300:	f023 0307 	bic.w	r3, r3, #7
 8003304:	3308      	adds	r3, #8
 8003306:	9303      	str	r3, [sp, #12]
 8003308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800330a:	4433      	add	r3, r6
 800330c:	9309      	str	r3, [sp, #36]	; 0x24
 800330e:	e768      	b.n	80031e2 <_svfiprintf_r+0x4e>
 8003310:	fb0c 3202 	mla	r2, ip, r2, r3
 8003314:	460c      	mov	r4, r1
 8003316:	2001      	movs	r0, #1
 8003318:	e7a6      	b.n	8003268 <_svfiprintf_r+0xd4>
 800331a:	2300      	movs	r3, #0
 800331c:	3401      	adds	r4, #1
 800331e:	9305      	str	r3, [sp, #20]
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 0c0a 	mov.w	ip, #10
 8003326:	4620      	mov	r0, r4
 8003328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800332c:	3a30      	subs	r2, #48	; 0x30
 800332e:	2a09      	cmp	r2, #9
 8003330:	d903      	bls.n	800333a <_svfiprintf_r+0x1a6>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0c6      	beq.n	80032c4 <_svfiprintf_r+0x130>
 8003336:	9105      	str	r1, [sp, #20]
 8003338:	e7c4      	b.n	80032c4 <_svfiprintf_r+0x130>
 800333a:	fb0c 2101 	mla	r1, ip, r1, r2
 800333e:	4604      	mov	r4, r0
 8003340:	2301      	movs	r3, #1
 8003342:	e7f0      	b.n	8003326 <_svfiprintf_r+0x192>
 8003344:	ab03      	add	r3, sp, #12
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	462a      	mov	r2, r5
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <_svfiprintf_r+0x1f4>)
 800334c:	a904      	add	r1, sp, #16
 800334e:	4638      	mov	r0, r7
 8003350:	f7fd ff06 	bl	8001160 <_printf_float>
 8003354:	1c42      	adds	r2, r0, #1
 8003356:	4606      	mov	r6, r0
 8003358:	d1d6      	bne.n	8003308 <_svfiprintf_r+0x174>
 800335a:	89ab      	ldrh	r3, [r5, #12]
 800335c:	065b      	lsls	r3, r3, #25
 800335e:	f53f af2d 	bmi.w	80031bc <_svfiprintf_r+0x28>
 8003362:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003364:	b01d      	add	sp, #116	; 0x74
 8003366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336a:	ab03      	add	r3, sp, #12
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	462a      	mov	r2, r5
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <_svfiprintf_r+0x1f4>)
 8003372:	a904      	add	r1, sp, #16
 8003374:	4638      	mov	r0, r7
 8003376:	f7fe f97b 	bl	8001670 <_printf_i>
 800337a:	e7eb      	b.n	8003354 <_svfiprintf_r+0x1c0>
 800337c:	08003e94 	.word	0x08003e94
 8003380:	08003e9e 	.word	0x08003e9e
 8003384:	08001161 	.word	0x08001161
 8003388:	080030e1 	.word	0x080030e1
 800338c:	08003e9a 	.word	0x08003e9a

08003390 <__sflush_r>:
 8003390:	898a      	ldrh	r2, [r1, #12]
 8003392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003396:	4605      	mov	r5, r0
 8003398:	0710      	lsls	r0, r2, #28
 800339a:	460c      	mov	r4, r1
 800339c:	d458      	bmi.n	8003450 <__sflush_r+0xc0>
 800339e:	684b      	ldr	r3, [r1, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dc05      	bgt.n	80033b0 <__sflush_r+0x20>
 80033a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	dc02      	bgt.n	80033b0 <__sflush_r+0x20>
 80033aa:	2000      	movs	r0, #0
 80033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033b2:	2e00      	cmp	r6, #0
 80033b4:	d0f9      	beq.n	80033aa <__sflush_r+0x1a>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033bc:	682f      	ldr	r7, [r5, #0]
 80033be:	6a21      	ldr	r1, [r4, #32]
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	d032      	beq.n	800342a <__sflush_r+0x9a>
 80033c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	075a      	lsls	r2, r3, #29
 80033ca:	d505      	bpl.n	80033d8 <__sflush_r+0x48>
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	1ac0      	subs	r0, r0, r3
 80033d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033d2:	b10b      	cbz	r3, 80033d8 <__sflush_r+0x48>
 80033d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033d6:	1ac0      	subs	r0, r0, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	4602      	mov	r2, r0
 80033dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033de:	6a21      	ldr	r1, [r4, #32]
 80033e0:	4628      	mov	r0, r5
 80033e2:	47b0      	blx	r6
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	d106      	bne.n	80033f8 <__sflush_r+0x68>
 80033ea:	6829      	ldr	r1, [r5, #0]
 80033ec:	291d      	cmp	r1, #29
 80033ee:	d82b      	bhi.n	8003448 <__sflush_r+0xb8>
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <__sflush_r+0x108>)
 80033f2:	410a      	asrs	r2, r1
 80033f4:	07d6      	lsls	r6, r2, #31
 80033f6:	d427      	bmi.n	8003448 <__sflush_r+0xb8>
 80033f8:	2200      	movs	r2, #0
 80033fa:	6062      	str	r2, [r4, #4]
 80033fc:	04d9      	lsls	r1, r3, #19
 80033fe:	6922      	ldr	r2, [r4, #16]
 8003400:	6022      	str	r2, [r4, #0]
 8003402:	d504      	bpl.n	800340e <__sflush_r+0x7e>
 8003404:	1c42      	adds	r2, r0, #1
 8003406:	d101      	bne.n	800340c <__sflush_r+0x7c>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	b903      	cbnz	r3, 800340e <__sflush_r+0x7e>
 800340c:	6560      	str	r0, [r4, #84]	; 0x54
 800340e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003410:	602f      	str	r7, [r5, #0]
 8003412:	2900      	cmp	r1, #0
 8003414:	d0c9      	beq.n	80033aa <__sflush_r+0x1a>
 8003416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800341a:	4299      	cmp	r1, r3
 800341c:	d002      	beq.n	8003424 <__sflush_r+0x94>
 800341e:	4628      	mov	r0, r5
 8003420:	f7ff f9e2 	bl	80027e8 <_free_r>
 8003424:	2000      	movs	r0, #0
 8003426:	6360      	str	r0, [r4, #52]	; 0x34
 8003428:	e7c0      	b.n	80033ac <__sflush_r+0x1c>
 800342a:	2301      	movs	r3, #1
 800342c:	4628      	mov	r0, r5
 800342e:	47b0      	blx	r6
 8003430:	1c41      	adds	r1, r0, #1
 8003432:	d1c8      	bne.n	80033c6 <__sflush_r+0x36>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0c5      	beq.n	80033c6 <__sflush_r+0x36>
 800343a:	2b1d      	cmp	r3, #29
 800343c:	d001      	beq.n	8003442 <__sflush_r+0xb2>
 800343e:	2b16      	cmp	r3, #22
 8003440:	d101      	bne.n	8003446 <__sflush_r+0xb6>
 8003442:	602f      	str	r7, [r5, #0]
 8003444:	e7b1      	b.n	80033aa <__sflush_r+0x1a>
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	e7ad      	b.n	80033ac <__sflush_r+0x1c>
 8003450:	690f      	ldr	r7, [r1, #16]
 8003452:	2f00      	cmp	r7, #0
 8003454:	d0a9      	beq.n	80033aa <__sflush_r+0x1a>
 8003456:	0793      	lsls	r3, r2, #30
 8003458:	680e      	ldr	r6, [r1, #0]
 800345a:	bf08      	it	eq
 800345c:	694b      	ldreq	r3, [r1, #20]
 800345e:	600f      	str	r7, [r1, #0]
 8003460:	bf18      	it	ne
 8003462:	2300      	movne	r3, #0
 8003464:	eba6 0807 	sub.w	r8, r6, r7
 8003468:	608b      	str	r3, [r1, #8]
 800346a:	f1b8 0f00 	cmp.w	r8, #0
 800346e:	dd9c      	ble.n	80033aa <__sflush_r+0x1a>
 8003470:	6a21      	ldr	r1, [r4, #32]
 8003472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003474:	4643      	mov	r3, r8
 8003476:	463a      	mov	r2, r7
 8003478:	4628      	mov	r0, r5
 800347a:	47b0      	blx	r6
 800347c:	2800      	cmp	r0, #0
 800347e:	dc06      	bgt.n	800348e <__sflush_r+0xfe>
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e78e      	b.n	80033ac <__sflush_r+0x1c>
 800348e:	4407      	add	r7, r0
 8003490:	eba8 0800 	sub.w	r8, r8, r0
 8003494:	e7e9      	b.n	800346a <__sflush_r+0xda>
 8003496:	bf00      	nop
 8003498:	dfbffffe 	.word	0xdfbffffe

0800349c <_fflush_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	4605      	mov	r5, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	b913      	cbnz	r3, 80034ac <_fflush_r+0x10>
 80034a6:	2500      	movs	r5, #0
 80034a8:	4628      	mov	r0, r5
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	b118      	cbz	r0, 80034b6 <_fflush_r+0x1a>
 80034ae:	6a03      	ldr	r3, [r0, #32]
 80034b0:	b90b      	cbnz	r3, 80034b6 <_fflush_r+0x1a>
 80034b2:	f7fe fa8b 	bl	80019cc <__sinit>
 80034b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f3      	beq.n	80034a6 <_fflush_r+0xa>
 80034be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034c0:	07d0      	lsls	r0, r2, #31
 80034c2:	d404      	bmi.n	80034ce <_fflush_r+0x32>
 80034c4:	0599      	lsls	r1, r3, #22
 80034c6:	d402      	bmi.n	80034ce <_fflush_r+0x32>
 80034c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ca:	f7fe fb96 	bl	8001bfa <__retarget_lock_acquire_recursive>
 80034ce:	4628      	mov	r0, r5
 80034d0:	4621      	mov	r1, r4
 80034d2:	f7ff ff5d 	bl	8003390 <__sflush_r>
 80034d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034d8:	07da      	lsls	r2, r3, #31
 80034da:	4605      	mov	r5, r0
 80034dc:	d4e4      	bmi.n	80034a8 <_fflush_r+0xc>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	d4e1      	bmi.n	80034a8 <_fflush_r+0xc>
 80034e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e6:	f7fe fb89 	bl	8001bfc <__retarget_lock_release_recursive>
 80034ea:	e7dd      	b.n	80034a8 <_fflush_r+0xc>

080034ec <memmove>:
 80034ec:	4288      	cmp	r0, r1
 80034ee:	b510      	push	{r4, lr}
 80034f0:	eb01 0402 	add.w	r4, r1, r2
 80034f4:	d902      	bls.n	80034fc <memmove+0x10>
 80034f6:	4284      	cmp	r4, r0
 80034f8:	4623      	mov	r3, r4
 80034fa:	d807      	bhi.n	800350c <memmove+0x20>
 80034fc:	1e43      	subs	r3, r0, #1
 80034fe:	42a1      	cmp	r1, r4
 8003500:	d008      	beq.n	8003514 <memmove+0x28>
 8003502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800350a:	e7f8      	b.n	80034fe <memmove+0x12>
 800350c:	4402      	add	r2, r0
 800350e:	4601      	mov	r1, r0
 8003510:	428a      	cmp	r2, r1
 8003512:	d100      	bne.n	8003516 <memmove+0x2a>
 8003514:	bd10      	pop	{r4, pc}
 8003516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800351a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800351e:	e7f7      	b.n	8003510 <memmove+0x24>

08003520 <_sbrk_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	4d06      	ldr	r5, [pc, #24]	; (800353c <_sbrk_r+0x1c>)
 8003524:	2300      	movs	r3, #0
 8003526:	4604      	mov	r4, r0
 8003528:	4608      	mov	r0, r1
 800352a:	602b      	str	r3, [r5, #0]
 800352c:	f7fd fd26 	bl	8000f7c <_sbrk>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d102      	bne.n	800353a <_sbrk_r+0x1a>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	b103      	cbz	r3, 800353a <_sbrk_r+0x1a>
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	2400038c 	.word	0x2400038c

08003540 <memcpy>:
 8003540:	440a      	add	r2, r1
 8003542:	4291      	cmp	r1, r2
 8003544:	f100 33ff 	add.w	r3, r0, #4294967295
 8003548:	d100      	bne.n	800354c <memcpy+0xc>
 800354a:	4770      	bx	lr
 800354c:	b510      	push	{r4, lr}
 800354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003556:	4291      	cmp	r1, r2
 8003558:	d1f9      	bne.n	800354e <memcpy+0xe>
 800355a:	bd10      	pop	{r4, pc}

0800355c <__assert_func>:
 800355c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800355e:	4614      	mov	r4, r2
 8003560:	461a      	mov	r2, r3
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <__assert_func+0x2c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4605      	mov	r5, r0
 8003568:	68d8      	ldr	r0, [r3, #12]
 800356a:	b14c      	cbz	r4, 8003580 <__assert_func+0x24>
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <__assert_func+0x30>)
 800356e:	9100      	str	r1, [sp, #0]
 8003570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003574:	4906      	ldr	r1, [pc, #24]	; (8003590 <__assert_func+0x34>)
 8003576:	462b      	mov	r3, r5
 8003578:	f000 f872 	bl	8003660 <fiprintf>
 800357c:	f000 f882 	bl	8003684 <abort>
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <__assert_func+0x38>)
 8003582:	461c      	mov	r4, r3
 8003584:	e7f3      	b.n	800356e <__assert_func+0x12>
 8003586:	bf00      	nop
 8003588:	24000098 	.word	0x24000098
 800358c:	08003eaf 	.word	0x08003eaf
 8003590:	08003ebc 	.word	0x08003ebc
 8003594:	08003eea 	.word	0x08003eea

08003598 <_calloc_r>:
 8003598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800359a:	fba1 2402 	umull	r2, r4, r1, r2
 800359e:	b94c      	cbnz	r4, 80035b4 <_calloc_r+0x1c>
 80035a0:	4611      	mov	r1, r2
 80035a2:	9201      	str	r2, [sp, #4]
 80035a4:	f7ff f994 	bl	80028d0 <_malloc_r>
 80035a8:	9a01      	ldr	r2, [sp, #4]
 80035aa:	4605      	mov	r5, r0
 80035ac:	b930      	cbnz	r0, 80035bc <_calloc_r+0x24>
 80035ae:	4628      	mov	r0, r5
 80035b0:	b003      	add	sp, #12
 80035b2:	bd30      	pop	{r4, r5, pc}
 80035b4:	220c      	movs	r2, #12
 80035b6:	6002      	str	r2, [r0, #0]
 80035b8:	2500      	movs	r5, #0
 80035ba:	e7f8      	b.n	80035ae <_calloc_r+0x16>
 80035bc:	4621      	mov	r1, r4
 80035be:	f7fe fa9e 	bl	8001afe <memset>
 80035c2:	e7f4      	b.n	80035ae <_calloc_r+0x16>

080035c4 <__ascii_mbtowc>:
 80035c4:	b082      	sub	sp, #8
 80035c6:	b901      	cbnz	r1, 80035ca <__ascii_mbtowc+0x6>
 80035c8:	a901      	add	r1, sp, #4
 80035ca:	b142      	cbz	r2, 80035de <__ascii_mbtowc+0x1a>
 80035cc:	b14b      	cbz	r3, 80035e2 <__ascii_mbtowc+0x1e>
 80035ce:	7813      	ldrb	r3, [r2, #0]
 80035d0:	600b      	str	r3, [r1, #0]
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	1e10      	subs	r0, r2, #0
 80035d6:	bf18      	it	ne
 80035d8:	2001      	movne	r0, #1
 80035da:	b002      	add	sp, #8
 80035dc:	4770      	bx	lr
 80035de:	4610      	mov	r0, r2
 80035e0:	e7fb      	b.n	80035da <__ascii_mbtowc+0x16>
 80035e2:	f06f 0001 	mvn.w	r0, #1
 80035e6:	e7f8      	b.n	80035da <__ascii_mbtowc+0x16>

080035e8 <_realloc_r>:
 80035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ec:	4680      	mov	r8, r0
 80035ee:	4614      	mov	r4, r2
 80035f0:	460e      	mov	r6, r1
 80035f2:	b921      	cbnz	r1, 80035fe <_realloc_r+0x16>
 80035f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035f8:	4611      	mov	r1, r2
 80035fa:	f7ff b969 	b.w	80028d0 <_malloc_r>
 80035fe:	b92a      	cbnz	r2, 800360c <_realloc_r+0x24>
 8003600:	f7ff f8f2 	bl	80027e8 <_free_r>
 8003604:	4625      	mov	r5, r4
 8003606:	4628      	mov	r0, r5
 8003608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800360c:	f000 f841 	bl	8003692 <_malloc_usable_size_r>
 8003610:	4284      	cmp	r4, r0
 8003612:	4607      	mov	r7, r0
 8003614:	d802      	bhi.n	800361c <_realloc_r+0x34>
 8003616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800361a:	d812      	bhi.n	8003642 <_realloc_r+0x5a>
 800361c:	4621      	mov	r1, r4
 800361e:	4640      	mov	r0, r8
 8003620:	f7ff f956 	bl	80028d0 <_malloc_r>
 8003624:	4605      	mov	r5, r0
 8003626:	2800      	cmp	r0, #0
 8003628:	d0ed      	beq.n	8003606 <_realloc_r+0x1e>
 800362a:	42bc      	cmp	r4, r7
 800362c:	4622      	mov	r2, r4
 800362e:	4631      	mov	r1, r6
 8003630:	bf28      	it	cs
 8003632:	463a      	movcs	r2, r7
 8003634:	f7ff ff84 	bl	8003540 <memcpy>
 8003638:	4631      	mov	r1, r6
 800363a:	4640      	mov	r0, r8
 800363c:	f7ff f8d4 	bl	80027e8 <_free_r>
 8003640:	e7e1      	b.n	8003606 <_realloc_r+0x1e>
 8003642:	4635      	mov	r5, r6
 8003644:	e7df      	b.n	8003606 <_realloc_r+0x1e>

08003646 <__ascii_wctomb>:
 8003646:	b149      	cbz	r1, 800365c <__ascii_wctomb+0x16>
 8003648:	2aff      	cmp	r2, #255	; 0xff
 800364a:	bf85      	ittet	hi
 800364c:	238a      	movhi	r3, #138	; 0x8a
 800364e:	6003      	strhi	r3, [r0, #0]
 8003650:	700a      	strbls	r2, [r1, #0]
 8003652:	f04f 30ff 	movhi.w	r0, #4294967295
 8003656:	bf98      	it	ls
 8003658:	2001      	movls	r0, #1
 800365a:	4770      	bx	lr
 800365c:	4608      	mov	r0, r1
 800365e:	4770      	bx	lr

08003660 <fiprintf>:
 8003660:	b40e      	push	{r1, r2, r3}
 8003662:	b503      	push	{r0, r1, lr}
 8003664:	4601      	mov	r1, r0
 8003666:	ab03      	add	r3, sp, #12
 8003668:	4805      	ldr	r0, [pc, #20]	; (8003680 <fiprintf+0x20>)
 800366a:	f853 2b04 	ldr.w	r2, [r3], #4
 800366e:	6800      	ldr	r0, [r0, #0]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	f000 f83f 	bl	80036f4 <_vfiprintf_r>
 8003676:	b002      	add	sp, #8
 8003678:	f85d eb04 	ldr.w	lr, [sp], #4
 800367c:	b003      	add	sp, #12
 800367e:	4770      	bx	lr
 8003680:	24000098 	.word	0x24000098

08003684 <abort>:
 8003684:	b508      	push	{r3, lr}
 8003686:	2006      	movs	r0, #6
 8003688:	f000 fa0c 	bl	8003aa4 <raise>
 800368c:	2001      	movs	r0, #1
 800368e:	f7fd fbfd 	bl	8000e8c <_exit>

08003692 <_malloc_usable_size_r>:
 8003692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003696:	1f18      	subs	r0, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	bfbc      	itt	lt
 800369c:	580b      	ldrlt	r3, [r1, r0]
 800369e:	18c0      	addlt	r0, r0, r3
 80036a0:	4770      	bx	lr

080036a2 <__sfputc_r>:
 80036a2:	6893      	ldr	r3, [r2, #8]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	b410      	push	{r4}
 80036aa:	6093      	str	r3, [r2, #8]
 80036ac:	da08      	bge.n	80036c0 <__sfputc_r+0x1e>
 80036ae:	6994      	ldr	r4, [r2, #24]
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	db01      	blt.n	80036b8 <__sfputc_r+0x16>
 80036b4:	290a      	cmp	r1, #10
 80036b6:	d103      	bne.n	80036c0 <__sfputc_r+0x1e>
 80036b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036bc:	f000 b934 	b.w	8003928 <__swbuf_r>
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	1c58      	adds	r0, r3, #1
 80036c4:	6010      	str	r0, [r2, #0]
 80036c6:	7019      	strb	r1, [r3, #0]
 80036c8:	4608      	mov	r0, r1
 80036ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <__sfputs_r>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	4606      	mov	r6, r0
 80036d4:	460f      	mov	r7, r1
 80036d6:	4614      	mov	r4, r2
 80036d8:	18d5      	adds	r5, r2, r3
 80036da:	42ac      	cmp	r4, r5
 80036dc:	d101      	bne.n	80036e2 <__sfputs_r+0x12>
 80036de:	2000      	movs	r0, #0
 80036e0:	e007      	b.n	80036f2 <__sfputs_r+0x22>
 80036e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e6:	463a      	mov	r2, r7
 80036e8:	4630      	mov	r0, r6
 80036ea:	f7ff ffda 	bl	80036a2 <__sfputc_r>
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	d1f3      	bne.n	80036da <__sfputs_r+0xa>
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036f4 <_vfiprintf_r>:
 80036f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f8:	460d      	mov	r5, r1
 80036fa:	b09d      	sub	sp, #116	; 0x74
 80036fc:	4614      	mov	r4, r2
 80036fe:	4698      	mov	r8, r3
 8003700:	4606      	mov	r6, r0
 8003702:	b118      	cbz	r0, 800370c <_vfiprintf_r+0x18>
 8003704:	6a03      	ldr	r3, [r0, #32]
 8003706:	b90b      	cbnz	r3, 800370c <_vfiprintf_r+0x18>
 8003708:	f7fe f960 	bl	80019cc <__sinit>
 800370c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800370e:	07d9      	lsls	r1, r3, #31
 8003710:	d405      	bmi.n	800371e <_vfiprintf_r+0x2a>
 8003712:	89ab      	ldrh	r3, [r5, #12]
 8003714:	059a      	lsls	r2, r3, #22
 8003716:	d402      	bmi.n	800371e <_vfiprintf_r+0x2a>
 8003718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800371a:	f7fe fa6e 	bl	8001bfa <__retarget_lock_acquire_recursive>
 800371e:	89ab      	ldrh	r3, [r5, #12]
 8003720:	071b      	lsls	r3, r3, #28
 8003722:	d501      	bpl.n	8003728 <_vfiprintf_r+0x34>
 8003724:	692b      	ldr	r3, [r5, #16]
 8003726:	b99b      	cbnz	r3, 8003750 <_vfiprintf_r+0x5c>
 8003728:	4629      	mov	r1, r5
 800372a:	4630      	mov	r0, r6
 800372c:	f000 f93a 	bl	80039a4 <__swsetup_r>
 8003730:	b170      	cbz	r0, 8003750 <_vfiprintf_r+0x5c>
 8003732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003734:	07dc      	lsls	r4, r3, #31
 8003736:	d504      	bpl.n	8003742 <_vfiprintf_r+0x4e>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	b01d      	add	sp, #116	; 0x74
 800373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	0598      	lsls	r0, r3, #22
 8003746:	d4f7      	bmi.n	8003738 <_vfiprintf_r+0x44>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7fe fa57 	bl	8001bfc <__retarget_lock_release_recursive>
 800374e:	e7f3      	b.n	8003738 <_vfiprintf_r+0x44>
 8003750:	2300      	movs	r3, #0
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	2320      	movs	r3, #32
 8003756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800375a:	f8cd 800c 	str.w	r8, [sp, #12]
 800375e:	2330      	movs	r3, #48	; 0x30
 8003760:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003914 <_vfiprintf_r+0x220>
 8003764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003768:	f04f 0901 	mov.w	r9, #1
 800376c:	4623      	mov	r3, r4
 800376e:	469a      	mov	sl, r3
 8003770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003774:	b10a      	cbz	r2, 800377a <_vfiprintf_r+0x86>
 8003776:	2a25      	cmp	r2, #37	; 0x25
 8003778:	d1f9      	bne.n	800376e <_vfiprintf_r+0x7a>
 800377a:	ebba 0b04 	subs.w	fp, sl, r4
 800377e:	d00b      	beq.n	8003798 <_vfiprintf_r+0xa4>
 8003780:	465b      	mov	r3, fp
 8003782:	4622      	mov	r2, r4
 8003784:	4629      	mov	r1, r5
 8003786:	4630      	mov	r0, r6
 8003788:	f7ff ffa2 	bl	80036d0 <__sfputs_r>
 800378c:	3001      	adds	r0, #1
 800378e:	f000 80a9 	beq.w	80038e4 <_vfiprintf_r+0x1f0>
 8003792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003794:	445a      	add	r2, fp
 8003796:	9209      	str	r2, [sp, #36]	; 0x24
 8003798:	f89a 3000 	ldrb.w	r3, [sl]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a1 	beq.w	80038e4 <_vfiprintf_r+0x1f0>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ac:	f10a 0a01 	add.w	sl, sl, #1
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	9307      	str	r3, [sp, #28]
 80037b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037b8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ba:	4654      	mov	r4, sl
 80037bc:	2205      	movs	r2, #5
 80037be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c2:	4854      	ldr	r0, [pc, #336]	; (8003914 <_vfiprintf_r+0x220>)
 80037c4:	f7fc fd8c 	bl	80002e0 <memchr>
 80037c8:	9a04      	ldr	r2, [sp, #16]
 80037ca:	b9d8      	cbnz	r0, 8003804 <_vfiprintf_r+0x110>
 80037cc:	06d1      	lsls	r1, r2, #27
 80037ce:	bf44      	itt	mi
 80037d0:	2320      	movmi	r3, #32
 80037d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d6:	0713      	lsls	r3, r2, #28
 80037d8:	bf44      	itt	mi
 80037da:	232b      	movmi	r3, #43	; 0x2b
 80037dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037e0:	f89a 3000 	ldrb.w	r3, [sl]
 80037e4:	2b2a      	cmp	r3, #42	; 0x2a
 80037e6:	d015      	beq.n	8003814 <_vfiprintf_r+0x120>
 80037e8:	9a07      	ldr	r2, [sp, #28]
 80037ea:	4654      	mov	r4, sl
 80037ec:	2000      	movs	r0, #0
 80037ee:	f04f 0c0a 	mov.w	ip, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037f8:	3b30      	subs	r3, #48	; 0x30
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d94d      	bls.n	800389a <_vfiprintf_r+0x1a6>
 80037fe:	b1b0      	cbz	r0, 800382e <_vfiprintf_r+0x13a>
 8003800:	9207      	str	r2, [sp, #28]
 8003802:	e014      	b.n	800382e <_vfiprintf_r+0x13a>
 8003804:	eba0 0308 	sub.w	r3, r0, r8
 8003808:	fa09 f303 	lsl.w	r3, r9, r3
 800380c:	4313      	orrs	r3, r2
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	46a2      	mov	sl, r4
 8003812:	e7d2      	b.n	80037ba <_vfiprintf_r+0xc6>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	1d19      	adds	r1, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9103      	str	r1, [sp, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	bfbb      	ittet	lt
 8003820:	425b      	neglt	r3, r3
 8003822:	f042 0202 	orrlt.w	r2, r2, #2
 8003826:	9307      	strge	r3, [sp, #28]
 8003828:	9307      	strlt	r3, [sp, #28]
 800382a:	bfb8      	it	lt
 800382c:	9204      	strlt	r2, [sp, #16]
 800382e:	7823      	ldrb	r3, [r4, #0]
 8003830:	2b2e      	cmp	r3, #46	; 0x2e
 8003832:	d10c      	bne.n	800384e <_vfiprintf_r+0x15a>
 8003834:	7863      	ldrb	r3, [r4, #1]
 8003836:	2b2a      	cmp	r3, #42	; 0x2a
 8003838:	d134      	bne.n	80038a4 <_vfiprintf_r+0x1b0>
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	9203      	str	r2, [sp, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfb8      	it	lt
 8003846:	f04f 33ff 	movlt.w	r3, #4294967295
 800384a:	3402      	adds	r4, #2
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003924 <_vfiprintf_r+0x230>
 8003852:	7821      	ldrb	r1, [r4, #0]
 8003854:	2203      	movs	r2, #3
 8003856:	4650      	mov	r0, sl
 8003858:	f7fc fd42 	bl	80002e0 <memchr>
 800385c:	b138      	cbz	r0, 800386e <_vfiprintf_r+0x17a>
 800385e:	9b04      	ldr	r3, [sp, #16]
 8003860:	eba0 000a 	sub.w	r0, r0, sl
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	4082      	lsls	r2, r0
 8003868:	4313      	orrs	r3, r2
 800386a:	3401      	adds	r4, #1
 800386c:	9304      	str	r3, [sp, #16]
 800386e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003872:	4829      	ldr	r0, [pc, #164]	; (8003918 <_vfiprintf_r+0x224>)
 8003874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003878:	2206      	movs	r2, #6
 800387a:	f7fc fd31 	bl	80002e0 <memchr>
 800387e:	2800      	cmp	r0, #0
 8003880:	d03f      	beq.n	8003902 <_vfiprintf_r+0x20e>
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <_vfiprintf_r+0x228>)
 8003884:	bb1b      	cbnz	r3, 80038ce <_vfiprintf_r+0x1da>
 8003886:	9b03      	ldr	r3, [sp, #12]
 8003888:	3307      	adds	r3, #7
 800388a:	f023 0307 	bic.w	r3, r3, #7
 800388e:	3308      	adds	r3, #8
 8003890:	9303      	str	r3, [sp, #12]
 8003892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003894:	443b      	add	r3, r7
 8003896:	9309      	str	r3, [sp, #36]	; 0x24
 8003898:	e768      	b.n	800376c <_vfiprintf_r+0x78>
 800389a:	fb0c 3202 	mla	r2, ip, r2, r3
 800389e:	460c      	mov	r4, r1
 80038a0:	2001      	movs	r0, #1
 80038a2:	e7a6      	b.n	80037f2 <_vfiprintf_r+0xfe>
 80038a4:	2300      	movs	r3, #0
 80038a6:	3401      	adds	r4, #1
 80038a8:	9305      	str	r3, [sp, #20]
 80038aa:	4619      	mov	r1, r3
 80038ac:	f04f 0c0a 	mov.w	ip, #10
 80038b0:	4620      	mov	r0, r4
 80038b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038b6:	3a30      	subs	r2, #48	; 0x30
 80038b8:	2a09      	cmp	r2, #9
 80038ba:	d903      	bls.n	80038c4 <_vfiprintf_r+0x1d0>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0c6      	beq.n	800384e <_vfiprintf_r+0x15a>
 80038c0:	9105      	str	r1, [sp, #20]
 80038c2:	e7c4      	b.n	800384e <_vfiprintf_r+0x15a>
 80038c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80038c8:	4604      	mov	r4, r0
 80038ca:	2301      	movs	r3, #1
 80038cc:	e7f0      	b.n	80038b0 <_vfiprintf_r+0x1bc>
 80038ce:	ab03      	add	r3, sp, #12
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	462a      	mov	r2, r5
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <_vfiprintf_r+0x22c>)
 80038d6:	a904      	add	r1, sp, #16
 80038d8:	4630      	mov	r0, r6
 80038da:	f7fd fc41 	bl	8001160 <_printf_float>
 80038de:	4607      	mov	r7, r0
 80038e0:	1c78      	adds	r0, r7, #1
 80038e2:	d1d6      	bne.n	8003892 <_vfiprintf_r+0x19e>
 80038e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e6:	07d9      	lsls	r1, r3, #31
 80038e8:	d405      	bmi.n	80038f6 <_vfiprintf_r+0x202>
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	059a      	lsls	r2, r3, #22
 80038ee:	d402      	bmi.n	80038f6 <_vfiprintf_r+0x202>
 80038f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f2:	f7fe f983 	bl	8001bfc <__retarget_lock_release_recursive>
 80038f6:	89ab      	ldrh	r3, [r5, #12]
 80038f8:	065b      	lsls	r3, r3, #25
 80038fa:	f53f af1d 	bmi.w	8003738 <_vfiprintf_r+0x44>
 80038fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003900:	e71c      	b.n	800373c <_vfiprintf_r+0x48>
 8003902:	ab03      	add	r3, sp, #12
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	462a      	mov	r2, r5
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <_vfiprintf_r+0x22c>)
 800390a:	a904      	add	r1, sp, #16
 800390c:	4630      	mov	r0, r6
 800390e:	f7fd feaf 	bl	8001670 <_printf_i>
 8003912:	e7e4      	b.n	80038de <_vfiprintf_r+0x1ea>
 8003914:	08003e94 	.word	0x08003e94
 8003918:	08003e9e 	.word	0x08003e9e
 800391c:	08001161 	.word	0x08001161
 8003920:	080036d1 	.word	0x080036d1
 8003924:	08003e9a 	.word	0x08003e9a

08003928 <__swbuf_r>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	460e      	mov	r6, r1
 800392c:	4614      	mov	r4, r2
 800392e:	4605      	mov	r5, r0
 8003930:	b118      	cbz	r0, 800393a <__swbuf_r+0x12>
 8003932:	6a03      	ldr	r3, [r0, #32]
 8003934:	b90b      	cbnz	r3, 800393a <__swbuf_r+0x12>
 8003936:	f7fe f849 	bl	80019cc <__sinit>
 800393a:	69a3      	ldr	r3, [r4, #24]
 800393c:	60a3      	str	r3, [r4, #8]
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	071a      	lsls	r2, r3, #28
 8003942:	d525      	bpl.n	8003990 <__swbuf_r+0x68>
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	b31b      	cbz	r3, 8003990 <__swbuf_r+0x68>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	6922      	ldr	r2, [r4, #16]
 800394c:	1a98      	subs	r0, r3, r2
 800394e:	6963      	ldr	r3, [r4, #20]
 8003950:	b2f6      	uxtb	r6, r6
 8003952:	4283      	cmp	r3, r0
 8003954:	4637      	mov	r7, r6
 8003956:	dc04      	bgt.n	8003962 <__swbuf_r+0x3a>
 8003958:	4621      	mov	r1, r4
 800395a:	4628      	mov	r0, r5
 800395c:	f7ff fd9e 	bl	800349c <_fflush_r>
 8003960:	b9e0      	cbnz	r0, 800399c <__swbuf_r+0x74>
 8003962:	68a3      	ldr	r3, [r4, #8]
 8003964:	3b01      	subs	r3, #1
 8003966:	60a3      	str	r3, [r4, #8]
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	6022      	str	r2, [r4, #0]
 800396e:	701e      	strb	r6, [r3, #0]
 8003970:	6962      	ldr	r2, [r4, #20]
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	429a      	cmp	r2, r3
 8003976:	d004      	beq.n	8003982 <__swbuf_r+0x5a>
 8003978:	89a3      	ldrh	r3, [r4, #12]
 800397a:	07db      	lsls	r3, r3, #31
 800397c:	d506      	bpl.n	800398c <__swbuf_r+0x64>
 800397e:	2e0a      	cmp	r6, #10
 8003980:	d104      	bne.n	800398c <__swbuf_r+0x64>
 8003982:	4621      	mov	r1, r4
 8003984:	4628      	mov	r0, r5
 8003986:	f7ff fd89 	bl	800349c <_fflush_r>
 800398a:	b938      	cbnz	r0, 800399c <__swbuf_r+0x74>
 800398c:	4638      	mov	r0, r7
 800398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003990:	4621      	mov	r1, r4
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f806 	bl	80039a4 <__swsetup_r>
 8003998:	2800      	cmp	r0, #0
 800399a:	d0d5      	beq.n	8003948 <__swbuf_r+0x20>
 800399c:	f04f 37ff 	mov.w	r7, #4294967295
 80039a0:	e7f4      	b.n	800398c <__swbuf_r+0x64>
	...

080039a4 <__swsetup_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <__swsetup_r+0xac>)
 80039a8:	4605      	mov	r5, r0
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	460c      	mov	r4, r1
 80039ae:	b118      	cbz	r0, 80039b8 <__swsetup_r+0x14>
 80039b0:	6a03      	ldr	r3, [r0, #32]
 80039b2:	b90b      	cbnz	r3, 80039b8 <__swsetup_r+0x14>
 80039b4:	f7fe f80a 	bl	80019cc <__sinit>
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039be:	0718      	lsls	r0, r3, #28
 80039c0:	d422      	bmi.n	8003a08 <__swsetup_r+0x64>
 80039c2:	06d9      	lsls	r1, r3, #27
 80039c4:	d407      	bmi.n	80039d6 <__swsetup_r+0x32>
 80039c6:	2309      	movs	r3, #9
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	e034      	b.n	8003a40 <__swsetup_r+0x9c>
 80039d6:	0758      	lsls	r0, r3, #29
 80039d8:	d512      	bpl.n	8003a00 <__swsetup_r+0x5c>
 80039da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039dc:	b141      	cbz	r1, 80039f0 <__swsetup_r+0x4c>
 80039de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039e2:	4299      	cmp	r1, r3
 80039e4:	d002      	beq.n	80039ec <__swsetup_r+0x48>
 80039e6:	4628      	mov	r0, r5
 80039e8:	f7fe fefe 	bl	80027e8 <_free_r>
 80039ec:	2300      	movs	r3, #0
 80039ee:	6363      	str	r3, [r4, #52]	; 0x34
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	2300      	movs	r3, #0
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f043 0308 	orr.w	r3, r3, #8
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	b94b      	cbnz	r3, 8003a20 <__swsetup_r+0x7c>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a16:	d003      	beq.n	8003a20 <__swsetup_r+0x7c>
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f884 	bl	8003b28 <__smakebuf_r>
 8003a20:	89a0      	ldrh	r0, [r4, #12]
 8003a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a26:	f010 0301 	ands.w	r3, r0, #1
 8003a2a:	d00a      	beq.n	8003a42 <__swsetup_r+0x9e>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60a3      	str	r3, [r4, #8]
 8003a30:	6963      	ldr	r3, [r4, #20]
 8003a32:	425b      	negs	r3, r3
 8003a34:	61a3      	str	r3, [r4, #24]
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	b943      	cbnz	r3, 8003a4c <__swsetup_r+0xa8>
 8003a3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a3e:	d1c4      	bne.n	80039ca <__swsetup_r+0x26>
 8003a40:	bd38      	pop	{r3, r4, r5, pc}
 8003a42:	0781      	lsls	r1, r0, #30
 8003a44:	bf58      	it	pl
 8003a46:	6963      	ldrpl	r3, [r4, #20]
 8003a48:	60a3      	str	r3, [r4, #8]
 8003a4a:	e7f4      	b.n	8003a36 <__swsetup_r+0x92>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	e7f7      	b.n	8003a40 <__swsetup_r+0x9c>
 8003a50:	24000098 	.word	0x24000098

08003a54 <_raise_r>:
 8003a54:	291f      	cmp	r1, #31
 8003a56:	b538      	push	{r3, r4, r5, lr}
 8003a58:	4604      	mov	r4, r0
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	d904      	bls.n	8003a68 <_raise_r+0x14>
 8003a5e:	2316      	movs	r3, #22
 8003a60:	6003      	str	r3, [r0, #0]
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003a6a:	b112      	cbz	r2, 8003a72 <_raise_r+0x1e>
 8003a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a70:	b94b      	cbnz	r3, 8003a86 <_raise_r+0x32>
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 f830 	bl	8003ad8 <_getpid_r>
 8003a78:	462a      	mov	r2, r5
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a82:	f000 b817 	b.w	8003ab4 <_kill_r>
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d00a      	beq.n	8003aa0 <_raise_r+0x4c>
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	d103      	bne.n	8003a96 <_raise_r+0x42>
 8003a8e:	2316      	movs	r3, #22
 8003a90:	6003      	str	r3, [r0, #0]
 8003a92:	2001      	movs	r0, #1
 8003a94:	e7e7      	b.n	8003a66 <_raise_r+0x12>
 8003a96:	2400      	movs	r4, #0
 8003a98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	4798      	blx	r3
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e7e0      	b.n	8003a66 <_raise_r+0x12>

08003aa4 <raise>:
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <raise+0xc>)
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f7ff bfd3 	b.w	8003a54 <_raise_r>
 8003aae:	bf00      	nop
 8003ab0:	24000098 	.word	0x24000098

08003ab4 <_kill_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4d07      	ldr	r5, [pc, #28]	; (8003ad4 <_kill_r+0x20>)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	f7fd f9d3 	bl	8000e6c <_kill>
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	d102      	bne.n	8003ad0 <_kill_r+0x1c>
 8003aca:	682b      	ldr	r3, [r5, #0]
 8003acc:	b103      	cbz	r3, 8003ad0 <_kill_r+0x1c>
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2400038c 	.word	0x2400038c

08003ad8 <_getpid_r>:
 8003ad8:	f7fd b9c0 	b.w	8000e5c <_getpid>

08003adc <__swhatbuf_r>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	460c      	mov	r4, r1
 8003ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae4:	2900      	cmp	r1, #0
 8003ae6:	b096      	sub	sp, #88	; 0x58
 8003ae8:	4615      	mov	r5, r2
 8003aea:	461e      	mov	r6, r3
 8003aec:	da0d      	bge.n	8003b0a <__swhatbuf_r+0x2e>
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	bf0c      	ite	eq
 8003afa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003afe:	2340      	movne	r3, #64	; 0x40
 8003b00:	2000      	movs	r0, #0
 8003b02:	6031      	str	r1, [r6, #0]
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	b016      	add	sp, #88	; 0x58
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
 8003b0a:	466a      	mov	r2, sp
 8003b0c:	f000 f848 	bl	8003ba0 <_fstat_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dbec      	blt.n	8003aee <__swhatbuf_r+0x12>
 8003b14:	9901      	ldr	r1, [sp, #4]
 8003b16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b1e:	4259      	negs	r1, r3
 8003b20:	4159      	adcs	r1, r3
 8003b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b26:	e7eb      	b.n	8003b00 <__swhatbuf_r+0x24>

08003b28 <__smakebuf_r>:
 8003b28:	898b      	ldrh	r3, [r1, #12]
 8003b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b2c:	079d      	lsls	r5, r3, #30
 8003b2e:	4606      	mov	r6, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	d507      	bpl.n	8003b44 <__smakebuf_r+0x1c>
 8003b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	6123      	str	r3, [r4, #16]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	6163      	str	r3, [r4, #20]
 8003b40:	b002      	add	sp, #8
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	ab01      	add	r3, sp, #4
 8003b46:	466a      	mov	r2, sp
 8003b48:	f7ff ffc8 	bl	8003adc <__swhatbuf_r>
 8003b4c:	9900      	ldr	r1, [sp, #0]
 8003b4e:	4605      	mov	r5, r0
 8003b50:	4630      	mov	r0, r6
 8003b52:	f7fe febd 	bl	80028d0 <_malloc_r>
 8003b56:	b948      	cbnz	r0, 8003b6c <__smakebuf_r+0x44>
 8003b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5c:	059a      	lsls	r2, r3, #22
 8003b5e:	d4ef      	bmi.n	8003b40 <__smakebuf_r+0x18>
 8003b60:	f023 0303 	bic.w	r3, r3, #3
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	81a3      	strh	r3, [r4, #12]
 8003b6a:	e7e3      	b.n	8003b34 <__smakebuf_r+0xc>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	6020      	str	r0, [r4, #0]
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	9b00      	ldr	r3, [sp, #0]
 8003b78:	6163      	str	r3, [r4, #20]
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	6120      	str	r0, [r4, #16]
 8003b7e:	b15b      	cbz	r3, 8003b98 <__smakebuf_r+0x70>
 8003b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f81d 	bl	8003bc4 <_isatty_r>
 8003b8a:	b128      	cbz	r0, 8003b98 <__smakebuf_r+0x70>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	431d      	orrs	r5, r3
 8003b9c:	81a5      	strh	r5, [r4, #12]
 8003b9e:	e7cf      	b.n	8003b40 <__smakebuf_r+0x18>

08003ba0 <_fstat_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4d07      	ldr	r5, [pc, #28]	; (8003bc0 <_fstat_r+0x20>)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	f7fd f9bc 	bl	8000f2a <_fstat>
 8003bb2:	1c43      	adds	r3, r0, #1
 8003bb4:	d102      	bne.n	8003bbc <_fstat_r+0x1c>
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	b103      	cbz	r3, 8003bbc <_fstat_r+0x1c>
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2400038c 	.word	0x2400038c

08003bc4 <_isatty_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d06      	ldr	r5, [pc, #24]	; (8003be0 <_isatty_r+0x1c>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd f9bb 	bl	8000f4a <_isatty>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_isatty_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_isatty_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	2400038c 	.word	0x2400038c

08003be4 <_init>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr

08003bf0 <_fini>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr
